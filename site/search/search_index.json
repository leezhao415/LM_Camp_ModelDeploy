{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6a21\u578b\u90e8\u7f72\u5b9e\u6218 \u540c\u5b66\u4eec\uff0c\u4f60\u5df2\u7ecf\u5b66\u4e60 AI \u76f8\u5173\u7684\u4f20\u7edf\u673a\u5668\u5b66\u4e60\u3001\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\uff0c\u5e76\u4e14\u5e94\u7528\u8fd9\u4e9b AI \u6280\u672f\u89e3\u51b3\u4e00\u4e9b\u6587\u672c\u5206\u7c7b\u3001\u56fe\u50cf\u5206\u7c7b\u3001\u6587\u672c\u751f\u6210\u7b49\u95ee\u9898\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u5c06\u5e26\u7740\u540c\u5b66\u4eec\u4e86\u89e3\u5982\u4f55\u5c06\u6211\u4eec\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u6a21\u578b\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u5236\u4f5c\u3001\u6253\u5305\u6210\u4e00\u4e2a\u53ef\u4ee5\u76f4\u63a5\u4ea4\u4ed8\u7684\u8f6f\u4ef6\u3001\u5e76\u53ef\u4ee5\u5feb\u901f\u90e8\u7f72\u3002 \u5728\u672c\u7ae0\u8282\uff0c\u6211\u4eec\u5c06\u8981\u4e86\u89e3\u5230\u7684\u6280\u672f\u5982\u4e0b\uff1a \u4e86\u89e3\u95ee\u9898\u89e3\u51b3\u7684\u5de5\u4f5c\u6d41\u7a0b \u4f7f\u7528 \u6734\u7d20\u8d1d\u53f6\u65af \u8bad\u7ec3\u5783\u573e\u90ae\u4ef6\u5206\u7c7b\u6a21\u578b \u4f7f\u7528 Flask \u6846\u67b6\u5c06\u670d\u52a1\u5c01\u88c5\u6210\u63a5\u53e3 \u4f7f\u7528 Docker \u6280\u672f\u5c06\u670d\u52a1\u5bb9\u5668\u5316\uff0c\u4fbf\u4e8e\u6253\u5305\u53d1\u5e03 \u4f7f\u7528 Gradio \u6846\u67b6\u5c06\u670d\u52a1\u5c01\u88c5\u6210\u63a5\u53e3","title":"\u6a21\u578b\u90e8\u7f72\u5b9e\u6218"},{"location":"#_1","text":"\u540c\u5b66\u4eec\uff0c\u4f60\u5df2\u7ecf\u5b66\u4e60 AI \u76f8\u5173\u7684\u4f20\u7edf\u673a\u5668\u5b66\u4e60\u3001\u6df1\u5ea6\u5b66\u4e60\u7b97\u6cd5\uff0c\u5e76\u4e14\u5e94\u7528\u8fd9\u4e9b AI \u6280\u672f\u89e3\u51b3\u4e00\u4e9b\u6587\u672c\u5206\u7c7b\u3001\u56fe\u50cf\u5206\u7c7b\u3001\u6587\u672c\u751f\u6210\u7b49\u95ee\u9898\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u5c06\u5e26\u7740\u540c\u5b66\u4eec\u4e86\u89e3\u5982\u4f55\u5c06\u6211\u4eec\u7684\u673a\u5668\u5b66\u4e60\u7b97\u6cd5\u6a21\u578b\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u5236\u4f5c\u3001\u6253\u5305\u6210\u4e00\u4e2a\u53ef\u4ee5\u76f4\u63a5\u4ea4\u4ed8\u7684\u8f6f\u4ef6\u3001\u5e76\u53ef\u4ee5\u5feb\u901f\u90e8\u7f72\u3002 \u5728\u672c\u7ae0\u8282\uff0c\u6211\u4eec\u5c06\u8981\u4e86\u89e3\u5230\u7684\u6280\u672f\u5982\u4e0b\uff1a \u4e86\u89e3\u95ee\u9898\u89e3\u51b3\u7684\u5de5\u4f5c\u6d41\u7a0b \u4f7f\u7528 \u6734\u7d20\u8d1d\u53f6\u65af \u8bad\u7ec3\u5783\u573e\u90ae\u4ef6\u5206\u7c7b\u6a21\u578b \u4f7f\u7528 Flask \u6846\u67b6\u5c06\u670d\u52a1\u5c01\u88c5\u6210\u63a5\u53e3 \u4f7f\u7528 Docker \u6280\u672f\u5c06\u670d\u52a1\u5bb9\u5668\u5316\uff0c\u4fbf\u4e8e\u6253\u5305\u53d1\u5e03 \u4f7f\u7528 Gradio \u6846\u67b6\u5c06\u670d\u52a1\u5c01\u88c5\u6210\u63a5\u53e3","title":"\u6a21\u578b\u90e8\u7f72\u5b9e\u6218"},{"location":"01-%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/00-README/","text":"\u6a21\u578b\u8bad\u7ec3 \u4e3b\u8981\u5185\u5bb9 \u5728\u8fd9\u4e00\u5c0f\u8282\uff0c\u6211\u4eec\u5c06\u4f1a\u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u7b97\u6cd5\u8bad\u7ec3\u4e00\u4e2a\u4e2d\u6587\u5783\u573e\u90ae\u4ef6\u5206\u7c7b\u6a21\u578b\uff0c\u4e3a\u6211\u4eec\u540e\u9762\u6a21\u578b\u90e8\u7f72\u505a\u51c6\u5907\u3002\u6211\u4eec\u5c06\u4f1a\u4ece\u96f6\u5f00\u59cb\u53bb\u7f16\u5199\uff0c\u6240\u9700\u8981\u7684\u524d\u7f6e\u77e5\u8bc6: \u662f\u540c\u5b66\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86\u6734\u7d20\u8d1d\u53f6\u65af\u7b97\u6cd5\u7684\u57fa\u672c\u539f\u7406\u3002","title":"\u6a21\u578b\u8bad\u7ec3"},{"location":"01-%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/00-README/#_1","text":"","title":"\u6a21\u578b\u8bad\u7ec3"},{"location":"01-%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/00-README/#_2","text":"\u5728\u8fd9\u4e00\u5c0f\u8282\uff0c\u6211\u4eec\u5c06\u4f1a\u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u7b97\u6cd5\u8bad\u7ec3\u4e00\u4e2a\u4e2d\u6587\u5783\u573e\u90ae\u4ef6\u5206\u7c7b\u6a21\u578b\uff0c\u4e3a\u6211\u4eec\u540e\u9762\u6a21\u578b\u90e8\u7f72\u505a\u51c6\u5907\u3002\u6211\u4eec\u5c06\u4f1a\u4ece\u96f6\u5f00\u59cb\u53bb\u7f16\u5199\uff0c\u6240\u9700\u8981\u7684\u524d\u7f6e\u77e5\u8bc6: \u662f\u540c\u5b66\u4eec\u5df2\u7ecf\u4e86\u89e3\u4e86\u6734\u7d20\u8d1d\u53f6\u65af\u7b97\u6cd5\u7684\u57fa\u672c\u539f\u7406\u3002","title":"\u4e3b\u8981\u5185\u5bb9"},{"location":"01-%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/01-%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E5%88%86%E7%B1%BB-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/","text":"\u5783\u573e\u90ae\u4ef6\u5206\u7c7b-\u6570\u636e\u5904\u7406 \u5783\u573e\u90ae\u4ef6\u5206\u7c7b\u662f\u4e00\u79cd\u5177\u6709\u5e7f\u6cdb\u5e94\u7528\u573a\u666f\u7684\u4e8c\u5206\u7c7b\u95ee\u9898\uff0c\u53ef\u4ee5\u5229\u7528\u673a\u5668\u5b66\u4e60\u8fdb\u884c\u89e3\u51b3\uff0c\u5e02\u573a\u4e0a\u5df2\u7ecf\u6709\u5f88\u6210\u719f\u7684\u5783\u573e\u90ae\u4ef6\u5206\u7c7b\u8f6f\u4ef6\u6216\u96c6\u6210\u5728 Outlook\u4e0a \u7684\u5783\u573e\u90ae\u4ef6\u8fc7\u6ee4\u63d2\u4ef6\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u7b97\u6cd5\u8bad\u7ec3\u4e00\u4e2a\u300a\u5783\u573e\u90ae\u4ef6\u5206\u7c7b\u5668\u300b\u3002 1. \u6570\u636e\u96c6\u4ecb\u7ecd \u6570\u636e\u96c6\u94fe\u63a5: https://plg.uwaterloo.ca/cgi-bin/cgiwrap/gvcormac/foo06 \u90ae\u4ef6\u6570\u636e\u5b58\u653e\u5728 trec06c \u76ee\u5f55\u4e0b\uff0c\u8be5\u76ee\u5f55\u4e0b\u6709 data\u3001delay\u3001full \u4e09\u4e2a\u5b50\u76ee\u5f55\uff0c\u5176\u4e2d full \u76ee\u5f55\u4e0b\u7684 index \u6587\u4ef6\u4e2d\u5b58\u50a8\u4e86\u6240\u6709\u90ae\u4ef6\u7684\u8def\u5f84\uff0c\u6bcf\u4e00\u4e2a\u8def\u5f84\u4e3a\u4e00\u4e2a\u5783\u573e\u90ae\u4ef6\uff0c\u5982\u4e0b\u56fe\u6240\u793a: \u7b2c\u4e00\u9879\u4e3a\u6807\u7b7e\u503c \u7b2c\u4e8c\u9879\u4e3a\u90ae\u4ef6\u8def\u5f84(\u6ce8\u610f: \u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u76f8\u5bf9\u8def\u5f84) \u5176\u4e2d\u7684\u5783\u573e\u90ae\u4ef6\u5185\u5bb9\u5982\u4e0b: Received : from coozo.com ([ 219.133.254.230 ]) by spam - gw . ccert . edu . cn ( MIMEDefang ) with ESMTP id j8L2Zoqi028766 for < li @ccert . edu . cn > ; Fri , 23 Sep 2005 13 : 01 : 45 + 0800 ( CST ) Message - ID : < 200509211035. j8L2Zoqi028766 @spam - gw . ccert . edu . cn > From : \"you\" < you @coozo . com > Subject : = ? gb2312 ? B ? us / X9w == ? = To : li @ccert . edu . cn Content - Type : text / plain ; charset = \"GB2312\" Content - Transfer - Encoding : 8 bit Date : Sun , 23 Oct 2005 23 : 44 : 32 + 0800 X - Priority : 3 X - Mailer : Microsoft Outlook Express 6.00.2800.1106 \u60a8\u597d \uff01 \u6211\u516c\u53f8\u6709\u591a\u4f59\u7684\u53d1\u7968\u53ef\u4ee5\u5411\u5916\u4ee3\u5f00 \uff01\uff08 \u56fd\u7a0e \u3001 \u5730\u7a0e \u3001 \u8fd0\u8f93 \u3001 \u5e7f\u544a \u3001 \u6d77\u5173\u7f34\u6b3e\u4e66 \uff09\u3002 \u5982\u679c\u8d35\u516c\u53f8 \uff08 \u5382 \uff09 \u6709\u9700\u8981\u8bf7\u6765\u7535\u6d3d\u8c08 \u3001 \u54a8\u8be2 \uff01 \u8054\u7cfb\u7535\u8bdd : 013510251389 \u9648\u5148\u751f \u8c22\u8c22 \u987a\u795d\u5546\u797a ! \u6240\u9700\u8981\u7528\u5230\u7684\u7a0b\u5e8f\u5305: import pandas as pd import os import codecs import re import zhconv import jieba import jieba.posseg as psg from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split import pickle import time from tqdm import tqdm # \u5c06\u5f53\u524d\u76ee\u5f55\u8bbe\u7f6e\u4e3a\u5de5\u4f5c\u76ee\u5f55 os . chdir ( os . path . dirname ( os . path . abspath ( __file__ ))) # \u7ed3\u5df4\u4e0d\u8f93\u51fa\u65e5\u5fd7 jieba . setLogLevel ( jieba . logging . INFO ) 2. \u90ae\u4ef6\u6570\u636e\u8f6c\u6362 \u90ae\u4ef6\u6570\u636e\u662f\u4ee5\u5355\u4e2a\u6587\u4ef6\u7684\u65b9\u5f0f\u5b58\u50a8\uff0c\u6211\u4eec\u5c06\u6240\u6709\u7684\u90ae\u4ef6\u6570\u636e\u4ece\u6587\u4ef6\u8bfb\u53d6\u51fa\u6765\uff0c\u5e76\u8f6c\u5b58\u5230\u4e00\u4e2a csv \u6587\u4ef6\u4e2d\uff0c\u65b9\u4fbf\u540e\u9762\u7684\u6570\u636e\u5904\u7406\u3002\u5e76\u4e14\uff0c\u6211\u4eec\u4e5f\u4f1a\u5bf9\u6570\u636e\u5212\u5206\u4e3a\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\uff0c\u8bad\u7ec3\u96c6\u5927\u6982\u6709 5\u4e07+\u5de6\u53f3\uff0c\u6d4b\u8bd5\u96c6 1\u4e07+\u5de6\u53f3\u3002 \u5b8c\u6574\u5904\u7406\u4ee3\u7801\u5982\u4e0b: def load_email_data (): # \u8bfb\u53d6\u90ae\u4ef6\u76ee\u5f55 filenames , labels = [], [] with open ( 'data/trec06c/full/index' ) as file : for line in file : label , path = line . strip () . split () labels . append ( label ) filenames . append ( path ) # \u8bfb\u53d6\u90ae\u4ef6\u5185\u5bb9 os . chdir ( 'data/trec06c/full' ) contents = [] for filename in filenames : with open ( filename , encoding = 'gbk' , errors = 'ignore' ) as file : content = file . read () contents . append ( content ) # \u6570\u636e\u96c6\u5206\u5272 x_train , x_test , y_train , y_test = \\ train_test_split ( contents , labels , test_size = 0.2 , stratify = labels , random_state = 42 ) # \u5b58\u50a8\u5230 csv \u6587\u4ef6\u4e2d os . chdir ( os . path . dirname ( os . path . abspath ( __file__ ))) train_data = pd . DataFrame () train_data [ 'emails' ] = x_train train_data [ 'labels' ] = y_train train_data . to_csv ( 'data/01-\u539f\u59cb\u90ae\u4ef6\u6570\u636e-\u8bad\u7ec3\u96c6.csv' ) test_data = pd . DataFrame () test_data [ 'emails' ] = x_test test_data [ 'labels' ] = y_test test_data . to_csv ( 'data/01-\u539f\u59cb\u90ae\u4ef6\u6570\u636e-\u6d4b\u8bd5\u96c6.csv' ) \u4e0a\u9762\u7684\u4ee3\u7801\u6267\u884c\u6210\u529f\u4e4b\u540e\uff0c\u4f1a\u5728 data \u76ee\u5f55\u4e0b\u521b\u5efa\u4e24\u4e2a\u6587\u4ef6: 01-\u539f\u59cb\u90ae\u4ef6\u6570\u636e-\u8bad\u7ec3\u96c6.csv 01-\u539f\u59cb\u90ae\u4ef6\u6570\u636e-\u6d4b\u8bd5\u96c6.csv 3. \u90ae\u4ef6\u6570\u636e\u6e05\u6d17 \u90ae\u4ef6\u4e2d\u6570\u636e\u5f88\u6742\u4e71\uff0c\u4e5f\u5305\u542b\u4e86\u5f88\u591a\u6211\u4eec\u4e0d\u9700\u8981\u7684\u4fe1\u606f\u3002\u8fd9\u4e00\u6b65\u6211\u4eec\u4e3b\u8981\u5bf9\u6bcf\u4e00\u5c01\u90ae\u4ef6\u5185\u5bb9\u8fdb\u884c\u4e00\u4e9b\u6e05\u6d17\u5de5\u4f5c\uff0c\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762: \u53bb\u9664\u975e\u4e2d\u6587\u7684\u5185\u5bb9 \u7e41\u4f53\u5b57\u8f6c\u6362\u4e3a\u7b80\u4f53\u5b57 \u5206\u8bcd\u5e76\u6839\u636e\u8bcd\u6027\u7b5b\u9009\u90ae\u4ef6\u5185\u5bb9 \u5b8c\u6574\u5904\u7406\u4ee3\u7801\u5982\u4e0b: def clean_data ( email ): # 1. \u53bb\u9664\u975e\u4e2d\u6587\u5b57\u7b26 email = re . sub ( r '[^\\u4e00-\\u9fa5]' , '' , email ) # 2. \u7e41\u4f53\u8f6c\u7b80\u4f53 email = zhconv . convert ( email , 'zh-cn' ) # 3. \u90ae\u4ef6\u8bcd\u6027\u7b5b\u9009 email_pos = psg . cut ( email ) allow_pos = [ 'n' , 'nr' , 'ns' , 'nt' , 'v' , 'a' ] email = [] for word , pos in email_pos : if pos in allow_pos : email . append ( word ) # 4. \u8f6c\u6362\u6210 str \u7c7b\u578b email = ' ' . join ( email ) return email def clean_email_data (): train_data = pd . read_csv ( 'data/01-\u539f\u59cb\u90ae\u4ef6\u6570\u636e-\u8bad\u7ec3\u96c6.csv' ) emails , labels = [], [] progress = tqdm ( range ( len ( train_data )), desc = '\u6e05\u6d17\u8fdb\u5ea6' ) for email , label in zip ( train_data [ 'emails' ], train_data [ 'labels' ]): # \u6e05\u6d17\u8bed\u6599 email = clean_data ( email ) # \u957f\u5ea6\u4e3a0\u7684\u6570\u636e\u5254\u9664 if len ( email ) == 0 : continue # \u7f13\u5b58\u6e05\u6d17\u7ed3\u679c labels . append ( label ) emails . append ( email ) # \u66f4\u65b0\u8fdb\u5ea6 progress . update () # \u5b58\u50a8\u5230 csv \u6587\u4ef6\u4e2d train_data = pd . DataFrame () train_data [ 'emails' ] = emails train_data [ 'labels' ] = labels train_data . to_csv ( 'data/02-\u6e05\u6d17\u540e\u7684\u6570\u636e-\u8bad\u7ec3\u96c6.csv' ) \u5f53\u6267\u884c clean_email_data \u51fd\u6570\u4e4b\u540e\uff0c\u4f1a\u5728 data \u76ee\u5f55\u4e0b\u521b\u5efa 02-\u6e05\u6d17\u540e\u7684\u6570\u636e-\u8bad\u7ec3\u96c6.csv \u6587\u4ef6\u3002 4. \u90ae\u4ef6\u7279\u5f81\u63d0\u53d6 \u6211\u4eec\u4f1a\u5c06\u6587\u672c\u6570\u636e\u8f6c\u6362\u6210\u8bcd\u9891\u5411\u91cf\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528 sklearn \u7684 CountVectorizer \u6765\u5b9e\u73b0\u5bf9\u6587\u672c\u6570\u636e\u7684\u7279\u5f81\u63d0\u53d6\u5de5\u4f5c\uff0c\u5e76\u5c06\u8bad\u7ec3\u96c6\u6570\u636e\u8f6c\u6362\u6210\u8bcd\u9891\u5411\u91cf\u8868\u793a\uff0c\u4ee5\u4fbf\u4e8e\u540e\u9762\u76f4\u63a5\u80fd\u591f\u9001\u5165\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\u3002 \u5b8c\u6574\u5904\u7406\u4ee3\u7801\u5982\u4e0b: def extract_email_feature (): train_data = pd . read_csv ( 'data/02-\u6e05\u6d17\u540e\u7684\u6570\u636e-\u8bad\u7ec3\u96c6.csv' ) # \u63d0\u53d6\u7279\u5f81 transfer = CountVectorizer ( max_features = 10000 ) emails = transfer . fit_transform ( train_data [ 'emails' ]) # \u5c06\u8f6c\u6362\u540e\u7684\u8bad\u7ec3\u6570\u636e\u5b58\u50a8 train_data_dict = {} train_data_dict [ 'emails' ] = emails . toarray () . tolist () train_data_dict [ 'labels' ] = train_data [ 'labels' ] . tolist () pickle . dump ( train_data_dict , open ( 'data/03-\u6a21\u578b\u8bad\u7ec3\u6570\u636e.pkl' , 'wb' ), 3 ) # \u5c06\u63d0\u53d6\u5230\u7684\u7279\u5f81\u8fdb\u884c\u5b58\u50a8 feature_names = transfer . get_feature_names_out () print ( '\u7279\u5f81\u6570\u91cf:' , len ( feature_names )) pickle . dump ( feature_names , open ( 'data/03-\u6a21\u578b\u8bad\u7ec3\u7279\u5f81.pkl' , 'wb' ), 3 ) \u51fd\u6570\u6267\u884c\u4e4b\u540e\uff0c\u4f1a\u5728 data \u76ee\u5f55\u4e0b\u521b\u5efa\u4e24\u4e2a\u6587\u4ef6: 03-\u6a21\u578b\u8bad\u7ec3\u6570\u636e.pkl \u7528\u4e8e\u6a21\u578b\u8bad\u7ec3\u7684\u6570\u636e 03-\u6a21\u578b\u8bad\u7ec3\u7279\u5f81.pkl \u7528\u4e8e\u5bf9\u6d4b\u8bd5\u96c6\u6570\u636e\u8fdb\u884c\u8bcd\u9891\u5411\u91cf\u8f6c\u6362\uff0c\u8be5\u6587\u4ef6\u5728\u6a21\u578b\u8bc4\u4f30\u3001\u9884\u6d4b\u65f6\u4f1a\u7528\u5230 \u6ce8\u610f: \u6211\u4eec\u63d0\u53d6\u7684\u7279\u5f81\u6570\u91cf\u6709\u5c06\u8fd1 10 \u4e07\uff0c\u7ef4\u5ea6\u592a\u5927\u4e86\uff0c\u6b64\u5904\u6211\u4eec\u5c31\u9009\u62e9\u8bcd\u9891\u6700\u9ad8\u7684\u524d 1 \u4e07\u7279\u5f81\u4f5c\u4e3a\u8bad\u7ec3\u7279\u5f81\u3002 \u6574\u4e2a\u6570\u636e\u7684\u5904\u7406\u8fc7\u7a0b\u5728\u6211\u7684\u7b14\u8bb0\u672c\u4e0a\u5927\u6982\u9700\u8981 30 \u5206\u949f\u5de6\u53f3\u3002 \u6700\u8017\u65f6\u7684\u90e8\u5206\u8fd8\u662f\u6570\u636e\u6e05\u6d17\u90a3\u90e8\u5206\uff0c\u5982\u679c\u60f3\u52a0\u5feb\u901f\u5ea6\u7684\u8bdd\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u66f4\u5feb\u7684 jieba \u5de5\u5177\uff0c\u4f7f\u7528\u591a\u4efb\u52a1\u65b9\u5f0f\u52a0\u5feb\u5904\u7406\u901f\u5ea6\u3002","title":"\u5783\u573e\u90ae\u4ef6\u5206\u7c7b-\u6570\u636e\u5904\u7406"},{"location":"01-%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/01-%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E5%88%86%E7%B1%BB-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/#-","text":"\u5783\u573e\u90ae\u4ef6\u5206\u7c7b\u662f\u4e00\u79cd\u5177\u6709\u5e7f\u6cdb\u5e94\u7528\u573a\u666f\u7684\u4e8c\u5206\u7c7b\u95ee\u9898\uff0c\u53ef\u4ee5\u5229\u7528\u673a\u5668\u5b66\u4e60\u8fdb\u884c\u89e3\u51b3\uff0c\u5e02\u573a\u4e0a\u5df2\u7ecf\u6709\u5f88\u6210\u719f\u7684\u5783\u573e\u90ae\u4ef6\u5206\u7c7b\u8f6f\u4ef6\u6216\u96c6\u6210\u5728 Outlook\u4e0a \u7684\u5783\u573e\u90ae\u4ef6\u8fc7\u6ee4\u63d2\u4ef6\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u7b97\u6cd5\u8bad\u7ec3\u4e00\u4e2a\u300a\u5783\u573e\u90ae\u4ef6\u5206\u7c7b\u5668\u300b\u3002","title":"\u5783\u573e\u90ae\u4ef6\u5206\u7c7b-\u6570\u636e\u5904\u7406"},{"location":"01-%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/01-%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E5%88%86%E7%B1%BB-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/#1","text":"\u6570\u636e\u96c6\u94fe\u63a5: https://plg.uwaterloo.ca/cgi-bin/cgiwrap/gvcormac/foo06 \u90ae\u4ef6\u6570\u636e\u5b58\u653e\u5728 trec06c \u76ee\u5f55\u4e0b\uff0c\u8be5\u76ee\u5f55\u4e0b\u6709 data\u3001delay\u3001full \u4e09\u4e2a\u5b50\u76ee\u5f55\uff0c\u5176\u4e2d full \u76ee\u5f55\u4e0b\u7684 index \u6587\u4ef6\u4e2d\u5b58\u50a8\u4e86\u6240\u6709\u90ae\u4ef6\u7684\u8def\u5f84\uff0c\u6bcf\u4e00\u4e2a\u8def\u5f84\u4e3a\u4e00\u4e2a\u5783\u573e\u90ae\u4ef6\uff0c\u5982\u4e0b\u56fe\u6240\u793a: \u7b2c\u4e00\u9879\u4e3a\u6807\u7b7e\u503c \u7b2c\u4e8c\u9879\u4e3a\u90ae\u4ef6\u8def\u5f84(\u6ce8\u610f: \u8fd9\u91cc\u4f7f\u7528\u7684\u662f\u76f8\u5bf9\u8def\u5f84) \u5176\u4e2d\u7684\u5783\u573e\u90ae\u4ef6\u5185\u5bb9\u5982\u4e0b: Received : from coozo.com ([ 219.133.254.230 ]) by spam - gw . ccert . edu . cn ( MIMEDefang ) with ESMTP id j8L2Zoqi028766 for < li @ccert . edu . cn > ; Fri , 23 Sep 2005 13 : 01 : 45 + 0800 ( CST ) Message - ID : < 200509211035. j8L2Zoqi028766 @spam - gw . ccert . edu . cn > From : \"you\" < you @coozo . com > Subject : = ? gb2312 ? B ? us / X9w == ? = To : li @ccert . edu . cn Content - Type : text / plain ; charset = \"GB2312\" Content - Transfer - Encoding : 8 bit Date : Sun , 23 Oct 2005 23 : 44 : 32 + 0800 X - Priority : 3 X - Mailer : Microsoft Outlook Express 6.00.2800.1106 \u60a8\u597d \uff01 \u6211\u516c\u53f8\u6709\u591a\u4f59\u7684\u53d1\u7968\u53ef\u4ee5\u5411\u5916\u4ee3\u5f00 \uff01\uff08 \u56fd\u7a0e \u3001 \u5730\u7a0e \u3001 \u8fd0\u8f93 \u3001 \u5e7f\u544a \u3001 \u6d77\u5173\u7f34\u6b3e\u4e66 \uff09\u3002 \u5982\u679c\u8d35\u516c\u53f8 \uff08 \u5382 \uff09 \u6709\u9700\u8981\u8bf7\u6765\u7535\u6d3d\u8c08 \u3001 \u54a8\u8be2 \uff01 \u8054\u7cfb\u7535\u8bdd : 013510251389 \u9648\u5148\u751f \u8c22\u8c22 \u987a\u795d\u5546\u797a ! \u6240\u9700\u8981\u7528\u5230\u7684\u7a0b\u5e8f\u5305: import pandas as pd import os import codecs import re import zhconv import jieba import jieba.posseg as psg from sklearn.feature_extraction.text import CountVectorizer from sklearn.model_selection import train_test_split import pickle import time from tqdm import tqdm # \u5c06\u5f53\u524d\u76ee\u5f55\u8bbe\u7f6e\u4e3a\u5de5\u4f5c\u76ee\u5f55 os . chdir ( os . path . dirname ( os . path . abspath ( __file__ ))) # \u7ed3\u5df4\u4e0d\u8f93\u51fa\u65e5\u5fd7 jieba . setLogLevel ( jieba . logging . INFO )","title":"1. \u6570\u636e\u96c6\u4ecb\u7ecd"},{"location":"01-%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/01-%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E5%88%86%E7%B1%BB-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/#2","text":"\u90ae\u4ef6\u6570\u636e\u662f\u4ee5\u5355\u4e2a\u6587\u4ef6\u7684\u65b9\u5f0f\u5b58\u50a8\uff0c\u6211\u4eec\u5c06\u6240\u6709\u7684\u90ae\u4ef6\u6570\u636e\u4ece\u6587\u4ef6\u8bfb\u53d6\u51fa\u6765\uff0c\u5e76\u8f6c\u5b58\u5230\u4e00\u4e2a csv \u6587\u4ef6\u4e2d\uff0c\u65b9\u4fbf\u540e\u9762\u7684\u6570\u636e\u5904\u7406\u3002\u5e76\u4e14\uff0c\u6211\u4eec\u4e5f\u4f1a\u5bf9\u6570\u636e\u5212\u5206\u4e3a\u8bad\u7ec3\u96c6\u3001\u6d4b\u8bd5\u96c6\uff0c\u8bad\u7ec3\u96c6\u5927\u6982\u6709 5\u4e07+\u5de6\u53f3\uff0c\u6d4b\u8bd5\u96c6 1\u4e07+\u5de6\u53f3\u3002 \u5b8c\u6574\u5904\u7406\u4ee3\u7801\u5982\u4e0b: def load_email_data (): # \u8bfb\u53d6\u90ae\u4ef6\u76ee\u5f55 filenames , labels = [], [] with open ( 'data/trec06c/full/index' ) as file : for line in file : label , path = line . strip () . split () labels . append ( label ) filenames . append ( path ) # \u8bfb\u53d6\u90ae\u4ef6\u5185\u5bb9 os . chdir ( 'data/trec06c/full' ) contents = [] for filename in filenames : with open ( filename , encoding = 'gbk' , errors = 'ignore' ) as file : content = file . read () contents . append ( content ) # \u6570\u636e\u96c6\u5206\u5272 x_train , x_test , y_train , y_test = \\ train_test_split ( contents , labels , test_size = 0.2 , stratify = labels , random_state = 42 ) # \u5b58\u50a8\u5230 csv \u6587\u4ef6\u4e2d os . chdir ( os . path . dirname ( os . path . abspath ( __file__ ))) train_data = pd . DataFrame () train_data [ 'emails' ] = x_train train_data [ 'labels' ] = y_train train_data . to_csv ( 'data/01-\u539f\u59cb\u90ae\u4ef6\u6570\u636e-\u8bad\u7ec3\u96c6.csv' ) test_data = pd . DataFrame () test_data [ 'emails' ] = x_test test_data [ 'labels' ] = y_test test_data . to_csv ( 'data/01-\u539f\u59cb\u90ae\u4ef6\u6570\u636e-\u6d4b\u8bd5\u96c6.csv' ) \u4e0a\u9762\u7684\u4ee3\u7801\u6267\u884c\u6210\u529f\u4e4b\u540e\uff0c\u4f1a\u5728 data \u76ee\u5f55\u4e0b\u521b\u5efa\u4e24\u4e2a\u6587\u4ef6: 01-\u539f\u59cb\u90ae\u4ef6\u6570\u636e-\u8bad\u7ec3\u96c6.csv 01-\u539f\u59cb\u90ae\u4ef6\u6570\u636e-\u6d4b\u8bd5\u96c6.csv","title":"2. \u90ae\u4ef6\u6570\u636e\u8f6c\u6362"},{"location":"01-%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/01-%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E5%88%86%E7%B1%BB-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/#3","text":"\u90ae\u4ef6\u4e2d\u6570\u636e\u5f88\u6742\u4e71\uff0c\u4e5f\u5305\u542b\u4e86\u5f88\u591a\u6211\u4eec\u4e0d\u9700\u8981\u7684\u4fe1\u606f\u3002\u8fd9\u4e00\u6b65\u6211\u4eec\u4e3b\u8981\u5bf9\u6bcf\u4e00\u5c01\u90ae\u4ef6\u5185\u5bb9\u8fdb\u884c\u4e00\u4e9b\u6e05\u6d17\u5de5\u4f5c\uff0c\u4e3b\u8981\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762: \u53bb\u9664\u975e\u4e2d\u6587\u7684\u5185\u5bb9 \u7e41\u4f53\u5b57\u8f6c\u6362\u4e3a\u7b80\u4f53\u5b57 \u5206\u8bcd\u5e76\u6839\u636e\u8bcd\u6027\u7b5b\u9009\u90ae\u4ef6\u5185\u5bb9 \u5b8c\u6574\u5904\u7406\u4ee3\u7801\u5982\u4e0b: def clean_data ( email ): # 1. \u53bb\u9664\u975e\u4e2d\u6587\u5b57\u7b26 email = re . sub ( r '[^\\u4e00-\\u9fa5]' , '' , email ) # 2. \u7e41\u4f53\u8f6c\u7b80\u4f53 email = zhconv . convert ( email , 'zh-cn' ) # 3. \u90ae\u4ef6\u8bcd\u6027\u7b5b\u9009 email_pos = psg . cut ( email ) allow_pos = [ 'n' , 'nr' , 'ns' , 'nt' , 'v' , 'a' ] email = [] for word , pos in email_pos : if pos in allow_pos : email . append ( word ) # 4. \u8f6c\u6362\u6210 str \u7c7b\u578b email = ' ' . join ( email ) return email def clean_email_data (): train_data = pd . read_csv ( 'data/01-\u539f\u59cb\u90ae\u4ef6\u6570\u636e-\u8bad\u7ec3\u96c6.csv' ) emails , labels = [], [] progress = tqdm ( range ( len ( train_data )), desc = '\u6e05\u6d17\u8fdb\u5ea6' ) for email , label in zip ( train_data [ 'emails' ], train_data [ 'labels' ]): # \u6e05\u6d17\u8bed\u6599 email = clean_data ( email ) # \u957f\u5ea6\u4e3a0\u7684\u6570\u636e\u5254\u9664 if len ( email ) == 0 : continue # \u7f13\u5b58\u6e05\u6d17\u7ed3\u679c labels . append ( label ) emails . append ( email ) # \u66f4\u65b0\u8fdb\u5ea6 progress . update () # \u5b58\u50a8\u5230 csv \u6587\u4ef6\u4e2d train_data = pd . DataFrame () train_data [ 'emails' ] = emails train_data [ 'labels' ] = labels train_data . to_csv ( 'data/02-\u6e05\u6d17\u540e\u7684\u6570\u636e-\u8bad\u7ec3\u96c6.csv' ) \u5f53\u6267\u884c clean_email_data \u51fd\u6570\u4e4b\u540e\uff0c\u4f1a\u5728 data \u76ee\u5f55\u4e0b\u521b\u5efa 02-\u6e05\u6d17\u540e\u7684\u6570\u636e-\u8bad\u7ec3\u96c6.csv \u6587\u4ef6\u3002","title":"3. \u90ae\u4ef6\u6570\u636e\u6e05\u6d17"},{"location":"01-%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/01-%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E5%88%86%E7%B1%BB-%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/#4","text":"\u6211\u4eec\u4f1a\u5c06\u6587\u672c\u6570\u636e\u8f6c\u6362\u6210\u8bcd\u9891\u5411\u91cf\uff0c\u6240\u4ee5\u9700\u8981\u4f7f\u7528 sklearn \u7684 CountVectorizer \u6765\u5b9e\u73b0\u5bf9\u6587\u672c\u6570\u636e\u7684\u7279\u5f81\u63d0\u53d6\u5de5\u4f5c\uff0c\u5e76\u5c06\u8bad\u7ec3\u96c6\u6570\u636e\u8f6c\u6362\u6210\u8bcd\u9891\u5411\u91cf\u8868\u793a\uff0c\u4ee5\u4fbf\u4e8e\u540e\u9762\u76f4\u63a5\u80fd\u591f\u9001\u5165\u6a21\u578b\u8fdb\u884c\u8bad\u7ec3\u3002 \u5b8c\u6574\u5904\u7406\u4ee3\u7801\u5982\u4e0b: def extract_email_feature (): train_data = pd . read_csv ( 'data/02-\u6e05\u6d17\u540e\u7684\u6570\u636e-\u8bad\u7ec3\u96c6.csv' ) # \u63d0\u53d6\u7279\u5f81 transfer = CountVectorizer ( max_features = 10000 ) emails = transfer . fit_transform ( train_data [ 'emails' ]) # \u5c06\u8f6c\u6362\u540e\u7684\u8bad\u7ec3\u6570\u636e\u5b58\u50a8 train_data_dict = {} train_data_dict [ 'emails' ] = emails . toarray () . tolist () train_data_dict [ 'labels' ] = train_data [ 'labels' ] . tolist () pickle . dump ( train_data_dict , open ( 'data/03-\u6a21\u578b\u8bad\u7ec3\u6570\u636e.pkl' , 'wb' ), 3 ) # \u5c06\u63d0\u53d6\u5230\u7684\u7279\u5f81\u8fdb\u884c\u5b58\u50a8 feature_names = transfer . get_feature_names_out () print ( '\u7279\u5f81\u6570\u91cf:' , len ( feature_names )) pickle . dump ( feature_names , open ( 'data/03-\u6a21\u578b\u8bad\u7ec3\u7279\u5f81.pkl' , 'wb' ), 3 ) \u51fd\u6570\u6267\u884c\u4e4b\u540e\uff0c\u4f1a\u5728 data \u76ee\u5f55\u4e0b\u521b\u5efa\u4e24\u4e2a\u6587\u4ef6: 03-\u6a21\u578b\u8bad\u7ec3\u6570\u636e.pkl \u7528\u4e8e\u6a21\u578b\u8bad\u7ec3\u7684\u6570\u636e 03-\u6a21\u578b\u8bad\u7ec3\u7279\u5f81.pkl \u7528\u4e8e\u5bf9\u6d4b\u8bd5\u96c6\u6570\u636e\u8fdb\u884c\u8bcd\u9891\u5411\u91cf\u8f6c\u6362\uff0c\u8be5\u6587\u4ef6\u5728\u6a21\u578b\u8bc4\u4f30\u3001\u9884\u6d4b\u65f6\u4f1a\u7528\u5230 \u6ce8\u610f: \u6211\u4eec\u63d0\u53d6\u7684\u7279\u5f81\u6570\u91cf\u6709\u5c06\u8fd1 10 \u4e07\uff0c\u7ef4\u5ea6\u592a\u5927\u4e86\uff0c\u6b64\u5904\u6211\u4eec\u5c31\u9009\u62e9\u8bcd\u9891\u6700\u9ad8\u7684\u524d 1 \u4e07\u7279\u5f81\u4f5c\u4e3a\u8bad\u7ec3\u7279\u5f81\u3002 \u6574\u4e2a\u6570\u636e\u7684\u5904\u7406\u8fc7\u7a0b\u5728\u6211\u7684\u7b14\u8bb0\u672c\u4e0a\u5927\u6982\u9700\u8981 30 \u5206\u949f\u5de6\u53f3\u3002 \u6700\u8017\u65f6\u7684\u90e8\u5206\u8fd8\u662f\u6570\u636e\u6e05\u6d17\u90a3\u90e8\u5206\uff0c\u5982\u679c\u60f3\u52a0\u5feb\u901f\u5ea6\u7684\u8bdd\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u66f4\u5feb\u7684 jieba \u5de5\u5177\uff0c\u4f7f\u7528\u591a\u4efb\u52a1\u65b9\u5f0f\u52a0\u5feb\u5904\u7406\u901f\u5ea6\u3002","title":"4. \u90ae\u4ef6\u7279\u5f81\u63d0\u53d6"},{"location":"01-%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/02-%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E5%88%86%E7%B1%BB-%E8%AE%AD%E7%BB%83%E8%AF%84%E4%BC%B0/","text":"\u5783\u573e\u90ae\u4ef6\u5206\u7c7b-\u8bad\u7ec3\u8bc4\u4f30 \u6a21\u578b\u6211\u4eec\u9009\u62e9\u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u7b97\u6cd5\u3002 1. \u6a21\u578b\u8bad\u7ec3 \u8bad\u7ec3\u4ee3\u7801\u6bd4\u8f83\u7b80\u5355\uff0c\u4ee3\u7801\u6267\u884c\u7ed3\u675f\u4e4b\u540e\uff0c\u4f1a\u5728 data \u76ee\u5f55\u4e0b\u521b\u5efa\u6a21\u578b\u6587\u4ef6: 04-\u90ae\u4ef6\u5206\u7c7b\u6a21\u578b.pth\u3002 from sklearn.naive_bayes import MultinomialNB import pickle import joblib if __name__ == '__main__' : # \u52a0\u8f7d\u8bad\u7ec3\u6570\u636e train_data = pickle . load ( open ( 'data/03-\u6a21\u578b\u8bad\u7ec3\u6570\u636e.pkl' , 'rb' )) # \u521d\u59cb\u5316\u6a21\u578b model = MultinomialNB () model . fit ( train_data [ 'emails' ], train_data [ 'labels' ]) # \u6a21\u578b\u5b58\u50a8 joblib . dump ( model , 'data/04-\u90ae\u4ef6\u5206\u7c7b\u6a21\u578b.pth' ) 2. \u6a21\u578b\u8bc4\u4f30 \u6211\u4eec\u5c06 1\u4e07+ \u6d4b\u8bd5\u96c6\u6570\u636e\u9001\u5165\u6a21\u578b\uff0c\u5206\u522b\u53bb\u8bc4\u4f30\u6a21\u578b\u7684\u51c6\u786e\u7387\u3001\u7cbe\u5ea6\u3001\u53ec\u56de\u7387\u3002 import pickle import pandas as pd import joblib import os import re import zhconv import jieba from sklearn.feature_extraction.text import CountVectorizer from sklearn.metrics import precision_score from sklearn.metrics import recall_score from sklearn.metrics import accuracy_score import jieba.posseg as psg # \u5c06\u5f53\u524d\u76ee\u5f55\u8bbe\u7f6e\u4e3a\u5de5\u4f5c\u76ee\u5f55 os . chdir ( os . path . dirname ( os . path . abspath ( __file__ ))) def clean_data ( email ): # 1. \u53bb\u9664\u975e\u4e2d\u6587\u5b57\u7b26 email = re . sub ( r '[^\\u4e00-\\u9fa5]' , '' , email ) # 2. \u7e41\u4f53\u8f6c\u7b80\u4f53 email = zhconv . convert ( email , 'zh-cn' ) # 3. \u90ae\u4ef6\u8bcd\u6027\u7b5b\u9009 email_pos = psg . cut ( email ) allow_pos = [ 'n' , 'nr' , 'ns' , 'nt' , 'v' , 'a' ] email = [] for word , pos in email_pos : if pos in allow_pos : email . append ( word ) # 4. \u8f6c\u6362\u6210 str \u7c7b\u578b email = ' ' . join ( email ) return email # \u6a21\u578b\u8bc4\u4f30 def evaluate (): # \u52a0\u8f7d\u6570\u636e test_data = pd . read_csv ( 'data/01-\u539f\u59cb\u90ae\u4ef6\u6570\u636e-\u6d4b\u8bd5\u96c6.csv' ) # \u7279\u5f81\u63d0\u53d6\u5668 vocab = pickle . load ( open ( 'data/03-\u6a21\u578b\u8bad\u7ec3\u7279\u5f81.pkl' , 'rb' )) transfer = CountVectorizer ( vocabulary = vocab ) # \u52a0\u8f7d\u6a21\u578b model = joblib . load ( 'data/04-\u90ae\u4ef6\u5206\u7c7b\u6a21\u578b.pth' ) # \u6d4b\u8bd5\u96c6\u8bc4\u4f30 y_pred = [] for email in test_data [ 'emails' ] . to_numpy (): # \u6570\u636e\u6e05\u6d17 email = clean_data ( email ) # \u7279\u5f81\u63d0\u53d6 email = transfer . transform ([ email ]) . toarray () . tolist () # \u6a21\u578b\u8ba1\u7b97 output = model . predict ( email ) # \u5b58\u50a8\u7ed3\u679c y_pred . append ( output [ 0 ]) y_true = test_data [ 'labels' ] . tolist () # \u6837\u672c\u6570\u91cf samples = len ( test_data ) print ( 'samples:' , samples ) # \u51c6\u786e\u7387 accuracy = accuracy_score ( y_pred , y_true ) print ( 'accuracy: %.2f ' % accuracy ) # \u7cbe\u5ea6 precision = precision_score ( y_pred , y_true , pos_label = 'spam' ) print ( 'precision: %.2f ' % precision ) # \u53ec\u56de\u7387 recall = recall_score ( y_pred , y_true , pos_label = 'spam' ) print ( 'recall: %.2f ' % recall ) # \u5b58\u50a8\u8bc4\u4f30\u7ed3\u679c eval_result = { 'sample_num' : samples , 'accuracy' : accuracy , 'precision' : precision , 'recall' : recall } pickle . dump ( eval_result , open ( 'data/05-\u6a21\u578b\u8bc4\u4f30\u7ed3\u679c.pkl' , 'wb' ), 3 ) \u7a0b\u5e8f\u7684\u8f93\u51fa\u7ed3\u679c: samples : 12924 accuracy : 0.96 precision : 0.97 recall : 0.98 3. \u6a21\u578b\u9884\u6d4b \u6a21\u578b\u9884\u6d4b\u5c31\u662f\u6211\u4eec\u8f93\u5165\u6587\u672c\u90ae\u4ef6\u5185\u5bb9\uff0c\u7531\u6a21\u578b\u7ed9\u51fa\u6700\u7ec8\u7684\u9884\u6d4b\u7ed3\u679c\uff1aspam \u8868\u793a\u5783\u573e\u90ae\u4ef6\uff0cham \u8868\u793a\u975e\u5783\u573e\u90ae\u4ef6\u3002\u6211\u4eec\u5206\u522b\u4ece\u6d4b\u8bd5\u96c6\u6570\u636e\u4e2d\uff0c\u968f\u610f\u4e24\u5c01\u90ae\u4ef6\uff1a\u5783\u573e\u548c\u975e\u5783\u573e\u90ae\u4ef6\u6765\u9884\u6d4b\u5176\u5206\u7c7b\u3002 def predict ( email ): # \u7279\u5f81\u63d0\u53d6\u5668 vocab = pickle . load ( open ( 'data/03-\u6a21\u578b\u8bad\u7ec3\u7279\u5f81.pkl' , 'rb' )) transfer = CountVectorizer ( max_features = 10000 , vocabulary = vocab ) # \u52a0\u8f7d\u6a21\u578b model = joblib . load ( 'data/04-\u90ae\u4ef6\u5206\u7c7b\u6a21\u578b.pth' ) # \u6570\u636e\u6e05\u6d17 email = clean_data ( email ) # \u7279\u5f81\u63d0\u53d6 email = transfer . transform ([ email ]) . toarray () . tolist () # \u6a21\u578b\u8ba1\u7b97 output = model . predict ( email ) print ( '\u9884\u6d4b\u7ed3\u679c:' , output [ 0 ]) if __name__ == '__main__' : email1 = ''' Received: from coozo.com ([219.133.254.230]) by spam-gw.ccert.edu.cn (MIMEDefang) with ESMTP id j8L2Zoqi028766 for <li@ccert.edu.cn>; Fri, 23 Sep 2005 13:01:45 +0800 (CST) Message-ID: <200509211035.j8L2Zoqi028766@spam-gw.ccert.edu.cn> From: \"you\" <you@coozo.com> Subject: =?gb2312?B?us/X9w==?= To: li@ccert.edu.cn Content-Type: text/plain;charset=\"GB2312\" Content-Transfer-Encoding: 8bit Date: Sun, 23 Oct 2005 23:44:32 +0800 X-Priority: 3 X-Mailer: Microsoft Outlook Express 6.00.2800.1106 \u60a8\u597d\uff01 \u6211\u516c\u53f8\u6709\u591a\u4f59\u7684\u53d1\u7968\u53ef\u4ee5\u5411\u5916\u4ee3\u5f00\uff01\uff08\u56fd\u7a0e\u3001\u5730\u7a0e\u3001\u8fd0\u8f93\u3001\u5e7f\u544a\u3001\u6d77\u5173\u7f34\u6b3e\u4e66\uff09\u3002 \u5982\u679c\u8d35\u516c\u53f8\uff08\u5382\uff09\u6709\u9700\u8981\u8bf7\u6765\u7535\u6d3d\u8c08\u3001\u54a8\u8be2\uff01 \u8054\u7cfb\u7535\u8bdd: 013510251389 \u9648\u5148\u751f \u8c22\u8c22 \u987a\u795d\u5546\u797a! ''' email2 = ''' Received: from web15010.mail.cnb.yahoo.com (web15010.mail.cnb.yahoo.com [202.165.103.67]) by spam-gw.ccert.edu.cn (MIMEDefang) with ESMTP id j8R8H2V8018468 for <hu@ccert.edu.cn>; Thu, 29 Sep 2005 19:39:41 +0800 (CST) Received: (qmail 54688 invoked by uid 60001); Thu, 29 Sep 2005 11:50:48 -0000 DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws; s=s1024; d=yahoo.com.cn; h=Message-ID:Received:Date:From:Subject:To:MIME-Version:Content-Type:Content-Transfer-Encoding; b=bSU/zJOkkJfDLFBbWnWnTUKDZWedZej7CHwk+68TMJOxc5bWNOV3oFm+Sdj7+BguqbdY8hBnj9by0vLAREwvNsRCI/vWqZokpQhqNS620fenBohJKxF1JDhRipTl6dha0/sPi1Z9L+cjbm98QQkoNFkiZSBiuBy63tmjYznR3JE= ; Message-ID: <20050927082809.54686.qmail@web15010.mail.cnb.yahoo.com> Received: from [61.150.43.113] by web15010.mail.cnb.yahoo.com via HTTP; Thu, 29 Sep 2005 19:50:48 CST Date: Thu, 29 Sep 2005 19:50:48 +0800 (CST) From: liang ming <yang@yahoo.com.cn> Subject: =?gb2312?B?UmU6ILOzvNzKscTQxfPT0cDPt62z9tLUx7C1xMrCx+k=?= To: hu@ccert.edu.cn MIME-Version: 1.0 Content-Type: multipart/alternative; boundary=\"0-1710224003-1127809689=:53686\" Content-Transfer-Encoding: 8bit \u6211\u600e\u4e48\u89c9\u5f97\u662f\u4f60\u5728\u7ffb.. \u6807 \u9898: \u5435\u67b6\u65f6\u7537\u670b\u53cb\u8001\u7ffb\u51fa\u4ee5\u524d\u7684\u4e8b\u60c5 \u6211\u89c9\u5f97\u5435\u5b8c\u4e86\u548c\u597d\u4e86\u5c31\u8fc7\u53bb\u4e86\uff0c\u4ed6\u5374\u603b\u662f\u5728\u4e0b\u4e00\u6b21\u5435\u67b6\u7684\u65f6\u5019\u63d0\u8d77\u3002\u662f\u4e0d\u662f\u5fc3\u80f8\u4e0d\u591f\u5bbd \u9614\uff1f\u8001\u8fd9\u6837\u4e0b\u53bb\u4f24\u5fc3\u6b7b\u4e86\u3002\u7ecf\u5e38\u662f\u5435\u5b8c\u4e86\u6211\u54ed\u4ed6\u4e0d\u7406\u6211\uff0c\u540e\u6765\u592a\u665a\u4e86\u4ed6\u5c31\u6402\u7740\u6211\u62cd\u62cd\u6211\u7136 \u540e\u5929\u4eae\u4e86\u6211\u4eec\u90fd\u8981\u53bb\u4e0a\u73ed\u3002\u6628\u5929\u4ed6\u8bf4\u4ed6\u60f3\u8981\u7684\u592a\u591a\u4e86\uff0c\u5f97\u5230\u7684\u592a\u5c11\u4e86\u3002\u6211\u8bf4\u6211\u4ece\u6765\u4e0d\u89c9\u5f97 \u6211\u4ed8\u51fa\u7684\u5c11\uff0c\u4ed6\u5c31\u8d28\u95ee\u6211\u4ed8\u51fa\u4e86\u4ec0\u4e48\u3002\u6211\u4e3a\u4e86\u4ed6\u79bb\u5f00\u4e86\u4ee5\u524d\u7684\u7537\u670b\u53cb\uff0c\u529e\u597d\u4e86\u53bb\u65e5\u672c\u7684\u7b7e \u8bc1\u800c\u6ca1\u53bb\uff0c\u79bb\u5f00\u4e86\u5927\u8fde\u5728\u8fd9\u91cc\u8f9b\u82e6\u7684\u751f\u6d3b\u3002\u8fdc\u79bb\u4e86\u4e00\u4e9b\u670b\u53cb\uff0c\u5de5\u8d44\u6ca1\u600e\u4e48\u6da8\uff0c\u6bcf\u5929\u5fcd\u53d7\u7740 \u4e00\u4e2a\u534a\u5c0f\u65f6\u7684\u516c\u4ea4\u8f66\uff0c\u996d\u8d39\u623f\u79df\u90fd\u662f2\u500d\u800c\u623f\u5b50\u5374\u4e0d\u662f\u7cbe\u88c5\u4fee\u4e5f\u6ca1\u6709\u5bb6\u7535\uff0c\u5fcd\u53d7\u7740\u7535\u68af\u548c \u697c\u4e0b\u6c7d\u8f66\u7684\u566a\u97f3\u3002\u542c\u4ed6\u90a3\u4e48\u8bf4\u771f\u4f24\u5fc3\uff0c\u89c9\u5f97\u81ea\u5df1\u7684\u7231\u5728\u6d88\u51cf\uff0c\u597d\u62c5\u5fc3\u4f1a\u4e0d\u7231\u4e86\u3002 -- ''' predict ( email1 ) predict ( email2 ) \u7a0b\u5e8f\u8f93\u51fa\u7ed3\u679c: \u9884\u6d4b\u7ed3\u679c : spam \u9884\u6d4b\u7ed3\u679c : ham","title":"\u5783\u573e\u90ae\u4ef6\u5206\u7c7b-\u8bad\u7ec3\u8bc4\u4f30"},{"location":"01-%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/02-%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E5%88%86%E7%B1%BB-%E8%AE%AD%E7%BB%83%E8%AF%84%E4%BC%B0/#-","text":"\u6a21\u578b\u6211\u4eec\u9009\u62e9\u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u7b97\u6cd5\u3002","title":"\u5783\u573e\u90ae\u4ef6\u5206\u7c7b-\u8bad\u7ec3\u8bc4\u4f30"},{"location":"01-%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/02-%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E5%88%86%E7%B1%BB-%E8%AE%AD%E7%BB%83%E8%AF%84%E4%BC%B0/#1","text":"\u8bad\u7ec3\u4ee3\u7801\u6bd4\u8f83\u7b80\u5355\uff0c\u4ee3\u7801\u6267\u884c\u7ed3\u675f\u4e4b\u540e\uff0c\u4f1a\u5728 data \u76ee\u5f55\u4e0b\u521b\u5efa\u6a21\u578b\u6587\u4ef6: 04-\u90ae\u4ef6\u5206\u7c7b\u6a21\u578b.pth\u3002 from sklearn.naive_bayes import MultinomialNB import pickle import joblib if __name__ == '__main__' : # \u52a0\u8f7d\u8bad\u7ec3\u6570\u636e train_data = pickle . load ( open ( 'data/03-\u6a21\u578b\u8bad\u7ec3\u6570\u636e.pkl' , 'rb' )) # \u521d\u59cb\u5316\u6a21\u578b model = MultinomialNB () model . fit ( train_data [ 'emails' ], train_data [ 'labels' ]) # \u6a21\u578b\u5b58\u50a8 joblib . dump ( model , 'data/04-\u90ae\u4ef6\u5206\u7c7b\u6a21\u578b.pth' )","title":"1. \u6a21\u578b\u8bad\u7ec3"},{"location":"01-%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/02-%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E5%88%86%E7%B1%BB-%E8%AE%AD%E7%BB%83%E8%AF%84%E4%BC%B0/#2","text":"\u6211\u4eec\u5c06 1\u4e07+ \u6d4b\u8bd5\u96c6\u6570\u636e\u9001\u5165\u6a21\u578b\uff0c\u5206\u522b\u53bb\u8bc4\u4f30\u6a21\u578b\u7684\u51c6\u786e\u7387\u3001\u7cbe\u5ea6\u3001\u53ec\u56de\u7387\u3002 import pickle import pandas as pd import joblib import os import re import zhconv import jieba from sklearn.feature_extraction.text import CountVectorizer from sklearn.metrics import precision_score from sklearn.metrics import recall_score from sklearn.metrics import accuracy_score import jieba.posseg as psg # \u5c06\u5f53\u524d\u76ee\u5f55\u8bbe\u7f6e\u4e3a\u5de5\u4f5c\u76ee\u5f55 os . chdir ( os . path . dirname ( os . path . abspath ( __file__ ))) def clean_data ( email ): # 1. \u53bb\u9664\u975e\u4e2d\u6587\u5b57\u7b26 email = re . sub ( r '[^\\u4e00-\\u9fa5]' , '' , email ) # 2. \u7e41\u4f53\u8f6c\u7b80\u4f53 email = zhconv . convert ( email , 'zh-cn' ) # 3. \u90ae\u4ef6\u8bcd\u6027\u7b5b\u9009 email_pos = psg . cut ( email ) allow_pos = [ 'n' , 'nr' , 'ns' , 'nt' , 'v' , 'a' ] email = [] for word , pos in email_pos : if pos in allow_pos : email . append ( word ) # 4. \u8f6c\u6362\u6210 str \u7c7b\u578b email = ' ' . join ( email ) return email # \u6a21\u578b\u8bc4\u4f30 def evaluate (): # \u52a0\u8f7d\u6570\u636e test_data = pd . read_csv ( 'data/01-\u539f\u59cb\u90ae\u4ef6\u6570\u636e-\u6d4b\u8bd5\u96c6.csv' ) # \u7279\u5f81\u63d0\u53d6\u5668 vocab = pickle . load ( open ( 'data/03-\u6a21\u578b\u8bad\u7ec3\u7279\u5f81.pkl' , 'rb' )) transfer = CountVectorizer ( vocabulary = vocab ) # \u52a0\u8f7d\u6a21\u578b model = joblib . load ( 'data/04-\u90ae\u4ef6\u5206\u7c7b\u6a21\u578b.pth' ) # \u6d4b\u8bd5\u96c6\u8bc4\u4f30 y_pred = [] for email in test_data [ 'emails' ] . to_numpy (): # \u6570\u636e\u6e05\u6d17 email = clean_data ( email ) # \u7279\u5f81\u63d0\u53d6 email = transfer . transform ([ email ]) . toarray () . tolist () # \u6a21\u578b\u8ba1\u7b97 output = model . predict ( email ) # \u5b58\u50a8\u7ed3\u679c y_pred . append ( output [ 0 ]) y_true = test_data [ 'labels' ] . tolist () # \u6837\u672c\u6570\u91cf samples = len ( test_data ) print ( 'samples:' , samples ) # \u51c6\u786e\u7387 accuracy = accuracy_score ( y_pred , y_true ) print ( 'accuracy: %.2f ' % accuracy ) # \u7cbe\u5ea6 precision = precision_score ( y_pred , y_true , pos_label = 'spam' ) print ( 'precision: %.2f ' % precision ) # \u53ec\u56de\u7387 recall = recall_score ( y_pred , y_true , pos_label = 'spam' ) print ( 'recall: %.2f ' % recall ) # \u5b58\u50a8\u8bc4\u4f30\u7ed3\u679c eval_result = { 'sample_num' : samples , 'accuracy' : accuracy , 'precision' : precision , 'recall' : recall } pickle . dump ( eval_result , open ( 'data/05-\u6a21\u578b\u8bc4\u4f30\u7ed3\u679c.pkl' , 'wb' ), 3 ) \u7a0b\u5e8f\u7684\u8f93\u51fa\u7ed3\u679c: samples : 12924 accuracy : 0.96 precision : 0.97 recall : 0.98","title":"2. \u6a21\u578b\u8bc4\u4f30"},{"location":"01-%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/02-%E5%9E%83%E5%9C%BE%E9%82%AE%E4%BB%B6%E5%88%86%E7%B1%BB-%E8%AE%AD%E7%BB%83%E8%AF%84%E4%BC%B0/#3","text":"\u6a21\u578b\u9884\u6d4b\u5c31\u662f\u6211\u4eec\u8f93\u5165\u6587\u672c\u90ae\u4ef6\u5185\u5bb9\uff0c\u7531\u6a21\u578b\u7ed9\u51fa\u6700\u7ec8\u7684\u9884\u6d4b\u7ed3\u679c\uff1aspam \u8868\u793a\u5783\u573e\u90ae\u4ef6\uff0cham \u8868\u793a\u975e\u5783\u573e\u90ae\u4ef6\u3002\u6211\u4eec\u5206\u522b\u4ece\u6d4b\u8bd5\u96c6\u6570\u636e\u4e2d\uff0c\u968f\u610f\u4e24\u5c01\u90ae\u4ef6\uff1a\u5783\u573e\u548c\u975e\u5783\u573e\u90ae\u4ef6\u6765\u9884\u6d4b\u5176\u5206\u7c7b\u3002 def predict ( email ): # \u7279\u5f81\u63d0\u53d6\u5668 vocab = pickle . load ( open ( 'data/03-\u6a21\u578b\u8bad\u7ec3\u7279\u5f81.pkl' , 'rb' )) transfer = CountVectorizer ( max_features = 10000 , vocabulary = vocab ) # \u52a0\u8f7d\u6a21\u578b model = joblib . load ( 'data/04-\u90ae\u4ef6\u5206\u7c7b\u6a21\u578b.pth' ) # \u6570\u636e\u6e05\u6d17 email = clean_data ( email ) # \u7279\u5f81\u63d0\u53d6 email = transfer . transform ([ email ]) . toarray () . tolist () # \u6a21\u578b\u8ba1\u7b97 output = model . predict ( email ) print ( '\u9884\u6d4b\u7ed3\u679c:' , output [ 0 ]) if __name__ == '__main__' : email1 = ''' Received: from coozo.com ([219.133.254.230]) by spam-gw.ccert.edu.cn (MIMEDefang) with ESMTP id j8L2Zoqi028766 for <li@ccert.edu.cn>; Fri, 23 Sep 2005 13:01:45 +0800 (CST) Message-ID: <200509211035.j8L2Zoqi028766@spam-gw.ccert.edu.cn> From: \"you\" <you@coozo.com> Subject: =?gb2312?B?us/X9w==?= To: li@ccert.edu.cn Content-Type: text/plain;charset=\"GB2312\" Content-Transfer-Encoding: 8bit Date: Sun, 23 Oct 2005 23:44:32 +0800 X-Priority: 3 X-Mailer: Microsoft Outlook Express 6.00.2800.1106 \u60a8\u597d\uff01 \u6211\u516c\u53f8\u6709\u591a\u4f59\u7684\u53d1\u7968\u53ef\u4ee5\u5411\u5916\u4ee3\u5f00\uff01\uff08\u56fd\u7a0e\u3001\u5730\u7a0e\u3001\u8fd0\u8f93\u3001\u5e7f\u544a\u3001\u6d77\u5173\u7f34\u6b3e\u4e66\uff09\u3002 \u5982\u679c\u8d35\u516c\u53f8\uff08\u5382\uff09\u6709\u9700\u8981\u8bf7\u6765\u7535\u6d3d\u8c08\u3001\u54a8\u8be2\uff01 \u8054\u7cfb\u7535\u8bdd: 013510251389 \u9648\u5148\u751f \u8c22\u8c22 \u987a\u795d\u5546\u797a! ''' email2 = ''' Received: from web15010.mail.cnb.yahoo.com (web15010.mail.cnb.yahoo.com [202.165.103.67]) by spam-gw.ccert.edu.cn (MIMEDefang) with ESMTP id j8R8H2V8018468 for <hu@ccert.edu.cn>; Thu, 29 Sep 2005 19:39:41 +0800 (CST) Received: (qmail 54688 invoked by uid 60001); Thu, 29 Sep 2005 11:50:48 -0000 DomainKey-Signature: a=rsa-sha1; q=dns; c=nofws; s=s1024; d=yahoo.com.cn; h=Message-ID:Received:Date:From:Subject:To:MIME-Version:Content-Type:Content-Transfer-Encoding; b=bSU/zJOkkJfDLFBbWnWnTUKDZWedZej7CHwk+68TMJOxc5bWNOV3oFm+Sdj7+BguqbdY8hBnj9by0vLAREwvNsRCI/vWqZokpQhqNS620fenBohJKxF1JDhRipTl6dha0/sPi1Z9L+cjbm98QQkoNFkiZSBiuBy63tmjYznR3JE= ; Message-ID: <20050927082809.54686.qmail@web15010.mail.cnb.yahoo.com> Received: from [61.150.43.113] by web15010.mail.cnb.yahoo.com via HTTP; Thu, 29 Sep 2005 19:50:48 CST Date: Thu, 29 Sep 2005 19:50:48 +0800 (CST) From: liang ming <yang@yahoo.com.cn> Subject: =?gb2312?B?UmU6ILOzvNzKscTQxfPT0cDPt62z9tLUx7C1xMrCx+k=?= To: hu@ccert.edu.cn MIME-Version: 1.0 Content-Type: multipart/alternative; boundary=\"0-1710224003-1127809689=:53686\" Content-Transfer-Encoding: 8bit \u6211\u600e\u4e48\u89c9\u5f97\u662f\u4f60\u5728\u7ffb.. \u6807 \u9898: \u5435\u67b6\u65f6\u7537\u670b\u53cb\u8001\u7ffb\u51fa\u4ee5\u524d\u7684\u4e8b\u60c5 \u6211\u89c9\u5f97\u5435\u5b8c\u4e86\u548c\u597d\u4e86\u5c31\u8fc7\u53bb\u4e86\uff0c\u4ed6\u5374\u603b\u662f\u5728\u4e0b\u4e00\u6b21\u5435\u67b6\u7684\u65f6\u5019\u63d0\u8d77\u3002\u662f\u4e0d\u662f\u5fc3\u80f8\u4e0d\u591f\u5bbd \u9614\uff1f\u8001\u8fd9\u6837\u4e0b\u53bb\u4f24\u5fc3\u6b7b\u4e86\u3002\u7ecf\u5e38\u662f\u5435\u5b8c\u4e86\u6211\u54ed\u4ed6\u4e0d\u7406\u6211\uff0c\u540e\u6765\u592a\u665a\u4e86\u4ed6\u5c31\u6402\u7740\u6211\u62cd\u62cd\u6211\u7136 \u540e\u5929\u4eae\u4e86\u6211\u4eec\u90fd\u8981\u53bb\u4e0a\u73ed\u3002\u6628\u5929\u4ed6\u8bf4\u4ed6\u60f3\u8981\u7684\u592a\u591a\u4e86\uff0c\u5f97\u5230\u7684\u592a\u5c11\u4e86\u3002\u6211\u8bf4\u6211\u4ece\u6765\u4e0d\u89c9\u5f97 \u6211\u4ed8\u51fa\u7684\u5c11\uff0c\u4ed6\u5c31\u8d28\u95ee\u6211\u4ed8\u51fa\u4e86\u4ec0\u4e48\u3002\u6211\u4e3a\u4e86\u4ed6\u79bb\u5f00\u4e86\u4ee5\u524d\u7684\u7537\u670b\u53cb\uff0c\u529e\u597d\u4e86\u53bb\u65e5\u672c\u7684\u7b7e \u8bc1\u800c\u6ca1\u53bb\uff0c\u79bb\u5f00\u4e86\u5927\u8fde\u5728\u8fd9\u91cc\u8f9b\u82e6\u7684\u751f\u6d3b\u3002\u8fdc\u79bb\u4e86\u4e00\u4e9b\u670b\u53cb\uff0c\u5de5\u8d44\u6ca1\u600e\u4e48\u6da8\uff0c\u6bcf\u5929\u5fcd\u53d7\u7740 \u4e00\u4e2a\u534a\u5c0f\u65f6\u7684\u516c\u4ea4\u8f66\uff0c\u996d\u8d39\u623f\u79df\u90fd\u662f2\u500d\u800c\u623f\u5b50\u5374\u4e0d\u662f\u7cbe\u88c5\u4fee\u4e5f\u6ca1\u6709\u5bb6\u7535\uff0c\u5fcd\u53d7\u7740\u7535\u68af\u548c \u697c\u4e0b\u6c7d\u8f66\u7684\u566a\u97f3\u3002\u542c\u4ed6\u90a3\u4e48\u8bf4\u771f\u4f24\u5fc3\uff0c\u89c9\u5f97\u81ea\u5df1\u7684\u7231\u5728\u6d88\u51cf\uff0c\u597d\u62c5\u5fc3\u4f1a\u4e0d\u7231\u4e86\u3002 -- ''' predict ( email1 ) predict ( email2 ) \u7a0b\u5e8f\u8f93\u51fa\u7ed3\u679c: \u9884\u6d4b\u7ed3\u679c : spam \u9884\u6d4b\u7ed3\u679c : ham","title":"3. \u6a21\u578b\u9884\u6d4b"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/00-README/","text":"Flask\u670d\u52a1\u63a5\u53e3 \u4e3b\u8981\u5185\u5bb9 \u5728\u8fd9\u4e00\u5c0f\u8282\uff0c\u6211\u4eec\u5c06\u4e86\u89e3\u5982\u4f55\u4f7f\u7528 Flask \u6846\u67b6\u6765\u5b9e\u73b0\u4ece\u6d4f\u89c8\u5668\u8fdc\u7a0b\u8bbf\u95ee\u3001\u4f7f\u7528\u6211\u4eec\u7684\u6a21\u578b\u670d\u52a1\u3002","title":"Flask\u670d\u52a1\u63a5\u53e3"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/00-README/#flask","text":"","title":"Flask\u670d\u52a1\u63a5\u53e3"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/00-README/#_1","text":"\u5728\u8fd9\u4e00\u5c0f\u8282\uff0c\u6211\u4eec\u5c06\u4e86\u89e3\u5982\u4f55\u4f7f\u7528 Flask \u6846\u67b6\u6765\u5b9e\u73b0\u4ece\u6d4f\u89c8\u5668\u8fdc\u7a0b\u8bbf\u95ee\u3001\u4f7f\u7528\u6211\u4eec\u7684\u6a21\u578b\u670d\u52a1\u3002","title":"\u4e3b\u8981\u5185\u5bb9"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/01-Flask-%E4%BD%9C%E7%94%A8%E4%B8%8E%E6%B5%81%E7%A8%8B/","text":"Flask \u4f5c\u7528\u4e0e\u6d41\u7a0b 1.\u4e3a\u4ec0\u4e48\u8981\u5b66\u4e60 Flask\uff1f \u5bf9\u4e8e\u6211\u4eec\u6a21\u578b\u90e8\u7f72\u6765\u8bf4\uff0cFlask \u7684\u4f5c\u7528\u662f\u4ec0\u4e48\u5462\uff1f \u5f53\u6211\u4eec\u8bad\u7ec3\u597d\u4e00\u4e2a\u6a21\u578b\u540e\uff0c\u4e3a\u4e86\u80fd\u591f\u8ba9\u5b83\u80fd\u591f\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\u3002\u6211\u4eec\u4e00\u822c\u4f1a\u5c06\u5176\u90e8\u7f72\u5230\u67d0\u4e00\u53f0\u5b58\u5728\u4e8e\u4e92\u8054\u7f51\u7684\u670d\u52a1\u5668\u4e0a\uff0c\u60f3\u8981\u4f7f\u7528\u8be5\u670d\u52a1\u7684\u4eba\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u6765\u8fdc\u7a0b\u548c\u90e8\u7f72\u5728\u670d\u52a1\u5668\u7684\u6a21\u578b\u8fdb\u884c\u4ea4\u4e92\u4ee5\u83b7\u5f97\u60f3\u8981\u7684\u670d\u52a1\u3002 \u6b64\u65f6\uff0c\u6211\u4eec\u5c31\u9700\u8981\u5728\u670d\u52a1\u7aef\u53bb\u7f16\u5199\u4e00\u4e2a\u7528\u4e8e\u548c\u7528\u6237\u4ea4\u6d41\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c Flask \u5c31\u662f\u4e00\u6b3e\u53ef\u4ee5\u89e3\u51b3\u6b64\u95ee\u9898\u7684 Web \u6846\u67b6\uff0c\u5b83\u5177\u6709\u8f7b\u4fbf\u3001\u7075\u6d3b\u3001\u5b89\u5168\u4e14\u5bb9\u6613\u4e0a\u624b\uff0c\u80fd\u591f\u5728\u77ed\u65f6\u95f4\u5185\u6784\u5efa\u51fa\u4e00\u4e2a Web \u670d\u52a1\u7ad9\u70b9\u3002\u901a\u8fc7 Flask \u7528\u6237\u53ef\u4ee5\u63d0\u4ea4\u6570\u636e\u5230\u670d\u52a1\u7aef\uff0c\u670d\u52a1\u7aef\u53ef\u4ee5\u5904\u7406\u7528\u6237\u8bf7\u6c42\uff0c\u5e76\u8fd4\u56de\u5904\u7406\u7ed3\u679c\u3002 2. \u6d41\u7a0b Flask \u5728\u6574\u4e2a\u4e1a\u52a1\u6d41\u4e2d\u627f\u62c5\u7684\u89d2\u8272\u662f\u4ec0\u4e48\uff1f \u7528\u6237\u7684\u8bf7\u6c42\u548c\u54cd\u5e94\u5230\u5e95\u662f\u4e00\u4e2a\u4ec0\u4e48\u6837\u7684\u6d41\u7a0b\uff1f \u7b80\u8981\u7684\u6d41\u7a0b\u5982\u4e0b: \uff081\uff09\u6d4f\u89c8\u5668\u7ed9\u670d\u52a1\u5668\u76d1\u542c\u5728\u67d0\u4e2a\u7aef\u53e3\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u8bf7\u6c42\uff1b \uff082\uff09\u670d\u52a1\u5668\u7a0b\u5e8f\u63a5\u6536\u5230\u8bf7\u6c42\u4e4b\u540e\uff0c\u5c06\u8bf7\u6c42\u8f6c\u53d1\u7ed9\u5177\u4f53\u5904\u7406\u8be5\u8bf7\u6c42\u7684\u7a0b\u5e8f\uff1b \uff083\uff09\u8be5\u7a0b\u5e8f\u89e3\u6790\u8bf7\u6c42\uff0c\u7136\u540e\u627e\u5230\u8be5\u8bf7\u6c42\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\uff0c\u5e76\u6267\u884c\u8be5\u51fd\u6570\uff1b \uff084\uff09\u5c06\u51fd\u6570\u7684\u8fd4\u56de\u503c\u8fd4\u56de\u7ed9\u670d\u52a1\u5668\u8f6f\u4ef6\uff0c\u670d\u52a1\u5668\u8f6f\u4ef6\u518d\u5c06\u8fd4\u56de\u503c\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668\u3002","title":"Flask \u4f5c\u7528\u4e0e\u6d41\u7a0b"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/01-Flask-%E4%BD%9C%E7%94%A8%E4%B8%8E%E6%B5%81%E7%A8%8B/#flask","text":"","title":"Flask \u4f5c\u7528\u4e0e\u6d41\u7a0b"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/01-Flask-%E4%BD%9C%E7%94%A8%E4%B8%8E%E6%B5%81%E7%A8%8B/#1-flask","text":"\u5bf9\u4e8e\u6211\u4eec\u6a21\u578b\u90e8\u7f72\u6765\u8bf4\uff0cFlask \u7684\u4f5c\u7528\u662f\u4ec0\u4e48\u5462\uff1f \u5f53\u6211\u4eec\u8bad\u7ec3\u597d\u4e00\u4e2a\u6a21\u578b\u540e\uff0c\u4e3a\u4e86\u80fd\u591f\u8ba9\u5b83\u80fd\u591f\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\u3002\u6211\u4eec\u4e00\u822c\u4f1a\u5c06\u5176\u90e8\u7f72\u5230\u67d0\u4e00\u53f0\u5b58\u5728\u4e8e\u4e92\u8054\u7f51\u7684\u670d\u52a1\u5668\u4e0a\uff0c\u60f3\u8981\u4f7f\u7528\u8be5\u670d\u52a1\u7684\u4eba\u53ef\u4ee5\u901a\u8fc7\u7f51\u7edc\u6765\u8fdc\u7a0b\u548c\u90e8\u7f72\u5728\u670d\u52a1\u5668\u7684\u6a21\u578b\u8fdb\u884c\u4ea4\u4e92\u4ee5\u83b7\u5f97\u60f3\u8981\u7684\u670d\u52a1\u3002 \u6b64\u65f6\uff0c\u6211\u4eec\u5c31\u9700\u8981\u5728\u670d\u52a1\u7aef\u53bb\u7f16\u5199\u4e00\u4e2a\u7528\u4e8e\u548c\u7528\u6237\u4ea4\u6d41\u7684\u5e94\u7528\u7a0b\u5e8f\uff0c\u800c Flask \u5c31\u662f\u4e00\u6b3e\u53ef\u4ee5\u89e3\u51b3\u6b64\u95ee\u9898\u7684 Web \u6846\u67b6\uff0c\u5b83\u5177\u6709\u8f7b\u4fbf\u3001\u7075\u6d3b\u3001\u5b89\u5168\u4e14\u5bb9\u6613\u4e0a\u624b\uff0c\u80fd\u591f\u5728\u77ed\u65f6\u95f4\u5185\u6784\u5efa\u51fa\u4e00\u4e2a Web \u670d\u52a1\u7ad9\u70b9\u3002\u901a\u8fc7 Flask \u7528\u6237\u53ef\u4ee5\u63d0\u4ea4\u6570\u636e\u5230\u670d\u52a1\u7aef\uff0c\u670d\u52a1\u7aef\u53ef\u4ee5\u5904\u7406\u7528\u6237\u8bf7\u6c42\uff0c\u5e76\u8fd4\u56de\u5904\u7406\u7ed3\u679c\u3002","title":"1.\u4e3a\u4ec0\u4e48\u8981\u5b66\u4e60 Flask\uff1f"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/01-Flask-%E4%BD%9C%E7%94%A8%E4%B8%8E%E6%B5%81%E7%A8%8B/#2","text":"Flask \u5728\u6574\u4e2a\u4e1a\u52a1\u6d41\u4e2d\u627f\u62c5\u7684\u89d2\u8272\u662f\u4ec0\u4e48\uff1f \u7528\u6237\u7684\u8bf7\u6c42\u548c\u54cd\u5e94\u5230\u5e95\u662f\u4e00\u4e2a\u4ec0\u4e48\u6837\u7684\u6d41\u7a0b\uff1f \u7b80\u8981\u7684\u6d41\u7a0b\u5982\u4e0b: \uff081\uff09\u6d4f\u89c8\u5668\u7ed9\u670d\u52a1\u5668\u76d1\u542c\u5728\u67d0\u4e2a\u7aef\u53e3\u4e0a\u7684\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u8bf7\u6c42\uff1b \uff082\uff09\u670d\u52a1\u5668\u7a0b\u5e8f\u63a5\u6536\u5230\u8bf7\u6c42\u4e4b\u540e\uff0c\u5c06\u8bf7\u6c42\u8f6c\u53d1\u7ed9\u5177\u4f53\u5904\u7406\u8be5\u8bf7\u6c42\u7684\u7a0b\u5e8f\uff1b \uff083\uff09\u8be5\u7a0b\u5e8f\u89e3\u6790\u8bf7\u6c42\uff0c\u7136\u540e\u627e\u5230\u8be5\u8bf7\u6c42\u5bf9\u5e94\u7684\u5904\u7406\u51fd\u6570\uff0c\u5e76\u6267\u884c\u8be5\u51fd\u6570\uff1b \uff084\uff09\u5c06\u51fd\u6570\u7684\u8fd4\u56de\u503c\u8fd4\u56de\u7ed9\u670d\u52a1\u5668\u8f6f\u4ef6\uff0c\u670d\u52a1\u5668\u8f6f\u4ef6\u518d\u5c06\u8fd4\u56de\u503c\u8fd4\u56de\u7ed9\u6d4f\u89c8\u5668\u3002","title":"2. \u6d41\u7a0b"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/02-Flask-Hello-World/","text":"Flask Hello World Flask \u662f\u4f7f\u7528 Python \u8bed\u8a00\u7f16\u5199\u7684\u8f7b\u91cf\u7ea7\u7684 Web \u5e94\u7528\u7a0b\u5e8f\u6846\u67b6\u3002\u4f7f\u7528\u8be5\u6280\u672f\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\u5c01\u88c5\u4e00\u4e2a\u80fd\u591f\u63d0\u4f9b\u9884\u6d4b\u7684\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\uff0c\u5373: \u53ef\u4ee5\u5bf9\u5916\u63d0\u4f9b\u4e00\u4e2a\u670d\u52a1\u63a5\u53e3\u3002 Flask\u4e2d\u6587\u6587\u6863\uff1a https://docs.jinkan.org/docs/flask/ \u5b89\u88c5\u547d\u4ee4\u5982\u4e0b: pip install Flask == 2.1.0 1. Flask Hello World \u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684 Flask \u5e94\u7528\u7a0b\u5e8f: from flask import Flask app = Flask ( __name__ ) @app . route ( '/' , methods = [ 'GET' ]) def index (): return 'Hello World' if __name__ == '__main__' : app . run () \u8fd0\u884c\u8be5\u7a0b\u5e8f\uff0c\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a * Serving Flask app 'app' ( lazy loading ) * Environment : production WARNING : This is a development server . Do not use it in a production deployment . Use a production WSGI server instead . * Debug mode : off * Running on http : // 127.0.0.1 : 5000 ( Press CTRL + C to quit ) \u6211\u4eec\u5728\u6d4f\u89c8\u5668\u8f93\u5165: http://127.0.0.1:5000, \u5f97\u5230\u5982\u4e0b\u663e\u793a: \u8fd9\u4e2a\u7ed3\u679c\u8868\u793a: \u901a\u8fc7 http://127.0.0.1:5000 \u8bbf\u95ee\u4e86\u6211\u4eec\u5b9a\u4e49\u5728\u670d\u52a1\u5668\u7aef\u4e00\u4e2a\u670d\u52a1\u51fd\u6570\uff0c\u5927\u5bb6\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a\u8fdc\u7a0b\u8c03\u7528\u4e86\u4e00\u4e2a Python \u51fd\u6570\uff0c\u5e76\u4e14\u8be5\u51fd\u6570\u8fd4\u56de\u4e86\u51fd\u6570\u7684\u8fd0\u884c\u7ed3\u679c\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8be6\u7ec6\u8bb2\u89e3\u5404\u90e8\u5206\u7684\u542b\u4e49\uff0c\u65b9\u4fbf\u540e\u7eed\u4ee3\u7801\u7684\u7f16\u5199\u3002 2. Flask \u5e94\u7528\u7684\u521b\u5efa app = Flask ( __name__ ) \u4e0a\u8ff0\u4ee3\u7801\u8868\u793a\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a Flask \u5e94\u7528\u5b9e\u4f8b\uff0c\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u6211\u4eec\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u662f\u7531\u8be5\u5b9e\u4f8b\u6765\u5904\u7406\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8c03\u7528\u8be5\u5b9e\u4f8b\u7684 run \u65b9\u6cd5: if __name__ == '__main__' : app . run () run \u65b9\u6cd5\u4f1a\u542f\u52a8\u4e00\u4e2a\u7528\u4e8e\u5f00\u53d1\u6d4b\u8bd5\u7684\u670d\u52a1\u5668\uff0c\u8be5\u670d\u52a1\u5668\u4f1a\u5728\u67d0\u4e2a\u7aef\u53e3\u76d1\u542c\uff0c\u6765\u83b7\u5f97\u5ba2\u6237\u7aef\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42\u3002\u5176\u6d41\u7a0b\u5982\u4e0b\uff1a \u8bf7\u6c42 --> \u6d4b\u8bd5\u670d\u52a1\u5668 --> Flask \u5e94\u7528 \u6ce8\u610f\uff1a\u5728\u5f00\u53d1\u9636\u6bb5\u6211\u4eec\u4f7f\u7528\u8be5\u6d4b\u8bd5\u670d\u52a1\u5668\uff0c\u90e8\u7f72\u65f6\uff0c\u6211\u4eec\u5c06\u4f1a\u4f7f\u7528 Gunicorn \u670d\u52a1\u5668\u3002\u540e\u9762\u6f14\u793a\u90e8\u7f72\u65f6\uff0c\u6211\u4eec\u5c31\u6682\u4e14\u4f7f\u7528\u5f00\u53d1\u670d\u52a1\u5668\u3002 3. Flask \u8bf7\u6c42\u5904\u7406\u51fd\u6570 \u5f53\u6211\u4eec\u7684 Flask \u5e94\u7528\u83b7\u5f97\u4e86\u5ba2\u6237\u7684\u8bf7\u6c42\uff0c\u6b64\u65f6\u5c31\u9700\u8981\u5c06\u8be5\u5f3a\u6c42\u8f6c\u53d1\u7ed9\u67d0\u4e2a\u5177\u4f53\u7684\u4e1a\u52a1\u51fd\u6570\u6765\u5904\u7406\uff0c\u5982\u4f55\u5b9a\u4e49\u4e0d\u540c\u7684\u8bf7\u6c42\u548c\u5177\u4f53\u7684\u4e1a\u52a1\u51fd\u6570\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb\u5462\uff1f @app . route ( '/' , methods = [ 'GET' ]) def index (): return 'Hello World' \u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0cindex \u51fd\u6570\u662f\u6211\u4eec\u5b9a\u4e49\u7684\u5177\u4f53\u4e1a\u52a1\u51fd\u6570\uff0c\u5b83\u7684\u5904\u7406\u7ed3\u679c\u5c31\u662f\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32 \"Hello World\". \u5982\u4f55\u5c06\u67d0\u4e2a\u8bf7\u6c42\u6620\u5c04\u5230\u8be5\u51fd\u6570\u5462\uff1f\u9996\u5148\uff0c\u6211\u4eec\u5f97\u6e05\u695a\uff0c\u4e0d\u540c\u7684\u8bf7\u6c42\u5bf9\u5e94\u7684 url \u662f\u4e0d\u540c\u7684\uff0c\u4f8b\u5982\uff1a \u770b\u65b0\u95fb\u7684\u8bf7\u6c42 \uff1a http : // xxx . xxx . xxx . xxx : 5000 / news \u542c\u97f3\u4e50\u7684\u8bf7\u6c42 \uff1a http : // xxx . xxx . xxx . xxx : 5000 / music \u5f53\u8bf7\u6c42\u7684 url \u662f /news \u65f6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 news \u51fd\u6570\u6765\u5904\u7406\uff0c\u8bf7\u6c42\u7684 url \u662f /music \u65f6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 music \u51fd\u6570\u6765\u5904\u7406\u3002 \u6ce8\u610f: \u6b64\u5904\u7684 URL \u662f\u7531\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684\u3002\u5047\u8bbe\uff0c\u6211\u4eec\u5e0c\u671b\u7528\u6237\u8bbf\u95ee /phone-price \u65f6\uff0c\u5c31\u53ef\u4ee5\u83b7\u5f97\u6a21\u578b\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u548c\u8be5 URL \u5bf9\u5e94\u8d77\u6765\u3002 \u5b9a\u4e49\u8bf7\u6c42 URL \u548c\u5177\u4f53\u4e1a\u52a1\u51fd\u6570\u6620\u5c04\u5173\u7cfb\u5c31\u662f\u4f7f\u7528 app.route \u88c5\u9970\u5668\uff0c\u8be5\u88c5\u9970\u5668\u7b2c\u4e00\u4e2a\u53c2\u6570\u5c31\u662f\u81ea\u5b9a\u4e49\u7684\u8bf7\u6c42 URL\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570 methods \u4e3a\u8bf7\u6c42\u7c7b\u578b\u3002 \u8bf7\u6c42\u7c7b\u578b\u6709\u591a\u79cd\uff0c\u6211\u4eec\u4e3b\u8981\u7528\u5230\u4e86\u4e24\u79cd\u8bf7\u6c42\u7c7b\u578b\uff1aGET\u3001POST\u3002 \uff081\uff09GET \u8bf7\u6c42: \u7528\u4e8e\u53ea\u83b7\u5f97\u6570\u636e\uff0c\u800c\u4e0d\u9700\u8981\u5411\u670d\u52a1\u7aef\u63d0\u4ea4\u4efb\u4f55\u6570\u636e\u3002 \uff082\uff09POST \u8bf7\u6c42: \u7528\u4e8e\u5411\u670d\u52a1\u7aef\u53d1\u9001\u8bf7\u6c42\u6570\u636e\uff0c\u4f8b\u5982\uff1a\u6211\u4eec\u8981\u8fdb\u884c\u5783\u573e\u90ae\u4ef6\u5206\u7c7b\uff0c\u9700\u8981\u5c06\u90ae\u4ef6\u6570\u636e\u6570\u636e\u53d1\u9001\u7ed9\u670d\u52a1\u7aef\uff0c\u6b64\u65f6\u5e94\u8be5\u4f7f\u7528 POST \u65b9\u5f0f\u3002","title":"Flask Hello World"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/02-Flask-Hello-World/#flask-hello-world","text":"Flask \u662f\u4f7f\u7528 Python \u8bed\u8a00\u7f16\u5199\u7684\u8f7b\u91cf\u7ea7\u7684 Web \u5e94\u7528\u7a0b\u5e8f\u6846\u67b6\u3002\u4f7f\u7528\u8be5\u6280\u672f\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8bad\u7ec3\u5f97\u5230\u7684\u6a21\u578b\u5c01\u88c5\u4e00\u4e2a\u80fd\u591f\u63d0\u4f9b\u9884\u6d4b\u7684\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\uff0c\u5373: \u53ef\u4ee5\u5bf9\u5916\u63d0\u4f9b\u4e00\u4e2a\u670d\u52a1\u63a5\u53e3\u3002 Flask\u4e2d\u6587\u6587\u6863\uff1a https://docs.jinkan.org/docs/flask/ \u5b89\u88c5\u547d\u4ee4\u5982\u4e0b: pip install Flask == 2.1.0","title":"Flask Hello World"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/02-Flask-Hello-World/#1-flask-hello-world","text":"\u9996\u5148\uff0c\u521b\u5efa\u4e00\u4e2a\u7b80\u5355\u7684 Flask \u5e94\u7528\u7a0b\u5e8f: from flask import Flask app = Flask ( __name__ ) @app . route ( '/' , methods = [ 'GET' ]) def index (): return 'Hello World' if __name__ == '__main__' : app . run () \u8fd0\u884c\u8be5\u7a0b\u5e8f\uff0c\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a * Serving Flask app 'app' ( lazy loading ) * Environment : production WARNING : This is a development server . Do not use it in a production deployment . Use a production WSGI server instead . * Debug mode : off * Running on http : // 127.0.0.1 : 5000 ( Press CTRL + C to quit ) \u6211\u4eec\u5728\u6d4f\u89c8\u5668\u8f93\u5165: http://127.0.0.1:5000, \u5f97\u5230\u5982\u4e0b\u663e\u793a: \u8fd9\u4e2a\u7ed3\u679c\u8868\u793a: \u901a\u8fc7 http://127.0.0.1:5000 \u8bbf\u95ee\u4e86\u6211\u4eec\u5b9a\u4e49\u5728\u670d\u52a1\u5668\u7aef\u4e00\u4e2a\u670d\u52a1\u51fd\u6570\uff0c\u5927\u5bb6\u53ef\u4ee5\u7406\u89e3\u4e3a\uff1a\u8fdc\u7a0b\u8c03\u7528\u4e86\u4e00\u4e2a Python \u51fd\u6570\uff0c\u5e76\u4e14\u8be5\u51fd\u6570\u8fd4\u56de\u4e86\u51fd\u6570\u7684\u8fd0\u884c\u7ed3\u679c\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8be6\u7ec6\u8bb2\u89e3\u5404\u90e8\u5206\u7684\u542b\u4e49\uff0c\u65b9\u4fbf\u540e\u7eed\u4ee3\u7801\u7684\u7f16\u5199\u3002","title":"1. Flask Hello World"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/02-Flask-Hello-World/#2-flask","text":"app = Flask ( __name__ ) \u4e0a\u8ff0\u4ee3\u7801\u8868\u793a\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a Flask \u5e94\u7528\u5b9e\u4f8b\uff0c\u4e5f\u53ef\u4ee5\u7406\u89e3\u4e3a\u6211\u4eec\u6240\u6709\u7684\u8bf7\u6c42\u90fd\u662f\u7531\u8be5\u5b9e\u4f8b\u6765\u5904\u7406\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8c03\u7528\u8be5\u5b9e\u4f8b\u7684 run \u65b9\u6cd5: if __name__ == '__main__' : app . run () run \u65b9\u6cd5\u4f1a\u542f\u52a8\u4e00\u4e2a\u7528\u4e8e\u5f00\u53d1\u6d4b\u8bd5\u7684\u670d\u52a1\u5668\uff0c\u8be5\u670d\u52a1\u5668\u4f1a\u5728\u67d0\u4e2a\u7aef\u53e3\u76d1\u542c\uff0c\u6765\u83b7\u5f97\u5ba2\u6237\u7aef\u53d1\u9001\u8fc7\u6765\u7684\u8bf7\u6c42\u3002\u5176\u6d41\u7a0b\u5982\u4e0b\uff1a \u8bf7\u6c42 --> \u6d4b\u8bd5\u670d\u52a1\u5668 --> Flask \u5e94\u7528 \u6ce8\u610f\uff1a\u5728\u5f00\u53d1\u9636\u6bb5\u6211\u4eec\u4f7f\u7528\u8be5\u6d4b\u8bd5\u670d\u52a1\u5668\uff0c\u90e8\u7f72\u65f6\uff0c\u6211\u4eec\u5c06\u4f1a\u4f7f\u7528 Gunicorn \u670d\u52a1\u5668\u3002\u540e\u9762\u6f14\u793a\u90e8\u7f72\u65f6\uff0c\u6211\u4eec\u5c31\u6682\u4e14\u4f7f\u7528\u5f00\u53d1\u670d\u52a1\u5668\u3002","title":"2. Flask \u5e94\u7528\u7684\u521b\u5efa"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/02-Flask-Hello-World/#3-flask","text":"\u5f53\u6211\u4eec\u7684 Flask \u5e94\u7528\u83b7\u5f97\u4e86\u5ba2\u6237\u7684\u8bf7\u6c42\uff0c\u6b64\u65f6\u5c31\u9700\u8981\u5c06\u8be5\u5f3a\u6c42\u8f6c\u53d1\u7ed9\u67d0\u4e2a\u5177\u4f53\u7684\u4e1a\u52a1\u51fd\u6570\u6765\u5904\u7406\uff0c\u5982\u4f55\u5b9a\u4e49\u4e0d\u540c\u7684\u8bf7\u6c42\u548c\u5177\u4f53\u7684\u4e1a\u52a1\u51fd\u6570\u4e4b\u95f4\u7684\u6620\u5c04\u5173\u7cfb\u5462\uff1f @app . route ( '/' , methods = [ 'GET' ]) def index (): return 'Hello World' \u4e0a\u8ff0\u4ee3\u7801\u4e2d\uff0cindex \u51fd\u6570\u662f\u6211\u4eec\u5b9a\u4e49\u7684\u5177\u4f53\u4e1a\u52a1\u51fd\u6570\uff0c\u5b83\u7684\u5904\u7406\u7ed3\u679c\u5c31\u662f\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32 \"Hello World\". \u5982\u4f55\u5c06\u67d0\u4e2a\u8bf7\u6c42\u6620\u5c04\u5230\u8be5\u51fd\u6570\u5462\uff1f\u9996\u5148\uff0c\u6211\u4eec\u5f97\u6e05\u695a\uff0c\u4e0d\u540c\u7684\u8bf7\u6c42\u5bf9\u5e94\u7684 url \u662f\u4e0d\u540c\u7684\uff0c\u4f8b\u5982\uff1a \u770b\u65b0\u95fb\u7684\u8bf7\u6c42 \uff1a http : // xxx . xxx . xxx . xxx : 5000 / news \u542c\u97f3\u4e50\u7684\u8bf7\u6c42 \uff1a http : // xxx . xxx . xxx . xxx : 5000 / music \u5f53\u8bf7\u6c42\u7684 url \u662f /news \u65f6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 news \u51fd\u6570\u6765\u5904\u7406\uff0c\u8bf7\u6c42\u7684 url \u662f /music \u65f6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f7f\u7528 music \u51fd\u6570\u6765\u5904\u7406\u3002 \u6ce8\u610f: \u6b64\u5904\u7684 URL \u662f\u7531\u6211\u4eec\u81ea\u5df1\u5b9a\u4e49\u7684\u3002\u5047\u8bbe\uff0c\u6211\u4eec\u5e0c\u671b\u7528\u6237\u8bbf\u95ee /phone-price \u65f6\uff0c\u5c31\u53ef\u4ee5\u83b7\u5f97\u6a21\u578b\u7684\u9884\u6d4b\u7ed3\u679c\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u548c\u8be5 URL \u5bf9\u5e94\u8d77\u6765\u3002 \u5b9a\u4e49\u8bf7\u6c42 URL \u548c\u5177\u4f53\u4e1a\u52a1\u51fd\u6570\u6620\u5c04\u5173\u7cfb\u5c31\u662f\u4f7f\u7528 app.route \u88c5\u9970\u5668\uff0c\u8be5\u88c5\u9970\u5668\u7b2c\u4e00\u4e2a\u53c2\u6570\u5c31\u662f\u81ea\u5b9a\u4e49\u7684\u8bf7\u6c42 URL\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570 methods \u4e3a\u8bf7\u6c42\u7c7b\u578b\u3002 \u8bf7\u6c42\u7c7b\u578b\u6709\u591a\u79cd\uff0c\u6211\u4eec\u4e3b\u8981\u7528\u5230\u4e86\u4e24\u79cd\u8bf7\u6c42\u7c7b\u578b\uff1aGET\u3001POST\u3002 \uff081\uff09GET \u8bf7\u6c42: \u7528\u4e8e\u53ea\u83b7\u5f97\u6570\u636e\uff0c\u800c\u4e0d\u9700\u8981\u5411\u670d\u52a1\u7aef\u63d0\u4ea4\u4efb\u4f55\u6570\u636e\u3002 \uff082\uff09POST \u8bf7\u6c42: \u7528\u4e8e\u5411\u670d\u52a1\u7aef\u53d1\u9001\u8bf7\u6c42\u6570\u636e\uff0c\u4f8b\u5982\uff1a\u6211\u4eec\u8981\u8fdb\u884c\u5783\u573e\u90ae\u4ef6\u5206\u7c7b\uff0c\u9700\u8981\u5c06\u90ae\u4ef6\u6570\u636e\u6570\u636e\u53d1\u9001\u7ed9\u670d\u52a1\u7aef\uff0c\u6b64\u65f6\u5e94\u8be5\u4f7f\u7528 POST \u65b9\u5f0f\u3002","title":"3. Flask \u8bf7\u6c42\u5904\u7406\u51fd\u6570"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Flask-%E8%A1%A8%E5%8D%95%E4%BD%BF%E7%94%A8/","text":"Flask \u8868\u5355\u4f7f\u7528 \u6211\u4eec\u5728\u8fdb\u884c\u6a21\u578b\u90e8\u7f72\u65f6\uff0c\u7ecf\u5e38\u9700\u8981\u7528\u6237\u4f20\u9012\u7ed9\u6211\u4eec\u6570\u636e\uff0c\u4f8b\u5982: \u4e00\u5f20\u56fe\u7247\u3001\u4e00\u5c01\u90ae\u4ef6\u7b49\uff0c\u7136\u540e\u7531\u6211\u4eec\u7684\u90e8\u7f72\u7684\u6a21\u578b\u63a5\u6536\u6570\u636e\uff0c\u5e76\u9884\u6d4b\uff0c\u6700\u540e\u7ed9\u51fa\u54cd\u5e94\u3002\u8868\u5355\u7684\u7528\u9014\u5c31\u662f\u5ba2\u6237\u7528\u4e8e\u63d0\u4ea4\u6570\u636e\u7684\u5185\u5bb9\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u9700\u8981\u5b66\u4e60: \u7f16\u5199\u8868\u5355 \u5904\u7406\u8868\u5355 1. \u7f16\u5199\u8868\u5355 \u5f53\u7528\u6237\u8bbf\u95ee\u4e00\u4e2a\u6307\u5b9a\u7684 URL \u65f6\uff0c\u6211\u4eec\u9700\u8981\u8fd4\u56de\u7ed9\u7528\u6237\u4e00\u4e2a\u8868\u5355\uff0c\u8ba9\u7528\u6237\u5728\u8868\u5355\u4e2d\u586b\u5199\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u5e76\u70b9\u51fb\u67d0\u4e2a\u6309\u94ae\uff0c\u5c06\u6570\u636e\u63d0\u4ea4\u7ed9\u6211\u4eec\u3002 \u521b\u5efa Flask \u9879\u76ee\uff0c\u5e76\u521b\u5efa app.py \u6587\u4ef6\uff0c\u4ee3\u7801\u5185\u5bb9\u5982\u4e0b: \u5728 app.py \u540c\u7ea7\u76ee\u5f55\u4e0b\u521b\u5efa email_submit.html \u6587\u4ef6 app.py \u5185\u5bb9\u5982\u4e0b\uff1a from flask import Flask # \u521d\u59cb\u5316 Flask \u5e94\u7528 app = Flask ( __name__ ) @app . route ( '/email_submit' , methods = [ 'GET' ]) def email_submit (): with open ( 'email_submit.html' , 'rb' ) as file : content = file . read () return content if __name__ == '__main__' : app . run () email_submit.html \u5185\u5bb9\u5982\u4e0b: < ! DOCTYPE html > < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > \u90ae\u4ef6\u5185\u5bb9\u63d0\u4ea4 </ title > </ head > < body > < form action = \"\" method = \"post\" > < textarea name = \"content\" cols = \"40\" , rows = \"10\" ></ textarea > < br /> < input type = \"submit\" value = \"\u63d0\u4ea4\u90ae\u4ef6\" /> </ form > </ body > </ html > \u8fd0\u884c app.py \u6587\u4ef6\uff0c\u5e76\u6253\u5f00\u6d4f\u89c8\u5668\u8f93\u5165: http://127.0.0.1:5000/email_submit, \u663e\u793a\u5185\u5bb9\u5982\u4e0b\u56fe\u6240\u793a: 2. \u5904\u7406\u8868\u5355 \u6211\u4eec\u9996\u5148\u9700\u8981\u63a5\u6536\u5230\u8868\u5355\u7684\u6570\u636e\uff0c\u7136\u540e\u8fdb\u884c\u5904\u7406\uff0c\u5f53\u6211\u4eec\u63a5\u6536\u5230\u8868\u5355\u6570\u636e\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u7ed9\u7528\u6237\u663e\u793a\u5230\u6d4f\u89c8\u5668\u5185\u3002 \u5728 .html \u6587\u4ef6\u5185\uff0c\u4fee\u6539 form \u8868\u5355\u7684 action \u5c5e\u6027\u5982\u4e0b: < form action = \"/email_handle\" method = \"post\" > < textarea name = \"content\" cols = \"40\" , rows = \"10\" ></ textarea > < br /> < input type = \"submit\" value = \"\u63d0\u4ea4\u90ae\u4ef6\" /> </ form > \u5728 app.py \u4e2d\u589e\u52a0\u989d\u5916\u7684\u4e1a\u52a1\u5904\u7406\u51fd\u6570 email_handle, \u4e13\u95e8\u7528\u6765\u63a5\u6536\u8868\u5355\u53d1\u6765\u7684\u90ae\u4ef6\u6570\u636e\u3002 from flask import Flask from flask import request # \u521d\u59cb\u5316 Flask \u5e94\u7528 app = Flask ( __name__ ) @app . route ( '/email_submit' , methods = [ 'GET' ]) def email_submit (): with open ( 'email_submit.html' , 'rb' ) as file : content = file . read () return content @app . route ( '/email_handle' , methods = [ 'POST' ]) def email_handle (): email_data = request . form . get ( 'content' ) print ( email_data ) return 'Received Email Data!' if __name__ == '__main__' : app . run () \u91cd\u65b0\u8fd0\u884c\u7a0b\u5e8f\uff0c\u5728\u6d4f\u89c8\u5668\u8f93\u5165 http://127.0.0.1:5000/email_submit\uff0c\u5e76\u5728\u9875\u9762\u5185\u586b\u5199\u4efb\u610f\u6587\u672c\u5185\u5bb9\uff0c\u5982\u4e0b\u56fe\u6240\u793a: \u70b9\u51fb\u63d0\u4ea4\u90ae\u4ef6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u540e\u53f0\u770b\u5230\u4ee5\u4e0b\u5185\u5bb9\uff1a \u8fd9\u5c31\u8868\u793a\u6211\u4eec\u83b7\u5f97\u4e86\u7528\u6237\u63d0\u4ea4\u7ed9\u6211\u4eec\u7684\u6570\u636e\u5185\u5bb9\u3002 \u6ce8\u610f: \u5ba2\u6237\u5982\u679c\u9700\u8981\u63d0\u4ea4\u6570\u636e\u7ed9\u6211\u4eec\uff0c\u4e00\u822c\u90fd\u662f\u901a\u8fc7\u8868\u5355\u7684\u5f62\u5f0f\u63d0\u4ea4\u3002 3. \u83b7\u5f97\u5176\u4ed6\u5f62\u5f0f\u7684\u6570\u636e \u6211\u4eec\u4e0a\u9762\u7f16\u5199\u4e86\u4e00\u4e2a\u7528\u4e8e\u83b7\u5f97\u4e00\u5927\u4e32\u6587\u672c\u5185\u5bb9\u7684\u8868\u5355\u3002\u5047\u8bbe: \u6211\u4eec\u9700\u8981\u7528\u6237\u63d0\u4ea4\u7ed9\u6211\u4eec\u5f88\u591a\u6570\u636e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7f16\u5199\u5982\u4e0b\u8868\u5355: app.py \u5185\u5bb9: from flask import Flask from flask import request # \u521d\u59cb\u5316 Flask \u5e94\u7528 app = Flask ( __name__ ) @app . route ( '/userinfo_submit' , methods = [ 'GET' ]) def userinfo_submit (): with open ( 'others_submit.html' , 'rb' ) as file : content = file . read () return content @app . route ( '/userinfo_handle' , methods = [ 'POST' ]) def userinfo_handle (): name = request . form . get ( 'name' ) age = request . form . get ( 'age' ) sex = request . form . get ( 'sex' ) print ( '\u59d3\u540d:' , name ) print ( '\u5e74\u9f84:' , age ) print ( '\u6027\u522b:' , sex ) return 'Received Email Data!' if __name__ == '__main__' : app . run () others_submit.html \u5185\u5bb9\u5982\u4e0b: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > \u90ae\u4ef6\u5185\u5bb9\u63d0\u4ea4 </ title > </ head > < body > < form action = \"/userinfo_handle\" method = \"post\" > \u59d3\u540d: < input type = \"text\" name = \"name\" /> < br /> \u5e74\u9f84: < input type = \"text\" name = \"age\" /> < br /> \u7537: < input type = \"radio\" name = \"sex\" value = \"\u7537\" /> \u5973: < input type = \"radio\" name = \"sex\" value = \"\u5973\" /> < br /> < input type = \"submit\" value = \"\u63d0\u4ea4\" /> </ form > </ body > </ html >","title":"Flask \u8868\u5355\u4f7f\u7528"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Flask-%E8%A1%A8%E5%8D%95%E4%BD%BF%E7%94%A8/#flask","text":"\u6211\u4eec\u5728\u8fdb\u884c\u6a21\u578b\u90e8\u7f72\u65f6\uff0c\u7ecf\u5e38\u9700\u8981\u7528\u6237\u4f20\u9012\u7ed9\u6211\u4eec\u6570\u636e\uff0c\u4f8b\u5982: \u4e00\u5f20\u56fe\u7247\u3001\u4e00\u5c01\u90ae\u4ef6\u7b49\uff0c\u7136\u540e\u7531\u6211\u4eec\u7684\u90e8\u7f72\u7684\u6a21\u578b\u63a5\u6536\u6570\u636e\uff0c\u5e76\u9884\u6d4b\uff0c\u6700\u540e\u7ed9\u51fa\u54cd\u5e94\u3002\u8868\u5355\u7684\u7528\u9014\u5c31\u662f\u5ba2\u6237\u7528\u4e8e\u63d0\u4ea4\u6570\u636e\u7684\u5185\u5bb9\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u9700\u8981\u5b66\u4e60: \u7f16\u5199\u8868\u5355 \u5904\u7406\u8868\u5355","title":"Flask \u8868\u5355\u4f7f\u7528"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Flask-%E8%A1%A8%E5%8D%95%E4%BD%BF%E7%94%A8/#1","text":"\u5f53\u7528\u6237\u8bbf\u95ee\u4e00\u4e2a\u6307\u5b9a\u7684 URL \u65f6\uff0c\u6211\u4eec\u9700\u8981\u8fd4\u56de\u7ed9\u7528\u6237\u4e00\u4e2a\u8868\u5355\uff0c\u8ba9\u7528\u6237\u5728\u8868\u5355\u4e2d\u586b\u5199\u76f8\u5173\u7684\u5185\u5bb9\uff0c\u5e76\u70b9\u51fb\u67d0\u4e2a\u6309\u94ae\uff0c\u5c06\u6570\u636e\u63d0\u4ea4\u7ed9\u6211\u4eec\u3002 \u521b\u5efa Flask \u9879\u76ee\uff0c\u5e76\u521b\u5efa app.py \u6587\u4ef6\uff0c\u4ee3\u7801\u5185\u5bb9\u5982\u4e0b: \u5728 app.py \u540c\u7ea7\u76ee\u5f55\u4e0b\u521b\u5efa email_submit.html \u6587\u4ef6 app.py \u5185\u5bb9\u5982\u4e0b\uff1a from flask import Flask # \u521d\u59cb\u5316 Flask \u5e94\u7528 app = Flask ( __name__ ) @app . route ( '/email_submit' , methods = [ 'GET' ]) def email_submit (): with open ( 'email_submit.html' , 'rb' ) as file : content = file . read () return content if __name__ == '__main__' : app . run () email_submit.html \u5185\u5bb9\u5982\u4e0b: < ! DOCTYPE html > < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > \u90ae\u4ef6\u5185\u5bb9\u63d0\u4ea4 </ title > </ head > < body > < form action = \"\" method = \"post\" > < textarea name = \"content\" cols = \"40\" , rows = \"10\" ></ textarea > < br /> < input type = \"submit\" value = \"\u63d0\u4ea4\u90ae\u4ef6\" /> </ form > </ body > </ html > \u8fd0\u884c app.py \u6587\u4ef6\uff0c\u5e76\u6253\u5f00\u6d4f\u89c8\u5668\u8f93\u5165: http://127.0.0.1:5000/email_submit, \u663e\u793a\u5185\u5bb9\u5982\u4e0b\u56fe\u6240\u793a:","title":"1. \u7f16\u5199\u8868\u5355"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Flask-%E8%A1%A8%E5%8D%95%E4%BD%BF%E7%94%A8/#2","text":"\u6211\u4eec\u9996\u5148\u9700\u8981\u63a5\u6536\u5230\u8868\u5355\u7684\u6570\u636e\uff0c\u7136\u540e\u8fdb\u884c\u5904\u7406\uff0c\u5f53\u6211\u4eec\u63a5\u6536\u5230\u8868\u5355\u6570\u636e\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u7ed9\u7528\u6237\u663e\u793a\u5230\u6d4f\u89c8\u5668\u5185\u3002 \u5728 .html \u6587\u4ef6\u5185\uff0c\u4fee\u6539 form \u8868\u5355\u7684 action \u5c5e\u6027\u5982\u4e0b: < form action = \"/email_handle\" method = \"post\" > < textarea name = \"content\" cols = \"40\" , rows = \"10\" ></ textarea > < br /> < input type = \"submit\" value = \"\u63d0\u4ea4\u90ae\u4ef6\" /> </ form > \u5728 app.py \u4e2d\u589e\u52a0\u989d\u5916\u7684\u4e1a\u52a1\u5904\u7406\u51fd\u6570 email_handle, \u4e13\u95e8\u7528\u6765\u63a5\u6536\u8868\u5355\u53d1\u6765\u7684\u90ae\u4ef6\u6570\u636e\u3002 from flask import Flask from flask import request # \u521d\u59cb\u5316 Flask \u5e94\u7528 app = Flask ( __name__ ) @app . route ( '/email_submit' , methods = [ 'GET' ]) def email_submit (): with open ( 'email_submit.html' , 'rb' ) as file : content = file . read () return content @app . route ( '/email_handle' , methods = [ 'POST' ]) def email_handle (): email_data = request . form . get ( 'content' ) print ( email_data ) return 'Received Email Data!' if __name__ == '__main__' : app . run () \u91cd\u65b0\u8fd0\u884c\u7a0b\u5e8f\uff0c\u5728\u6d4f\u89c8\u5668\u8f93\u5165 http://127.0.0.1:5000/email_submit\uff0c\u5e76\u5728\u9875\u9762\u5185\u586b\u5199\u4efb\u610f\u6587\u672c\u5185\u5bb9\uff0c\u5982\u4e0b\u56fe\u6240\u793a: \u70b9\u51fb\u63d0\u4ea4\u90ae\u4ef6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u540e\u53f0\u770b\u5230\u4ee5\u4e0b\u5185\u5bb9\uff1a \u8fd9\u5c31\u8868\u793a\u6211\u4eec\u83b7\u5f97\u4e86\u7528\u6237\u63d0\u4ea4\u7ed9\u6211\u4eec\u7684\u6570\u636e\u5185\u5bb9\u3002 \u6ce8\u610f: \u5ba2\u6237\u5982\u679c\u9700\u8981\u63d0\u4ea4\u6570\u636e\u7ed9\u6211\u4eec\uff0c\u4e00\u822c\u90fd\u662f\u901a\u8fc7\u8868\u5355\u7684\u5f62\u5f0f\u63d0\u4ea4\u3002","title":"2. \u5904\u7406\u8868\u5355"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Flask-%E8%A1%A8%E5%8D%95%E4%BD%BF%E7%94%A8/#3","text":"\u6211\u4eec\u4e0a\u9762\u7f16\u5199\u4e86\u4e00\u4e2a\u7528\u4e8e\u83b7\u5f97\u4e00\u5927\u4e32\u6587\u672c\u5185\u5bb9\u7684\u8868\u5355\u3002\u5047\u8bbe: \u6211\u4eec\u9700\u8981\u7528\u6237\u63d0\u4ea4\u7ed9\u6211\u4eec\u5f88\u591a\u6570\u636e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u7f16\u5199\u5982\u4e0b\u8868\u5355: app.py \u5185\u5bb9: from flask import Flask from flask import request # \u521d\u59cb\u5316 Flask \u5e94\u7528 app = Flask ( __name__ ) @app . route ( '/userinfo_submit' , methods = [ 'GET' ]) def userinfo_submit (): with open ( 'others_submit.html' , 'rb' ) as file : content = file . read () return content @app . route ( '/userinfo_handle' , methods = [ 'POST' ]) def userinfo_handle (): name = request . form . get ( 'name' ) age = request . form . get ( 'age' ) sex = request . form . get ( 'sex' ) print ( '\u59d3\u540d:' , name ) print ( '\u5e74\u9f84:' , age ) print ( '\u6027\u522b:' , sex ) return 'Received Email Data!' if __name__ == '__main__' : app . run () others_submit.html \u5185\u5bb9\u5982\u4e0b: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > \u90ae\u4ef6\u5185\u5bb9\u63d0\u4ea4 </ title > </ head > < body > < form action = \"/userinfo_handle\" method = \"post\" > \u59d3\u540d: < input type = \"text\" name = \"name\" /> < br /> \u5e74\u9f84: < input type = \"text\" name = \"age\" /> < br /> \u7537: < input type = \"radio\" name = \"sex\" value = \"\u7537\" /> \u5973: < input type = \"radio\" name = \"sex\" value = \"\u5973\" /> < br /> < input type = \"submit\" value = \"\u63d0\u4ea4\" /> </ form > </ body > </ html >","title":"3. \u83b7\u5f97\u5176\u4ed6\u5f62\u5f0f\u7684\u6570\u636e"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/04-Flask-%E6%9C%8D%E5%8A%A1%E4%BA%A4%E4%BB%98/","text":"Flask \u670d\u52a1\u4ea4\u4ed8 \u6211\u4eec\u5728\u8fdb\u884c\u6a21\u578b\u90e8\u7f72\u65f6\uff0c\u9996\u5148\u7528\u6237\u4f20\u9012\u7ed9\u6211\u4eec\u6570\u636e\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u662fjson\u683c\u5f0f\u7684\uff0c\u4f8b\u5982: { \"content\" : \"\u90ae\u4ef6\u5185\u5bb9\" } \u7136\u540e\u7531\u6211\u4eec\u7684\u90e8\u7f72\u7684\u6a21\u578b\u63a5\u6536\u6570\u636e\uff0c\u5e76\u9884\u6d4b\uff0c\u6700\u540e\u8fd4\u56de\u4e00\u4e2ajson\u683c\u5f0f\u7684\u8f93\u51fa\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u9700\u8981\u5b66\u4e60: json\u683c\u5f0f\u6570\u636e\u63a5\u6536 json\u683c\u5f0f\u6570\u636e\u8fd4\u56de \u6211\u4eec\u9996\u5148\u9700\u8981\u63a5\u6536\u5230json\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7136\u540e\u8fdb\u884c\u5904\u7406\uff0c\u5f53\u6211\u4eec\u63a5\u6536\u5230\u6570\u636e\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u7ed9\u7528\u6237\u8fd4\u56de\u5bf9\u5e94\u7684json\u683c\u5f0f\u7684\u8f93\u51fa\u3002 \u5728 .html \u6587\u4ef6\u5185\uff0c\u4fee\u6539 form \u8868\u5355\u7684 action \u5c5e\u6027\u5982\u4e0b: < form action = \"/email_handle\" method = \"post\" > < textarea name = \"content\" cols = \"40\" , rows = \"10\" ></ textarea > < br /> < input type = \"submit\" value = \"\u63d0\u4ea4\u90ae\u4ef6\" /> </ form > \u5728 app.py \u4e2d\u589e\u52a0\u989d\u5916\u7684\u4e1a\u52a1\u5904\u7406\u51fd\u6570 email_handle, \u4e13\u95e8\u7528\u6765\u63a5\u6536\u8868\u5355\u53d1\u6765\u7684\u90ae\u4ef6\u6570\u636e\u3002 from flask import Flask , Response , json from flask import request # \u521d\u59cb\u5316 Flask \u5e94\u7528 app = Flask ( __name__ ) @app . route ( '/email_submit' , methods = [ 'GET' ]) def email_submit (): with open ( 'email_submit.html' , 'rb' ) as file : content = file . read () return content @app . route ( '/email_handle' , methods = [ 'POST' ]) def email_handle (): # \u83b7\u53d6json\u683c\u5f0f\u7684\u8f93\u5165 request_json = request . get_json () email_data = request_json [ 'content' ] # \u5b9a\u4e49\u54cd\u5e94\u6570\u636e\u683c\u5f0f respose_data = { 'Status' : 'success' , \"content\" : email_data , } # \u8fd4\u56de\u8bf7\u6c42\u6570\u636e return Response ( status = 200 , response = json . dumps ( respose_data , sort_keys = False )) if __name__ == '__main__' : app . run () \u91cd\u65b0\u8fd0\u884c\u7a0b\u5e8f\uff0c\u4f7f\u7528Postman\u5411 http://127.0.0.1:5000/email_handle \u53d1\u9001\u8bf7\u6c42\uff0c\u5e76\u5728\u8fd4\u56de\u54cd\u5e94\u7ed3\u679c\uff0c \u8bf7\u6c42\u4f53\uff1a { \"content\" : \"\u90ae\u4ef6\u5185\u5bb9\" } \u54cd\u5e94\u4f53\uff1a { \"Status\" : \"success\" , \"content\" : \"\u90ae\u4ef6\u5185\u5bb9\" } \u5982\u4e0b\u56fe\u6240\u793a:","title":"Flask \u670d\u52a1\u4ea4\u4ed8"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/04-Flask-%E6%9C%8D%E5%8A%A1%E4%BA%A4%E4%BB%98/#flask","text":"\u6211\u4eec\u5728\u8fdb\u884c\u6a21\u578b\u90e8\u7f72\u65f6\uff0c\u9996\u5148\u7528\u6237\u4f20\u9012\u7ed9\u6211\u4eec\u6570\u636e\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u662fjson\u683c\u5f0f\u7684\uff0c\u4f8b\u5982: { \"content\" : \"\u90ae\u4ef6\u5185\u5bb9\" } \u7136\u540e\u7531\u6211\u4eec\u7684\u90e8\u7f72\u7684\u6a21\u578b\u63a5\u6536\u6570\u636e\uff0c\u5e76\u9884\u6d4b\uff0c\u6700\u540e\u8fd4\u56de\u4e00\u4e2ajson\u683c\u5f0f\u7684\u8f93\u51fa\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u9700\u8981\u5b66\u4e60: json\u683c\u5f0f\u6570\u636e\u63a5\u6536 json\u683c\u5f0f\u6570\u636e\u8fd4\u56de \u6211\u4eec\u9996\u5148\u9700\u8981\u63a5\u6536\u5230json\u683c\u5f0f\u7684\u6570\u636e\uff0c\u7136\u540e\u8fdb\u884c\u5904\u7406\uff0c\u5f53\u6211\u4eec\u63a5\u6536\u5230\u6570\u636e\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u7ed9\u7528\u6237\u8fd4\u56de\u5bf9\u5e94\u7684json\u683c\u5f0f\u7684\u8f93\u51fa\u3002 \u5728 .html \u6587\u4ef6\u5185\uff0c\u4fee\u6539 form \u8868\u5355\u7684 action \u5c5e\u6027\u5982\u4e0b: < form action = \"/email_handle\" method = \"post\" > < textarea name = \"content\" cols = \"40\" , rows = \"10\" ></ textarea > < br /> < input type = \"submit\" value = \"\u63d0\u4ea4\u90ae\u4ef6\" /> </ form > \u5728 app.py \u4e2d\u589e\u52a0\u989d\u5916\u7684\u4e1a\u52a1\u5904\u7406\u51fd\u6570 email_handle, \u4e13\u95e8\u7528\u6765\u63a5\u6536\u8868\u5355\u53d1\u6765\u7684\u90ae\u4ef6\u6570\u636e\u3002 from flask import Flask , Response , json from flask import request # \u521d\u59cb\u5316 Flask \u5e94\u7528 app = Flask ( __name__ ) @app . route ( '/email_submit' , methods = [ 'GET' ]) def email_submit (): with open ( 'email_submit.html' , 'rb' ) as file : content = file . read () return content @app . route ( '/email_handle' , methods = [ 'POST' ]) def email_handle (): # \u83b7\u53d6json\u683c\u5f0f\u7684\u8f93\u5165 request_json = request . get_json () email_data = request_json [ 'content' ] # \u5b9a\u4e49\u54cd\u5e94\u6570\u636e\u683c\u5f0f respose_data = { 'Status' : 'success' , \"content\" : email_data , } # \u8fd4\u56de\u8bf7\u6c42\u6570\u636e return Response ( status = 200 , response = json . dumps ( respose_data , sort_keys = False )) if __name__ == '__main__' : app . run () \u91cd\u65b0\u8fd0\u884c\u7a0b\u5e8f\uff0c\u4f7f\u7528Postman\u5411 http://127.0.0.1:5000/email_handle \u53d1\u9001\u8bf7\u6c42\uff0c\u5e76\u5728\u8fd4\u56de\u54cd\u5e94\u7ed3\u679c\uff0c \u8bf7\u6c42\u4f53\uff1a { \"content\" : \"\u90ae\u4ef6\u5185\u5bb9\" } \u54cd\u5e94\u4f53\uff1a { \"Status\" : \"success\" , \"content\" : \"\u90ae\u4ef6\u5185\u5bb9\" } \u5982\u4e0b\u56fe\u6240\u793a:","title":"Flask \u670d\u52a1\u4ea4\u4ed8"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/05-FLask-%E6%9C%8D%E5%8A%A1%E5%B0%81%E8%A3%85/","text":"Flask \u670d\u52a1\u5c01\u88c5 \u524d\u9762\u6211\u4eec\u5b66\u4e60\u4e86 Flask \u7684\u57fa\u672c\u4f7f\u7528\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u81ea\u5df1\u8bad\u7ec3\u7684\u300a\u5783\u573e\u90ae\u4ef6\u5206\u7c7b\u5668\u300b\u901a\u8fc7 Flask \u8fdb\u884c\u90e8\u7f72\uff0c\u4f7f\u5f97\u7528\u6237\u80fd\u591f\u901a\u8fc7\u6d4f\u89c8\u5668\u63d0\u4ea4\u90ae\u4ef6\u6570\u636e\uff0c\u6211\u4eec\u7684\u6a21\u578b\u80fd\u591f\u5bf9\u90ae\u4ef6\u8fdb\u884c\u5206\u7c7b\uff0c\u5e76\u8fd4\u56de\u7ed9\u7528\u6237\u7ed3\u679c\u3002 1. \u4e1a\u52a1\u5b9e\u73b0\u4ee3\u7801 from flask import Flask from flask import request from sklearn.feature_extraction.text import CountVectorizer import pickle import re import zhconv import jieba.posseg as psg import joblib app = Flask ( __name__ ) @app . route ( '/email_submit' , methods = [ 'GET' ]) def email_submit (): with open ( 'email_submit.html' , 'rb' ) as file : content = file . read () return content def clean_data ( email ): # 1. \u53bb\u9664\u975e\u4e2d\u6587\u5b57\u7b26 email = re . sub ( r '[^\\u4e00-\\u9fa5]' , '' , email ) # 2. \u7e41\u4f53\u8f6c\u7b80\u4f53 email = zhconv . convert ( email , 'zh-cn' ) # 3. \u90ae\u4ef6\u8bcd\u6027\u7b5b\u9009 email_pos = psg . cut ( email ) allow_pos = [ 'n' , 'nr' , 'ns' , 'nt' , 'v' , 'a' ] email = [] for word , pos in email_pos : if pos in allow_pos : email . append ( word ) # 4. \u8f6c\u6362\u6210 str \u7c7b\u578b email = ' ' . join ( email ) return email @app . route ( '/email_handle' , methods = [ 'POST' ]) def email_handle (): # 0. \u83b7\u5f97\u90ae\u4ef6\u6570\u636e content = request . form . get ( 'content' ) # 1. \u5bf9\u6570\u636e\u8fdb\u884c\u6e05\u7406 content = clean_data ( content ) # 2. \u6570\u636e\u7279\u5f81\u63d0\u53d6 vocab = pickle . load ( open ( '03-\u6a21\u578b\u8bad\u7ec3\u7279\u5f81.pkl' , 'rb' )) transfer = CountVectorizer ( vocabulary = vocab ) content = transfer . transform ([ content ]) # 3. \u6a21\u578b\u52a0\u8f7d model = joblib . load ( '04-\u90ae\u4ef6\u5206\u7c7b\u6a21\u578b.pth' ) output = model . predict ( content ) prediction = output [ 0 ] # 4. \u8fd4\u56de\u9884\u6d4b\u7ed3\u679c return prediction if __name__ == '__main__' : app . run () 2. \u9884\u6d4b\u7ed3\u679c \u5f53\u70b9\u51fb\u63d0\u4ea4\u90ae\u4ef6\u4e4b\u540e\uff0c\u9875\u9762\u663e\u793a\u5185\u5bb9\u5982\u4e0b\uff1a \u867d\u7136\uff0c\u6211\u4eec\u80fd\u591f\u5c06\u6211\u4eec\u7684\u6a21\u578b\u5305\u88c5\u6210\u670d\u52a1\u5668\u63a5\u53e3\u4e86\uff0c\u4f46\u662f\u6709\u4e2a\u4e0d\u8db3\u4e4b\u5904\uff0c\u5f53\u6211\u4eec\u8981\u5c06\u6211\u4eec\u7f16\u5199\u7684\u4ee3\u7801\u90e8\u7f72\u5230\u67d0\u53f0\u673a\u5668\u4e0a\u65f6\uff0c\u4ecd\u7136\u9700\u8981\u91cd\u65b0\u5b89\u88c5\u7a0b\u5e8f\u4f9d\u8d56\u5404\u79cd\u5305\u73af\u5883\uff0c\u975e\u5e38\u7e41\u7410\u3002\u6709\u6ca1\u6709\u4e00\u79cd\u529e\u6cd5\uff0c\u80fd\u628a\u4f9d\u8d56\u73af\u5883\u548c\u7a0b\u5e8f\u6253\u5305\u5230\u4e00\u8d77\uff0c\u7b80\u5316\u90e8\u7f72\u6d41\u7a0b\u5462\uff1f \u6211\u4eec\u63a5\u4e0b\u6765\u53ef\u4ee5\u4f7f\u7528\u5bb9\u5668\u5316\u6280\u672f Docker \u6765\u5b9e\u73b0\u3002","title":"Flask \u670d\u52a1\u5c01\u88c5"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/05-FLask-%E6%9C%8D%E5%8A%A1%E5%B0%81%E8%A3%85/#flask","text":"\u524d\u9762\u6211\u4eec\u5b66\u4e60\u4e86 Flask \u7684\u57fa\u672c\u4f7f\u7528\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u81ea\u5df1\u8bad\u7ec3\u7684\u300a\u5783\u573e\u90ae\u4ef6\u5206\u7c7b\u5668\u300b\u901a\u8fc7 Flask \u8fdb\u884c\u90e8\u7f72\uff0c\u4f7f\u5f97\u7528\u6237\u80fd\u591f\u901a\u8fc7\u6d4f\u89c8\u5668\u63d0\u4ea4\u90ae\u4ef6\u6570\u636e\uff0c\u6211\u4eec\u7684\u6a21\u578b\u80fd\u591f\u5bf9\u90ae\u4ef6\u8fdb\u884c\u5206\u7c7b\uff0c\u5e76\u8fd4\u56de\u7ed9\u7528\u6237\u7ed3\u679c\u3002","title":"Flask \u670d\u52a1\u5c01\u88c5"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/05-FLask-%E6%9C%8D%E5%8A%A1%E5%B0%81%E8%A3%85/#1","text":"from flask import Flask from flask import request from sklearn.feature_extraction.text import CountVectorizer import pickle import re import zhconv import jieba.posseg as psg import joblib app = Flask ( __name__ ) @app . route ( '/email_submit' , methods = [ 'GET' ]) def email_submit (): with open ( 'email_submit.html' , 'rb' ) as file : content = file . read () return content def clean_data ( email ): # 1. \u53bb\u9664\u975e\u4e2d\u6587\u5b57\u7b26 email = re . sub ( r '[^\\u4e00-\\u9fa5]' , '' , email ) # 2. \u7e41\u4f53\u8f6c\u7b80\u4f53 email = zhconv . convert ( email , 'zh-cn' ) # 3. \u90ae\u4ef6\u8bcd\u6027\u7b5b\u9009 email_pos = psg . cut ( email ) allow_pos = [ 'n' , 'nr' , 'ns' , 'nt' , 'v' , 'a' ] email = [] for word , pos in email_pos : if pos in allow_pos : email . append ( word ) # 4. \u8f6c\u6362\u6210 str \u7c7b\u578b email = ' ' . join ( email ) return email @app . route ( '/email_handle' , methods = [ 'POST' ]) def email_handle (): # 0. \u83b7\u5f97\u90ae\u4ef6\u6570\u636e content = request . form . get ( 'content' ) # 1. \u5bf9\u6570\u636e\u8fdb\u884c\u6e05\u7406 content = clean_data ( content ) # 2. \u6570\u636e\u7279\u5f81\u63d0\u53d6 vocab = pickle . load ( open ( '03-\u6a21\u578b\u8bad\u7ec3\u7279\u5f81.pkl' , 'rb' )) transfer = CountVectorizer ( vocabulary = vocab ) content = transfer . transform ([ content ]) # 3. \u6a21\u578b\u52a0\u8f7d model = joblib . load ( '04-\u90ae\u4ef6\u5206\u7c7b\u6a21\u578b.pth' ) output = model . predict ( content ) prediction = output [ 0 ] # 4. \u8fd4\u56de\u9884\u6d4b\u7ed3\u679c return prediction if __name__ == '__main__' : app . run ()","title":"1. \u4e1a\u52a1\u5b9e\u73b0\u4ee3\u7801"},{"location":"02-Flask%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/05-FLask-%E6%9C%8D%E5%8A%A1%E5%B0%81%E8%A3%85/#2","text":"\u5f53\u70b9\u51fb\u63d0\u4ea4\u90ae\u4ef6\u4e4b\u540e\uff0c\u9875\u9762\u663e\u793a\u5185\u5bb9\u5982\u4e0b\uff1a \u867d\u7136\uff0c\u6211\u4eec\u80fd\u591f\u5c06\u6211\u4eec\u7684\u6a21\u578b\u5305\u88c5\u6210\u670d\u52a1\u5668\u63a5\u53e3\u4e86\uff0c\u4f46\u662f\u6709\u4e2a\u4e0d\u8db3\u4e4b\u5904\uff0c\u5f53\u6211\u4eec\u8981\u5c06\u6211\u4eec\u7f16\u5199\u7684\u4ee3\u7801\u90e8\u7f72\u5230\u67d0\u53f0\u673a\u5668\u4e0a\u65f6\uff0c\u4ecd\u7136\u9700\u8981\u91cd\u65b0\u5b89\u88c5\u7a0b\u5e8f\u4f9d\u8d56\u5404\u79cd\u5305\u73af\u5883\uff0c\u975e\u5e38\u7e41\u7410\u3002\u6709\u6ca1\u6709\u4e00\u79cd\u529e\u6cd5\uff0c\u80fd\u628a\u4f9d\u8d56\u73af\u5883\u548c\u7a0b\u5e8f\u6253\u5305\u5230\u4e00\u8d77\uff0c\u7b80\u5316\u90e8\u7f72\u6d41\u7a0b\u5462\uff1f \u6211\u4eec\u63a5\u4e0b\u6765\u53ef\u4ee5\u4f7f\u7528\u5bb9\u5668\u5316\u6280\u672f Docker \u6765\u5b9e\u73b0\u3002","title":"2. \u9884\u6d4b\u7ed3\u679c"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/00-README/","text":"\u5bb9\u5668\u90e8\u7f72 \u4e3b\u8981\u5185\u5bb9 \u5728\u8fd9\u4e00\u5c0f\u8282\uff0c\u6211\u4eec\u4e3b\u8981\u4e86\u89e3\u4e0b Docker \u8fd9\u6b3e\u5de5\u5177\uff0c\u5b83\u53ef\u4ee5\u5c06\u6211\u4eec\u7684\u5c01\u88c5\u7684\u670d\u52a1\u6253\u5305\u6210\u4e00\u4e2a\u955c\u50cf\uff0c\u5b9e\u73b0\u670d\u52a1\u7684\u5bb9\u5668\u5316\uff0c\u65b9\u4fbf\u79fb\u690d\u3001\u4ea4\u4ed8\u3002","title":"\u5bb9\u5668\u90e8\u7f72"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/00-README/#_1","text":"","title":"\u5bb9\u5668\u90e8\u7f72"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/00-README/#_2","text":"\u5728\u8fd9\u4e00\u5c0f\u8282\uff0c\u6211\u4eec\u4e3b\u8981\u4e86\u89e3\u4e0b Docker \u8fd9\u6b3e\u5de5\u5177\uff0c\u5b83\u53ef\u4ee5\u5c06\u6211\u4eec\u7684\u5c01\u88c5\u7684\u670d\u52a1\u6253\u5305\u6210\u4e00\u4e2a\u955c\u50cf\uff0c\u5b9e\u73b0\u670d\u52a1\u7684\u5bb9\u5668\u5316\uff0c\u65b9\u4fbf\u79fb\u690d\u3001\u4ea4\u4ed8\u3002","title":"\u4e3b\u8981\u5185\u5bb9"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/01-Docker-%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85/","text":"Docker \u4ecb\u7ecd\u5b89\u88c5 1.Docker\u7b80\u4ecb \u5b98\u65b9\u5730\u5740\uff1a https://docs.docker.com/ Docker \u662f\u4e00\u4e2a\u57fa\u4e8ego\u8bed\u8a00\u5f00\u53d1\u7684\u5f00\u6e90\u7684\u5e94\u7528\u5bb9\u5668\u5f15\u64ce\uff0c\u8ba9\u5f00\u53d1\u8005\u53ef\u4ee5\u6253\u5305\u4ed6\u4eec\u7684\u5e94\u7528\u4ee5\u53ca\u4f9d\u8d56\u5305\u5230\u4e00\u4e2a\u53ef\u79fb\u690d\u7684\u5bb9\u5668\u4e2d\uff0c\u7136\u540e\u53d1\u5e03\u5230\u4efb\u4f55\u6d41\u884c\u7684 Linux \u6216\u8005 Windows\u673a\u5668\u4e0a\uff0c\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u865a\u62df\u5316\u3002 Docker \u662f\u4e00\u4e2a\u7528\u4e8e\u5f00\u53d1\u3001\u4f20\u9001\u548c\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u653e\u5e73\u53f0\u3002Docker \u4f7f\u60a8\u80fd\u591f\u5c06\u5e94\u7528\u7a0b\u5e8f\u4e0e\u57fa\u7840\u8bbe\u65bd\u5206\u5f00\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u5feb\u901f\u4ea4\u4ed8\u8f6f\u4ef6\u3002\u4f7f\u7528 Docker\uff0c\u60a8\u53ef\u4ee5\u50cf\u7ba1\u7406\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\u7ba1\u7406\u57fa\u7840\u8bbe\u65bd\u3002\u901a\u8fc7\u5229\u7528 Docker \u7684\u5feb\u901f\u4ea4\u4ed8\u3001\u6d4b\u8bd5\u548c\u90e8\u7f72\u4ee3\u7801\u7684\u65b9\u6cd5\uff0c\u60a8\u53ef\u4ee5\u663e\u7740\u51cf\u5c11\u7f16\u5199\u4ee3\u7801\u548c\u5728\u751f\u4ea7\u4e2d\u8fd0\u884c\u4ee3\u7801\u4e4b\u95f4\u7684\u5ef6\u8fdf\u3002Docker(opens new window)\u662f\u4e2a\u5212\u65f6\u4ee3\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u5b83\u5f7b\u5e95\u91ca\u653e\u4e86\u8ba1\u7b97\u865a\u62df\u5316\u7684\u5a01\u529b\uff0c\u6781\u5927\u63d0\u9ad8\u4e86\u5e94\u7528\u7684\u7ef4\u62a4\u6548\u7387\uff0c\u964d\u4f4e\u4e86\u4e91\u8ba1\u7b97\u5e94\u7528\u5f00\u53d1\u7684\u6210\u672c\uff01\u4f7f\u7528 Docker\uff0c\u53ef\u4ee5\u8ba9\u5e94\u7528\u7684\u90e8\u7f72\u3001\u6d4b\u8bd5\u548c\u5206\u53d1\u90fd\u53d8\u5f97\u524d\u6240\u672a\u6709\u7684\u9ad8\u6548\u548c\u8f7b\u677e\uff01 \u65e0\u8bba\u662f\u5e94\u7528\u5f00\u53d1\u8005\u3001\u8fd0\u7ef4\u4eba\u5458\u3001\u8fd8\u662f\u5176\u4ed6\u4fe1\u606f\u6280\u672f\u4ece\u4e1a\u4eba\u5458\uff0c\u90fd\u6709\u5fc5\u8981\u8ba4\u8bc6\u548c\u638c\u63e1 Docker\uff0c\u8282\u7ea6\u6709\u9650\u7684\u751f\u547d\u3002 2.Docker\u7684\u4e3b\u8981\u7279\u70b9 \u8f7b\u91cf\u5316 \uff1aDocker \u5bb9\u5668\u4f7f\u7528\u7684\u8d44\u6e90\u975e\u5e38\u5c11\uff0c\u76f8\u6bd4\u865a\u62df\u673a\u6280\u672f\uff0c\u4e00\u4e2a\u5b8c\u6574\u7684 Docker \u955c\u50cf\u901a\u5e38\u53ea\u6709\u51e0\u5341 MB\uff0c\u542f\u52a8\u51e0\u4e4e\u662f\u7acb\u5373\u7684\u3002 \u6807\u51c6\u5316 \uff1aDocker \u5bf9\u5e94\u7528\u53ca\u5176\u4f9d\u8d56\u8fdb\u884c\u6807\u51c6\u5316\u6253\u5305\uff0c\u89e3\u51b3\u4e86\u201c\u5728\u6211\u673a\u5668\u4e0a\u53ef\u4ee5\u8fd0\u884c\uff0c\u5728\u4f60\u673a\u5668\u4e0a\u5c31\u4e0d\u884c\u201d\u7684\u95ee\u9898\u3002 \u53ef\u79fb\u690d\u6027 \uff1a\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u5e73\u53f0\u548c\u4e0d\u540c\u7684\u73af\u5883\u4e2d\u8fd0\u884c\uff0c\u4f8b\u5982\u5f00\u53d1\u73af\u5883\u3001\u6d4b\u8bd5\u73af\u5883\u548c\u751f\u4ea7\u73af\u5883\u3002 \u7248\u672c\u7ba1\u7406\u548c\u7ec4\u4ef6\u91cd\u7528 \uff1aDocker \u53ef\u4ee5\u8fdb\u884c\u7248\u672c\u7ba1\u7406\u3001\u7ec4\u4ef6\u91cd\u7528\u3001\u5feb\u901f\u90e8\u7f72\u7b49\u3002 \u9694\u79bb\u6027 \uff1aDocker \u80fd\u591f\u63d0\u4f9b\u72ec\u7acb\u7684\u8fd0\u884c\u73af\u5883\uff0c\u5e94\u7528\u7a0b\u5e8f\u5728 Docker \u5bb9\u5668\u7684\u8fd0\u884c\u548c\u5916\u90e8\u4e16\u754c\u8fdb\u884c\u9694\u79bb\u3002 3.\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528Docker\uff1f \u73af\u5883\u4e00\u81f4\u6027 \uff1a\u5728\u5f00\u53d1\u3001\u6d4b\u8bd5\u548c\u751f\u4ea7\u73af\u5883\u4e4b\u95f4\u5efa\u7acb\u4e00\u81f4\u6027\uff0c\u6d88\u9664\u4e86\u201c\u5728\u6211\u7535\u8111\u4e0a\u8fd0\u884c\u5f97\u597d\u597d\u7684\u201d\u8fd9\u79cd\u60c5\u51b5\u3002 \u4fbf\u4e8e\u6301\u7eed\u96c6\u6210\u548c\u6301\u7eed\u90e8\u7f72 \uff1aDocker\u80fd\u591f\u4ee5\u6700\u5c0f\u7684\u4ee3\u4ef7\u5feb\u901f\u5730\u542f\u52a8\u548c\u5173\u95ed\uff0c\u8fd9\u8ba9\u6301\u7eed\u96c6\u6210\u548c\u6301\u7eed\u90e8\u7f72\u53d8\u5f97\u975e\u5e38\u7b80\u5355\u3002 \u9694\u79bb\u6027\u548c\u5b89\u5168\u6027 \uff1aDocker\u5bb9\u5668\u4e4b\u95f4\u5f7c\u6b64\u9694\u79bb\uff0c\u4e00\u4e2a\u5bb9\u5668\u7684\u5d29\u6e83\u4e0d\u4f1a\u5f71\u54cd\u5230\u5176\u4ed6\u7684\u5bb9\u5668\uff0c\u63d0\u4f9b\u4e86\u989d\u5916\u7684\u5c42\u6b21\u7684\u5b89\u5168\u6027\u3002 \u5fae\u670d\u52a1\u67b6\u6784 \uff1aDocker\u975e\u5e38\u9002\u5408\u5fae\u670d\u52a1\u67b6\u6784\u3002\u6bcf\u4e2a\u5fae\u670d\u52a1\u53ef\u4ee5\u8fd0\u884c\u5728\u81ea\u5df1\u7684\u5bb9\u5668\u4e2d\uff0c\u6bcf\u4e2a\u5bb9\u5668\u4e4b\u95f4\u662f\u76f8\u4e92\u9694\u79bb\u7684\uff0c\u6709\u81ea\u5df1\u72ec\u7acb\u7684\u8fd0\u884c\u73af\u5883\u3002 \u8d44\u6e90\u5229\u7528\u7387\u9ad8 \uff1aDocker\u5bb9\u5668\u5171\u4eab\u4e3b\u673a\u7684\u5185\u6838\uff0c\u4e0d\u9700\u8981\u50cf\u865a\u62df\u673a\u90a3\u6837\u4e3a\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u4e00\u4e2a\u5b8c\u6574\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u8d44\u6e90\u5360\u7528\u66f4\u5c11\uff0c\u542f\u52a8\u66f4\u5feb\u3002 \u56e0\u6b64\uff0cDocker \u5728\u8f6f\u4ef6\u5f00\u53d1\u3001\u6d4b\u8bd5\u548c\u8fd0\u7ef4\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\u3002 4.Docker\u6838\u5fc3\u6982\u5ff5 Docker\u4e09\u5927\u6838\u5fc3\u6982\u5ff5\uff1a\u955c\u50cf Image\u3001\u5bb9\u5668 Container\u3001\u4ed3\u5e93 Repository \uff081\uff09\u955c\u50cf\uff08Image\uff09 Docker \u955c\u50cf\uff08Image\uff09\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f Docker \u5bb9\u5668\u7684\u53ea\u8bfb\u6a21\u677f\u3002Docker \u955c\u50cf\u662f\u7528\u4e8e\u521b\u5efa Docker \u5bb9\u5668\u7684\u57fa\u7840\uff0c\u4e00\u4e2a\u955c\u50cf\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a\u5bb9\u5668\u3002 \u955c\u50cf\u5305\u542b\u4e86\u8fd0\u884c\u5bb9\u5668\u6240\u9700\u7684\u6240\u6709\u5185\u5bb9\uff0c\u5305\u62ec\u4ee3\u7801\u3001\u8fd0\u884c\u65f6\u3001\u5e93\u3001\u73af\u5883\u53d8\u91cf\u548c\u914d\u7f6e\u6587\u4ef6\u7b49\u3002Docker \u955c\u50cf\u662f\u7531\u6587\u4ef6\u7cfb\u7edf\u53e0\u52a0\u800c\u6210\uff0c\u6bcf\u4e00\u5c42\u90fd\u4ee3\u8868 Dockerfile \u4e2d\u7684\u4e00\u6761\u6307\u4ee4\uff0c\u5c42\u4e0e\u5c42\u4e4b\u95f4\u662f\u4e92\u76f8\u4f9d\u8d56\u7684\u3002 \uff082\uff09\u5bb9\u5668\uff08Container\uff09 Docker \u5bb9\u5668\uff08Container\uff09\u662f Docker \u955c\u50cf\uff08Image\uff09\u8fd0\u884c\u65f6\u7684\u5b9e\u4f53\u3002\u5bb9\u5668\u53ef\u4ee5\u88ab\u521b\u5efa\u3001\u542f\u52a8\u3001\u505c\u6b62\u3001\u5220\u9664\u3001\u6682\u505c\u7b49\u3002\u6bcf\u4e2a\u5bb9\u5668\u4e4b\u95f4\u662f\u76f8\u4e92\u9694\u79bb\u7684\u3001\u4fdd\u62a4\u7684\uff0c\u6bcf\u4e2a\u5bb9\u5668\u90fd\u6709\u81ea\u5df1\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u6bcf\u4e2a\u5bb9\u5668\u4e4b\u95f4\u8fd0\u884c\u7684\u8fdb\u7a0b\u90fd\u662f\u76f8\u4e92\u9694\u79bb\u7684\u3002 \u5bb9\u5668\u7684\u5b9a\u4e49\u548c\u955c\u50cf\u51e0\u4e4e\u4e00\u6837\uff0c\u4e5f\u662f\u4e00\u7cfb\u5217\u7684\u5c42\u7684\u96c6\u5408\uff0c\u4e0d\u540c\u7684\u662f\u5bb9\u5668\u7684\u6700\u4e0a\u9762\u90a3\u4e00\u5c42\u662f\u53ef\u8bfb\u53ef\u5199\u7684\uff0c\u800c\u955c\u50cf\u7684\u6700\u4e0a\u5c42\u662f\u53ea\u8bfb\u7684\u3002 \uff083\uff09\u4ed3\u5e93\uff08Repository\uff09 Docker \u4ed3\u5e93\uff08Repository\uff09\u662f\u7528\u6765\u4fdd\u5b58\u955c\u50cf\u7684\u5730\u65b9\u3002Docker \u4ed3\u5e93\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4ee3\u7801\u63a7\u5236\u4e2d\u7684\u4ee3\u7801\u4ed3\u5e93\u4e00\u6837\u3002Docker \u7528\u6237\u53ef\u4ee5\u5728\u4ed3\u5e93\u4e2d\u521b\u5efa\u4e00\u4e2a\u8d26\u6237\uff0c\u5b58\u50a8\u548c\u5206\u4eab\u81ea\u5df1\u7684\u955c\u50cf\u3002\u4e5f\u53ef\u4ee5\u4ece Docker \u4ed3\u5e93\u4e2d\u4e0b\u8f7d\u522b\u4eba\u5206\u4eab\u7684\u955c\u50cf\u3002 Docker \u4ed3\u5e93\u5206\u4e3a \u516c\u5f00 \u548c \u79c1\u6709 \u4e24\u79cd\u5f62\u5f0f\u3002 \u516c\u5f00\u7684 Docker \u4ed3\u5e93\u662f Docker \u516c\u53f8\u63d0\u4f9b\u7684\uff0c\u53ef\u4ee5\u88ab\u6240\u6709\u7528\u6237\u4f7f\u7528\u3002 DockerHub \u5c31\u662f\u6700\u77e5\u540d\u7684\u516c\u5f00 Docker \u4ed3\u5e93\u3002 \u79c1\u6709\u7684 Docker \u4ed3\u5e93\u53ef\u4ee5\u5728\u672c\u5730\u90e8\u7f72\uff0c\u53ea\u80fd\u88ab\u5185\u90e8\u7528\u6237\u4f7f\u7528\u3002 \u603b\u7ed3\u6765\u8bf4\uff0cDocker \u7684\u5de5\u4f5c\u6d41\u7a0b\u662f\uff0c\u9996\u5148\u4ece Docker \u4ed3\u5e93\u4e2d\u83b7\u53d6 Docker \u955c\u50cf\uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u955c\u50cf\u521b\u5efa Docker \u5bb9\u5668\uff0c\u6700\u540e\u5bf9\u5bb9\u5668\u8fdb\u884c\u64cd\u4f5c\uff08\u542f\u52a8\u3001\u505c\u6b62\u7b49\uff09\u3002 5.Docker\u7684\u6838\u5fc3\u67b6\u6784 \u5728 Docker \u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u90e8\u5206\u7ec4\u6210\uff1a Docker \u5ba2\u6237\u7aef\uff0c\u8d1f\u8d23\u4e0e Docker \u5b88\u62a4\u8fdb\u884c\u901a\u4fe1\uff1b Docker \u5b88\u62a4\u8fdb\u7a0b\uff0c\u8d1f\u8d23\u7ba1\u7406 Docker \u955c\u50cf\u548c Docker \u5bb9\u5668\uff1b Docker \u955c\u50cf\uff0c\u8d1f\u8d23\u4ea7\u751f Docker \u5bb9\u5668\u5b9e\u4f8b\uff1b Docker \u5bb9\u5668\uff0c\u5305\u542b\u4e86\u5e94\u7528\u7a0b\u5e8f\u548c\u5176\u6240\u4f9d\u8d56\u73af\u5883\u3002 Docker Hub\uff0c\u5df2\u7ecf\u5236\u4f5c\u597d\u4e86\u5f88\u591a\u955c\u50cf \u94fe\u63a5\uff1ahttps://hub.docker.com/ 6.Centos Docker \u5b89\u88c5 \uff081\uff09Docker\u81ea\u52a8\u5316\u5b89\u88c5 \u5b98\u65b9\u7684\u4e00\u952e\u5b89\u88c5\u65b9\u5f0f\uff1a curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun \u56fd\u5185daocloud\u4e00\u952e\u5b89\u88c5\u547d\u4ee4\uff1a curl -sSL https://get.daocloud.io/docker | sh \u6267\u884c\u4e0a\u8ff0\u4efb\u4e00\u6761\u547d\u4ee4\uff0c\u8010\u5fc3\u7b49\u5f85\u5373\u53ef\u5b8c\u6210Docker\u7684\u5b89\u88c5\u3002 \uff082\uff09Docker\u624b\u52a8\u5b89\u88c5 # \u5b89\u88c5\u4f9d\u8d56\u5de5\u5177 # yum-utils\u63d0\u4f9byum-config-manager # device mapper\u5b58\u50a8\u9a71\u52a8\u7a0b\u5e8f\u9700\u8981device-mapper-persistent-data\u548clvm2\u3002 sudo yum install - y yum - utils device - mapper - persistent - data lvm2 # \u914d\u7f6e\u955c\u50cf\u6e90\uff0c \u6211\u4eec\u4f7f\u7528\u7684\u662f\u963f\u91cc\u4e91\u7684\u6e90 yum - config - manager -- add - repo http : // mirrors . aliyun . com / docker - ce / linux / centos / docker - ce . repo yum makecache fast # \u5b89\u88c5 Docker yum install docker - ce docker - ce - cli containerd . io \u5b89\u88c5\u547d\u4ee4\u6267\u884c\u6210\u529f\u4e4b\u540e\uff0c\u4f7f\u7528\u4e0b\u9762\u547d\u4ee4\u6765\u7ba1\u7406Docker \u5b88\u62a4\u8fdb\u7a0b\uff1a # \u67e5\u770b docker \u7248\u672c docker version # \u542f\u52a8 docker \u670d\u52a1 systemctl start docker # \u5173\u95ed docker \u670d\u52a1 systemctl stop docker # \u91cd\u542f docker \u670d\u52a1 systemctl restart docker # \u67e5\u770b docker \u72b6\u6001 systemctl status docker # \u8bbe\u7f6e\u5f00\u673a\u542f\u52a8 systemctl enable docker","title":"Docker \u4ecb\u7ecd\u5b89\u88c5"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/01-Docker-%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85/#docker","text":"","title":"Docker \u4ecb\u7ecd\u5b89\u88c5"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/01-Docker-%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85/#1docker","text":"\u5b98\u65b9\u5730\u5740\uff1a https://docs.docker.com/ Docker \u662f\u4e00\u4e2a\u57fa\u4e8ego\u8bed\u8a00\u5f00\u53d1\u7684\u5f00\u6e90\u7684\u5e94\u7528\u5bb9\u5668\u5f15\u64ce\uff0c\u8ba9\u5f00\u53d1\u8005\u53ef\u4ee5\u6253\u5305\u4ed6\u4eec\u7684\u5e94\u7528\u4ee5\u53ca\u4f9d\u8d56\u5305\u5230\u4e00\u4e2a\u53ef\u79fb\u690d\u7684\u5bb9\u5668\u4e2d\uff0c\u7136\u540e\u53d1\u5e03\u5230\u4efb\u4f55\u6d41\u884c\u7684 Linux \u6216\u8005 Windows\u673a\u5668\u4e0a\uff0c\u4e5f\u53ef\u4ee5\u5b9e\u73b0\u865a\u62df\u5316\u3002 Docker \u662f\u4e00\u4e2a\u7528\u4e8e\u5f00\u53d1\u3001\u4f20\u9001\u548c\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u7684\u5f00\u653e\u5e73\u53f0\u3002Docker \u4f7f\u60a8\u80fd\u591f\u5c06\u5e94\u7528\u7a0b\u5e8f\u4e0e\u57fa\u7840\u8bbe\u65bd\u5206\u5f00\uff0c\u4ee5\u4fbf\u60a8\u53ef\u4ee5\u5feb\u901f\u4ea4\u4ed8\u8f6f\u4ef6\u3002\u4f7f\u7528 Docker\uff0c\u60a8\u53ef\u4ee5\u50cf\u7ba1\u7406\u5e94\u7528\u7a0b\u5e8f\u4e00\u6837\u7ba1\u7406\u57fa\u7840\u8bbe\u65bd\u3002\u901a\u8fc7\u5229\u7528 Docker \u7684\u5feb\u901f\u4ea4\u4ed8\u3001\u6d4b\u8bd5\u548c\u90e8\u7f72\u4ee3\u7801\u7684\u65b9\u6cd5\uff0c\u60a8\u53ef\u4ee5\u663e\u7740\u51cf\u5c11\u7f16\u5199\u4ee3\u7801\u548c\u5728\u751f\u4ea7\u4e2d\u8fd0\u884c\u4ee3\u7801\u4e4b\u95f4\u7684\u5ef6\u8fdf\u3002Docker(opens new window)\u662f\u4e2a\u5212\u65f6\u4ee3\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u5b83\u5f7b\u5e95\u91ca\u653e\u4e86\u8ba1\u7b97\u865a\u62df\u5316\u7684\u5a01\u529b\uff0c\u6781\u5927\u63d0\u9ad8\u4e86\u5e94\u7528\u7684\u7ef4\u62a4\u6548\u7387\uff0c\u964d\u4f4e\u4e86\u4e91\u8ba1\u7b97\u5e94\u7528\u5f00\u53d1\u7684\u6210\u672c\uff01\u4f7f\u7528 Docker\uff0c\u53ef\u4ee5\u8ba9\u5e94\u7528\u7684\u90e8\u7f72\u3001\u6d4b\u8bd5\u548c\u5206\u53d1\u90fd\u53d8\u5f97\u524d\u6240\u672a\u6709\u7684\u9ad8\u6548\u548c\u8f7b\u677e\uff01 \u65e0\u8bba\u662f\u5e94\u7528\u5f00\u53d1\u8005\u3001\u8fd0\u7ef4\u4eba\u5458\u3001\u8fd8\u662f\u5176\u4ed6\u4fe1\u606f\u6280\u672f\u4ece\u4e1a\u4eba\u5458\uff0c\u90fd\u6709\u5fc5\u8981\u8ba4\u8bc6\u548c\u638c\u63e1 Docker\uff0c\u8282\u7ea6\u6709\u9650\u7684\u751f\u547d\u3002","title":"1.Docker\u7b80\u4ecb"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/01-Docker-%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85/#2docker","text":"\u8f7b\u91cf\u5316 \uff1aDocker \u5bb9\u5668\u4f7f\u7528\u7684\u8d44\u6e90\u975e\u5e38\u5c11\uff0c\u76f8\u6bd4\u865a\u62df\u673a\u6280\u672f\uff0c\u4e00\u4e2a\u5b8c\u6574\u7684 Docker \u955c\u50cf\u901a\u5e38\u53ea\u6709\u51e0\u5341 MB\uff0c\u542f\u52a8\u51e0\u4e4e\u662f\u7acb\u5373\u7684\u3002 \u6807\u51c6\u5316 \uff1aDocker \u5bf9\u5e94\u7528\u53ca\u5176\u4f9d\u8d56\u8fdb\u884c\u6807\u51c6\u5316\u6253\u5305\uff0c\u89e3\u51b3\u4e86\u201c\u5728\u6211\u673a\u5668\u4e0a\u53ef\u4ee5\u8fd0\u884c\uff0c\u5728\u4f60\u673a\u5668\u4e0a\u5c31\u4e0d\u884c\u201d\u7684\u95ee\u9898\u3002 \u53ef\u79fb\u690d\u6027 \uff1a\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u5e73\u53f0\u548c\u4e0d\u540c\u7684\u73af\u5883\u4e2d\u8fd0\u884c\uff0c\u4f8b\u5982\u5f00\u53d1\u73af\u5883\u3001\u6d4b\u8bd5\u73af\u5883\u548c\u751f\u4ea7\u73af\u5883\u3002 \u7248\u672c\u7ba1\u7406\u548c\u7ec4\u4ef6\u91cd\u7528 \uff1aDocker \u53ef\u4ee5\u8fdb\u884c\u7248\u672c\u7ba1\u7406\u3001\u7ec4\u4ef6\u91cd\u7528\u3001\u5feb\u901f\u90e8\u7f72\u7b49\u3002 \u9694\u79bb\u6027 \uff1aDocker \u80fd\u591f\u63d0\u4f9b\u72ec\u7acb\u7684\u8fd0\u884c\u73af\u5883\uff0c\u5e94\u7528\u7a0b\u5e8f\u5728 Docker \u5bb9\u5668\u7684\u8fd0\u884c\u548c\u5916\u90e8\u4e16\u754c\u8fdb\u884c\u9694\u79bb\u3002","title":"2.Docker\u7684\u4e3b\u8981\u7279\u70b9"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/01-Docker-%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85/#3docker","text":"\u73af\u5883\u4e00\u81f4\u6027 \uff1a\u5728\u5f00\u53d1\u3001\u6d4b\u8bd5\u548c\u751f\u4ea7\u73af\u5883\u4e4b\u95f4\u5efa\u7acb\u4e00\u81f4\u6027\uff0c\u6d88\u9664\u4e86\u201c\u5728\u6211\u7535\u8111\u4e0a\u8fd0\u884c\u5f97\u597d\u597d\u7684\u201d\u8fd9\u79cd\u60c5\u51b5\u3002 \u4fbf\u4e8e\u6301\u7eed\u96c6\u6210\u548c\u6301\u7eed\u90e8\u7f72 \uff1aDocker\u80fd\u591f\u4ee5\u6700\u5c0f\u7684\u4ee3\u4ef7\u5feb\u901f\u5730\u542f\u52a8\u548c\u5173\u95ed\uff0c\u8fd9\u8ba9\u6301\u7eed\u96c6\u6210\u548c\u6301\u7eed\u90e8\u7f72\u53d8\u5f97\u975e\u5e38\u7b80\u5355\u3002 \u9694\u79bb\u6027\u548c\u5b89\u5168\u6027 \uff1aDocker\u5bb9\u5668\u4e4b\u95f4\u5f7c\u6b64\u9694\u79bb\uff0c\u4e00\u4e2a\u5bb9\u5668\u7684\u5d29\u6e83\u4e0d\u4f1a\u5f71\u54cd\u5230\u5176\u4ed6\u7684\u5bb9\u5668\uff0c\u63d0\u4f9b\u4e86\u989d\u5916\u7684\u5c42\u6b21\u7684\u5b89\u5168\u6027\u3002 \u5fae\u670d\u52a1\u67b6\u6784 \uff1aDocker\u975e\u5e38\u9002\u5408\u5fae\u670d\u52a1\u67b6\u6784\u3002\u6bcf\u4e2a\u5fae\u670d\u52a1\u53ef\u4ee5\u8fd0\u884c\u5728\u81ea\u5df1\u7684\u5bb9\u5668\u4e2d\uff0c\u6bcf\u4e2a\u5bb9\u5668\u4e4b\u95f4\u662f\u76f8\u4e92\u9694\u79bb\u7684\uff0c\u6709\u81ea\u5df1\u72ec\u7acb\u7684\u8fd0\u884c\u73af\u5883\u3002 \u8d44\u6e90\u5229\u7528\u7387\u9ad8 \uff1aDocker\u5bb9\u5668\u5171\u4eab\u4e3b\u673a\u7684\u5185\u6838\uff0c\u4e0d\u9700\u8981\u50cf\u865a\u62df\u673a\u90a3\u6837\u4e3a\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u8fd0\u884c\u4e00\u4e2a\u5b8c\u6574\u7684\u64cd\u4f5c\u7cfb\u7edf\uff0c\u8d44\u6e90\u5360\u7528\u66f4\u5c11\uff0c\u542f\u52a8\u66f4\u5feb\u3002 \u56e0\u6b64\uff0cDocker \u5728\u8f6f\u4ef6\u5f00\u53d1\u3001\u6d4b\u8bd5\u548c\u8fd0\u7ef4\u4e2d\u6709\u7740\u5e7f\u6cdb\u7684\u5e94\u7528\u3002","title":"3.\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528Docker\uff1f"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/01-Docker-%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85/#4docker","text":"Docker\u4e09\u5927\u6838\u5fc3\u6982\u5ff5\uff1a\u955c\u50cf Image\u3001\u5bb9\u5668 Container\u3001\u4ed3\u5e93 Repository","title":"4.Docker\u6838\u5fc3\u6982\u5ff5"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/01-Docker-%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85/#1image","text":"Docker \u955c\u50cf\uff08Image\uff09\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f Docker \u5bb9\u5668\u7684\u53ea\u8bfb\u6a21\u677f\u3002Docker \u955c\u50cf\u662f\u7528\u4e8e\u521b\u5efa Docker \u5bb9\u5668\u7684\u57fa\u7840\uff0c\u4e00\u4e2a\u955c\u50cf\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a\u5bb9\u5668\u3002 \u955c\u50cf\u5305\u542b\u4e86\u8fd0\u884c\u5bb9\u5668\u6240\u9700\u7684\u6240\u6709\u5185\u5bb9\uff0c\u5305\u62ec\u4ee3\u7801\u3001\u8fd0\u884c\u65f6\u3001\u5e93\u3001\u73af\u5883\u53d8\u91cf\u548c\u914d\u7f6e\u6587\u4ef6\u7b49\u3002Docker \u955c\u50cf\u662f\u7531\u6587\u4ef6\u7cfb\u7edf\u53e0\u52a0\u800c\u6210\uff0c\u6bcf\u4e00\u5c42\u90fd\u4ee3\u8868 Dockerfile \u4e2d\u7684\u4e00\u6761\u6307\u4ee4\uff0c\u5c42\u4e0e\u5c42\u4e4b\u95f4\u662f\u4e92\u76f8\u4f9d\u8d56\u7684\u3002","title":"\uff081\uff09\u955c\u50cf\uff08Image\uff09"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/01-Docker-%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85/#2container","text":"Docker \u5bb9\u5668\uff08Container\uff09\u662f Docker \u955c\u50cf\uff08Image\uff09\u8fd0\u884c\u65f6\u7684\u5b9e\u4f53\u3002\u5bb9\u5668\u53ef\u4ee5\u88ab\u521b\u5efa\u3001\u542f\u52a8\u3001\u505c\u6b62\u3001\u5220\u9664\u3001\u6682\u505c\u7b49\u3002\u6bcf\u4e2a\u5bb9\u5668\u4e4b\u95f4\u662f\u76f8\u4e92\u9694\u79bb\u7684\u3001\u4fdd\u62a4\u7684\uff0c\u6bcf\u4e2a\u5bb9\u5668\u90fd\u6709\u81ea\u5df1\u7684\u6587\u4ef6\u7cfb\u7edf\uff0c\u6bcf\u4e2a\u5bb9\u5668\u4e4b\u95f4\u8fd0\u884c\u7684\u8fdb\u7a0b\u90fd\u662f\u76f8\u4e92\u9694\u79bb\u7684\u3002 \u5bb9\u5668\u7684\u5b9a\u4e49\u548c\u955c\u50cf\u51e0\u4e4e\u4e00\u6837\uff0c\u4e5f\u662f\u4e00\u7cfb\u5217\u7684\u5c42\u7684\u96c6\u5408\uff0c\u4e0d\u540c\u7684\u662f\u5bb9\u5668\u7684\u6700\u4e0a\u9762\u90a3\u4e00\u5c42\u662f\u53ef\u8bfb\u53ef\u5199\u7684\uff0c\u800c\u955c\u50cf\u7684\u6700\u4e0a\u5c42\u662f\u53ea\u8bfb\u7684\u3002","title":"\uff082\uff09\u5bb9\u5668\uff08Container\uff09"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/01-Docker-%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85/#3repository","text":"Docker \u4ed3\u5e93\uff08Repository\uff09\u662f\u7528\u6765\u4fdd\u5b58\u955c\u50cf\u7684\u5730\u65b9\u3002Docker \u4ed3\u5e93\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u662f\u4ee3\u7801\u63a7\u5236\u4e2d\u7684\u4ee3\u7801\u4ed3\u5e93\u4e00\u6837\u3002Docker \u7528\u6237\u53ef\u4ee5\u5728\u4ed3\u5e93\u4e2d\u521b\u5efa\u4e00\u4e2a\u8d26\u6237\uff0c\u5b58\u50a8\u548c\u5206\u4eab\u81ea\u5df1\u7684\u955c\u50cf\u3002\u4e5f\u53ef\u4ee5\u4ece Docker \u4ed3\u5e93\u4e2d\u4e0b\u8f7d\u522b\u4eba\u5206\u4eab\u7684\u955c\u50cf\u3002 Docker \u4ed3\u5e93\u5206\u4e3a \u516c\u5f00 \u548c \u79c1\u6709 \u4e24\u79cd\u5f62\u5f0f\u3002 \u516c\u5f00\u7684 Docker \u4ed3\u5e93\u662f Docker \u516c\u53f8\u63d0\u4f9b\u7684\uff0c\u53ef\u4ee5\u88ab\u6240\u6709\u7528\u6237\u4f7f\u7528\u3002 DockerHub \u5c31\u662f\u6700\u77e5\u540d\u7684\u516c\u5f00 Docker \u4ed3\u5e93\u3002 \u79c1\u6709\u7684 Docker \u4ed3\u5e93\u53ef\u4ee5\u5728\u672c\u5730\u90e8\u7f72\uff0c\u53ea\u80fd\u88ab\u5185\u90e8\u7528\u6237\u4f7f\u7528\u3002 \u603b\u7ed3\u6765\u8bf4\uff0cDocker \u7684\u5de5\u4f5c\u6d41\u7a0b\u662f\uff0c\u9996\u5148\u4ece Docker \u4ed3\u5e93\u4e2d\u83b7\u53d6 Docker \u955c\u50cf\uff0c\u7136\u540e\u7528\u8fd9\u4e2a\u955c\u50cf\u521b\u5efa Docker \u5bb9\u5668\uff0c\u6700\u540e\u5bf9\u5bb9\u5668\u8fdb\u884c\u64cd\u4f5c\uff08\u542f\u52a8\u3001\u505c\u6b62\u7b49\uff09\u3002","title":"\uff083\uff09\u4ed3\u5e93\uff08Repository\uff09"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/01-Docker-%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85/#5docker","text":"\u5728 Docker \u4e3b\u8981\u6709\u4ee5\u4e0b\u51e0\u90e8\u5206\u7ec4\u6210\uff1a Docker \u5ba2\u6237\u7aef\uff0c\u8d1f\u8d23\u4e0e Docker \u5b88\u62a4\u8fdb\u884c\u901a\u4fe1\uff1b Docker \u5b88\u62a4\u8fdb\u7a0b\uff0c\u8d1f\u8d23\u7ba1\u7406 Docker \u955c\u50cf\u548c Docker \u5bb9\u5668\uff1b Docker \u955c\u50cf\uff0c\u8d1f\u8d23\u4ea7\u751f Docker \u5bb9\u5668\u5b9e\u4f8b\uff1b Docker \u5bb9\u5668\uff0c\u5305\u542b\u4e86\u5e94\u7528\u7a0b\u5e8f\u548c\u5176\u6240\u4f9d\u8d56\u73af\u5883\u3002 Docker Hub\uff0c\u5df2\u7ecf\u5236\u4f5c\u597d\u4e86\u5f88\u591a\u955c\u50cf \u94fe\u63a5\uff1ahttps://hub.docker.com/","title":"5.Docker\u7684\u6838\u5fc3\u67b6\u6784"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/01-Docker-%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85/#6centos-docker","text":"","title":"6.Centos Docker \u5b89\u88c5"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/01-Docker-%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85/#1docker_1","text":"\u5b98\u65b9\u7684\u4e00\u952e\u5b89\u88c5\u65b9\u5f0f\uff1a curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun \u56fd\u5185daocloud\u4e00\u952e\u5b89\u88c5\u547d\u4ee4\uff1a curl -sSL https://get.daocloud.io/docker | sh \u6267\u884c\u4e0a\u8ff0\u4efb\u4e00\u6761\u547d\u4ee4\uff0c\u8010\u5fc3\u7b49\u5f85\u5373\u53ef\u5b8c\u6210Docker\u7684\u5b89\u88c5\u3002","title":"\uff081\uff09Docker\u81ea\u52a8\u5316\u5b89\u88c5"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/01-Docker-%E4%BB%8B%E7%BB%8D%E5%AE%89%E8%A3%85/#2docker_1","text":"# \u5b89\u88c5\u4f9d\u8d56\u5de5\u5177 # yum-utils\u63d0\u4f9byum-config-manager # device mapper\u5b58\u50a8\u9a71\u52a8\u7a0b\u5e8f\u9700\u8981device-mapper-persistent-data\u548clvm2\u3002 sudo yum install - y yum - utils device - mapper - persistent - data lvm2 # \u914d\u7f6e\u955c\u50cf\u6e90\uff0c \u6211\u4eec\u4f7f\u7528\u7684\u662f\u963f\u91cc\u4e91\u7684\u6e90 yum - config - manager -- add - repo http : // mirrors . aliyun . com / docker - ce / linux / centos / docker - ce . repo yum makecache fast # \u5b89\u88c5 Docker yum install docker - ce docker - ce - cli containerd . io \u5b89\u88c5\u547d\u4ee4\u6267\u884c\u6210\u529f\u4e4b\u540e\uff0c\u4f7f\u7528\u4e0b\u9762\u547d\u4ee4\u6765\u7ba1\u7406Docker \u5b88\u62a4\u8fdb\u7a0b\uff1a # \u67e5\u770b docker \u7248\u672c docker version # \u542f\u52a8 docker \u670d\u52a1 systemctl start docker # \u5173\u95ed docker \u670d\u52a1 systemctl stop docker # \u91cd\u542f docker \u670d\u52a1 systemctl restart docker # \u67e5\u770b docker \u72b6\u6001 systemctl status docker # \u8bbe\u7f6e\u5f00\u673a\u542f\u52a8 systemctl enable docker","title":"\uff082\uff09Docker\u624b\u52a8\u5b89\u88c5"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/02-Docker-%E5%BF%AB%E9%80%9F%E5%85%A5%E6%89%8B/","text":"Docker \u5feb\u901f\u5165\u624b \u5728\u8fd9\u4e00\u8282\uff0c\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u5c0f\u5b9e\u9a8c\u6765\u5feb\u901f\u5165\u95e8 Docker \u7684\u4f7f\u7528\u65b9\u6cd5\u3002\u5927\u81f4\u7684\u6b65\u9aa4\u5982\u4e0b: \u67e5\u770b Docker \u670d\u52a1\u8fd0\u884c\u72b6\u6001; \u67e5\u770b\u672c\u5730\u955c\u50cf; \u4ece Docker Hub \u62c9\u53d6\u57fa\u7840\u955c\u50cf, \u6211\u4eec\u6b64\u5904\u9009\u62e9 ubuntu:18.04 \u955c\u50cf; \u518d\u6b21\u67e5\u770b\u672c\u5730\u955c\u50cf; \u4f7f\u7528 ubuntu:18.04 \u955c\u50cf\u6784\u5efa\u5bb9\u5668\uff0c\u5e76\u4ea4\u4e92\u5f0f\u8fd0\u884c\u5bb9\u5668\uff1b \u5728\u5bb9\u5668\u5185\u90e8\u6267\u884c LS \u547d\u4ee4; \u9000\u51fa\u5bb9\u5668; \u67e5\u770b\u672c\u5730\u5bb9\u5668\u5b9e\u4f8b; \u518d\u6b21\u542f\u52a8\u505c\u6b62\u7684\u5bb9\u5668; \u9000\u51fa\u5e76\u505c\u6b62\u5bb9\u5668. \u6267\u884c\u547d\u4ee4\u5982\u4e0b: # 0. \u67e5\u770b Docker \u670d\u52a1\u8fd0\u884c\u72b6\u6001; systemctl status docker # 1. \u67e5\u770b\u672c\u5730\u955c\u50cf; docker images \"\"\" REPOSITORY TAG IMAGE ID CREATED SIZE \"\"\" # 2. \u4ece Docker Hub \u62c9\u53d6\u57fa\u7840\u955c\u50cf, \u6211\u4eec\u6b64\u5904\u9009\u62e9 ubuntu \u955c\u50cf; docker search ubuntu docker search ubuntu -- no - trunc docker pull ubuntu \"\"\" Using default tag: latest latest: Pulling from library/ubuntu 405f018f9d1d: Pull complete Digest: sha256:b6b83d3c331794420340093eb706a6f152d9c1fa51b262d9bf34594887c2c7ac Status: Downloaded newer image for ubuntu:latest docker.io/library/ubuntu:latest \"\"\" # 3. \u518d\u6b21\u67e5\u770b\u672c\u5730\u955c\u50cf; docker images docker image ls \"\"\" REPOSITORY TAG IMAGE ID CREATED SIZE ubuntu latest 27941809078c 9 days ago 77.8MB \"\"\" # 4. \u4f7f\u7528 ubuntu \u955c\u50cf\u6784\u5efa\u5bb9\u5668\uff0c\u5e76\u4ea4\u4e92\u5f0f\u8fd0\u884c\u5bb9\u5668\uff0c\u5e76\u5728\u5bb9\u5668\u4e2d\u6267\u884c LS \u547d\u4ee4\uff1b docker run - it ubuntu : latest / bin / bash \"\"\" root@abcced6d5ee8:/# ls bin boot dev etc home lib lib32 lib64 libx32 media mnt opt proc root run sbin srv sys tmp usr var \"\"\" # 5. \u9000\u51fa\u5bb9\u5668; exit \"\"\" exit [root@bogon docker]# \"\"\" # 6. \u67e5\u770b\u672c\u5730\u5bb9\u5668\u5b9e\u4f8b; docker ps docker ps - a \"\"\" CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES abcced6d5ee8 ubuntu:latest \"/bin/bash\" About a minute ago Exited (0) 35 seconds ago sad_montalcini \"\"\" # 7. \u518d\u6b21\u542f\u52a8\u505c\u6b62\u7684\u5bb9\u5668; docker start \u5bb9\u5668ID \"\"\" [root@bogon docker]# docker start abcced6d5ee8 abcced6d5ee8 \"\"\" # 8. \u518d\u6b21\u8fdb\u5165\u5bb9\u5668 docker exec - it abcced6d5ee8 / bin / bash \"\"\" root@abcced6d5ee8:/# ls bin boot dev etc home lib lib32 lib64 libx32 media mnt opt proc root run sbin srv sys tmp usr var \"\"\" # 9. \u9000\u51fa\u5bb9\u5668, \u5e76\u505c\u6b62\u5bb9\u5668 exit docker stop \u5bb9\u5668ID \"\"\" [root@bogon docker]# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES abcced6d5ee8 ubuntu:latest \"/bin/bash\" 9 minutes ago Up 6 minutes sad_montalcini [root@bogon docker]# docker stop abcced6d5ee8 abcced6d5ee8 [root@bogon docker]# docker exec -it abcced6d5ee8 /bin/bash Error response from daemon: Container abcced6d5ee8e6980f8271d3e78d18d0dff708e377c22c7798006a133ac73559 is not running \"\"\"","title":"Docker \u5feb\u901f\u5165\u624b"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/02-Docker-%E5%BF%AB%E9%80%9F%E5%85%A5%E6%89%8B/#docker","text":"\u5728\u8fd9\u4e00\u8282\uff0c\u6211\u4eec\u901a\u8fc7\u4e00\u4e2a\u5c0f\u5b9e\u9a8c\u6765\u5feb\u901f\u5165\u95e8 Docker \u7684\u4f7f\u7528\u65b9\u6cd5\u3002\u5927\u81f4\u7684\u6b65\u9aa4\u5982\u4e0b: \u67e5\u770b Docker \u670d\u52a1\u8fd0\u884c\u72b6\u6001; \u67e5\u770b\u672c\u5730\u955c\u50cf; \u4ece Docker Hub \u62c9\u53d6\u57fa\u7840\u955c\u50cf, \u6211\u4eec\u6b64\u5904\u9009\u62e9 ubuntu:18.04 \u955c\u50cf; \u518d\u6b21\u67e5\u770b\u672c\u5730\u955c\u50cf; \u4f7f\u7528 ubuntu:18.04 \u955c\u50cf\u6784\u5efa\u5bb9\u5668\uff0c\u5e76\u4ea4\u4e92\u5f0f\u8fd0\u884c\u5bb9\u5668\uff1b \u5728\u5bb9\u5668\u5185\u90e8\u6267\u884c LS \u547d\u4ee4; \u9000\u51fa\u5bb9\u5668; \u67e5\u770b\u672c\u5730\u5bb9\u5668\u5b9e\u4f8b; \u518d\u6b21\u542f\u52a8\u505c\u6b62\u7684\u5bb9\u5668; \u9000\u51fa\u5e76\u505c\u6b62\u5bb9\u5668. \u6267\u884c\u547d\u4ee4\u5982\u4e0b: # 0. \u67e5\u770b Docker \u670d\u52a1\u8fd0\u884c\u72b6\u6001; systemctl status docker # 1. \u67e5\u770b\u672c\u5730\u955c\u50cf; docker images \"\"\" REPOSITORY TAG IMAGE ID CREATED SIZE \"\"\" # 2. \u4ece Docker Hub \u62c9\u53d6\u57fa\u7840\u955c\u50cf, \u6211\u4eec\u6b64\u5904\u9009\u62e9 ubuntu \u955c\u50cf; docker search ubuntu docker search ubuntu -- no - trunc docker pull ubuntu \"\"\" Using default tag: latest latest: Pulling from library/ubuntu 405f018f9d1d: Pull complete Digest: sha256:b6b83d3c331794420340093eb706a6f152d9c1fa51b262d9bf34594887c2c7ac Status: Downloaded newer image for ubuntu:latest docker.io/library/ubuntu:latest \"\"\" # 3. \u518d\u6b21\u67e5\u770b\u672c\u5730\u955c\u50cf; docker images docker image ls \"\"\" REPOSITORY TAG IMAGE ID CREATED SIZE ubuntu latest 27941809078c 9 days ago 77.8MB \"\"\" # 4. \u4f7f\u7528 ubuntu \u955c\u50cf\u6784\u5efa\u5bb9\u5668\uff0c\u5e76\u4ea4\u4e92\u5f0f\u8fd0\u884c\u5bb9\u5668\uff0c\u5e76\u5728\u5bb9\u5668\u4e2d\u6267\u884c LS \u547d\u4ee4\uff1b docker run - it ubuntu : latest / bin / bash \"\"\" root@abcced6d5ee8:/# ls bin boot dev etc home lib lib32 lib64 libx32 media mnt opt proc root run sbin srv sys tmp usr var \"\"\" # 5. \u9000\u51fa\u5bb9\u5668; exit \"\"\" exit [root@bogon docker]# \"\"\" # 6. \u67e5\u770b\u672c\u5730\u5bb9\u5668\u5b9e\u4f8b; docker ps docker ps - a \"\"\" CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES abcced6d5ee8 ubuntu:latest \"/bin/bash\" About a minute ago Exited (0) 35 seconds ago sad_montalcini \"\"\" # 7. \u518d\u6b21\u542f\u52a8\u505c\u6b62\u7684\u5bb9\u5668; docker start \u5bb9\u5668ID \"\"\" [root@bogon docker]# docker start abcced6d5ee8 abcced6d5ee8 \"\"\" # 8. \u518d\u6b21\u8fdb\u5165\u5bb9\u5668 docker exec - it abcced6d5ee8 / bin / bash \"\"\" root@abcced6d5ee8:/# ls bin boot dev etc home lib lib32 lib64 libx32 media mnt opt proc root run sbin srv sys tmp usr var \"\"\" # 9. \u9000\u51fa\u5bb9\u5668, \u5e76\u505c\u6b62\u5bb9\u5668 exit docker stop \u5bb9\u5668ID \"\"\" [root@bogon docker]# docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES abcced6d5ee8 ubuntu:latest \"/bin/bash\" 9 minutes ago Up 6 minutes sad_montalcini [root@bogon docker]# docker stop abcced6d5ee8 abcced6d5ee8 [root@bogon docker]# docker exec -it abcced6d5ee8 /bin/bash Error response from daemon: Container abcced6d5ee8e6980f8271d3e78d18d0dff708e377c22c7798006a133ac73559 is not running \"\"\"","title":"Docker \u5feb\u901f\u5165\u624b"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/03-Docker-%E9%95%9C%E5%83%8F%E6%93%8D%E4%BD%9C/","text":"Docker \u955c\u50cf\u64cd\u4f5c \u955c\u50cf\u64cd\u4f5c\u4e3b\u8981\u5305\u62ec: \u67e5\u770b\u955c\u50cf \u641c\u7d22\u955c\u50cf \u4e0b\u8f7d\u955c\u50cf \u8fd0\u884c\u955c\u50cf \u5220\u9664\u955c\u50cf \u4fdd\u5b58\u955c\u50cf \u52a0\u8f7d\u955c\u50cf \u793a\u4f8b\u547d\u4ee4: # 1. \u67e5\u770b\u955c\u50cf docker images # \u67e5\u770b\u6240\u6709\u955c\u50cf docker images - q # \u53ea\u67e5\u770b\u955c\u50cf\u7684ID docker images -- no - trunc # \u663e\u793a\u955c\u50cf\u5b8c\u6574\u4fe1\u606f # 2. \u641c\u7d22\u955c\u50cf docker search \u955c\u50cf\u540d # 3. \u4e0b\u8f7d\u955c\u50cf docker pull \u955c\u50cf\u540d : \u7248\u672c # \u4e0d\u6307\u5b9a TAG, \u5219\u9ed8\u8ba4\u4f7f\u7528 latest # 4. \u8fd0\u884c\u955c\u50cf docker run - it \u955c\u50cf\u540d : \u7248\u672c \u7a0b\u5e8f # \u4ea4\u4e92\u5f0f\u8fd0\u884c\u5bb9\u5668 docker run - it -- name = \u6807\u7b7e\u540d \u955c\u50cf\u540d : \u7248\u672c \u7a0b\u5e8f # \u5bb9\u5668\u6307\u5b9a\u540d\u5b57 docker run - itd \u955c\u50cf\u540d : \u7248\u672c \u7a0b\u5e8f # \u540e\u53f0\u8fd0\u884c\u5bb9\u5668 # 5. \u5220\u9664\u955c\u50cf docker rmi - f \u955c\u50cf\u540d # \u5220\u9664\u6307\u5b9a\u955c\u50cf docker rmi - f \u955c\u50cfID # \u5220\u9664\u6307\u5b9a\u955c\u50cf docker rmi - f $ ( docker images - qa ) # \u5220\u9664\u6240\u6709\u955c\u50cf # 6. \u4fdd\u5b58\u955c\u50cf docker save \u955c\u50cf\u540d : \u7248\u672c - o xxx . tar \"\"\" [root@bogon ~]# docker save alpine:latest -o myalpine.tar [root@bogon ~]# ls anaconda-ks.cfg myalpine.tar \"\"\" # 7. \u52a0\u8f7d\u955c\u50cf docker load - i xxx . tar \"\"\" [root@bogon ~]# docker load -i myalpine.tar 24302eb7d908: Loading layer [==================================================>] 5.811MB/5.811MB REPOSITORY TAG IMAGE ID CREATED SIZE alpine latest e66264b98777 3 weeks ago 5.53MB centos latest 5d0da3dc9764 9 months ago 231MB \"\"\"","title":"Docker \u955c\u50cf\u64cd\u4f5c"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/03-Docker-%E9%95%9C%E5%83%8F%E6%93%8D%E4%BD%9C/#docker","text":"\u955c\u50cf\u64cd\u4f5c\u4e3b\u8981\u5305\u62ec: \u67e5\u770b\u955c\u50cf \u641c\u7d22\u955c\u50cf \u4e0b\u8f7d\u955c\u50cf \u8fd0\u884c\u955c\u50cf \u5220\u9664\u955c\u50cf \u4fdd\u5b58\u955c\u50cf \u52a0\u8f7d\u955c\u50cf \u793a\u4f8b\u547d\u4ee4: # 1. \u67e5\u770b\u955c\u50cf docker images # \u67e5\u770b\u6240\u6709\u955c\u50cf docker images - q # \u53ea\u67e5\u770b\u955c\u50cf\u7684ID docker images -- no - trunc # \u663e\u793a\u955c\u50cf\u5b8c\u6574\u4fe1\u606f # 2. \u641c\u7d22\u955c\u50cf docker search \u955c\u50cf\u540d # 3. \u4e0b\u8f7d\u955c\u50cf docker pull \u955c\u50cf\u540d : \u7248\u672c # \u4e0d\u6307\u5b9a TAG, \u5219\u9ed8\u8ba4\u4f7f\u7528 latest # 4. \u8fd0\u884c\u955c\u50cf docker run - it \u955c\u50cf\u540d : \u7248\u672c \u7a0b\u5e8f # \u4ea4\u4e92\u5f0f\u8fd0\u884c\u5bb9\u5668 docker run - it -- name = \u6807\u7b7e\u540d \u955c\u50cf\u540d : \u7248\u672c \u7a0b\u5e8f # \u5bb9\u5668\u6307\u5b9a\u540d\u5b57 docker run - itd \u955c\u50cf\u540d : \u7248\u672c \u7a0b\u5e8f # \u540e\u53f0\u8fd0\u884c\u5bb9\u5668 # 5. \u5220\u9664\u955c\u50cf docker rmi - f \u955c\u50cf\u540d # \u5220\u9664\u6307\u5b9a\u955c\u50cf docker rmi - f \u955c\u50cfID # \u5220\u9664\u6307\u5b9a\u955c\u50cf docker rmi - f $ ( docker images - qa ) # \u5220\u9664\u6240\u6709\u955c\u50cf # 6. \u4fdd\u5b58\u955c\u50cf docker save \u955c\u50cf\u540d : \u7248\u672c - o xxx . tar \"\"\" [root@bogon ~]# docker save alpine:latest -o myalpine.tar [root@bogon ~]# ls anaconda-ks.cfg myalpine.tar \"\"\" # 7. \u52a0\u8f7d\u955c\u50cf docker load - i xxx . tar \"\"\" [root@bogon ~]# docker load -i myalpine.tar 24302eb7d908: Loading layer [==================================================>] 5.811MB/5.811MB REPOSITORY TAG IMAGE ID CREATED SIZE alpine latest e66264b98777 3 weeks ago 5.53MB centos latest 5d0da3dc9764 9 months ago 231MB \"\"\"","title":"Docker \u955c\u50cf\u64cd\u4f5c"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/04-Docker-%E5%AE%B9%E5%99%A8%E6%93%8D%E4%BD%9C/","text":"Docker \u5bb9\u5668\u64cd\u4f5c \u5bb9\u5668\u64cd\u4f5c\u4e3b\u8981\u5305\u62ec: \u67e5\u770b\u5bb9\u5668 \u542f\u52a8\u5bb9\u5668 \u505c\u6b62\u5bb9\u5668 \u5220\u9664\u5bb9\u5668 \u8fdb\u5165\u5bb9\u5668 \u5bb9\u5668\u5bfc\u51fa \u5bb9\u5668\u5bfc\u5165 # 1. \u67e5\u770b\u5bb9\u5668 docker ps # \u67e5\u770b\u6b63\u5728\u8fd0\u884c\u7684\u5bb9\u5668\u5b9e\u4f8b docker ps - a # \u67e5\u770b\u6b63\u5728\u8fd0\u884c\u6216\u8005\u5df2\u505c\u6b62\u7684\u5bb9\u5668\u5b9e\u4f8b # 2. \u8fd0\u884c\u5bb9\u5668 docker start \u5bb9\u5668ID # \u542f\u52a8\u5bb9\u5668 docker restart \u5bb9\u5668ID # \u91cd\u542f\u5bb9\u5668 # 3. \u505c\u6b62\u5bb9\u5668 docker stop \u5bb9\u5668ID # 4. \u5220\u9664\u5bb9\u5668 docker rm - f \u5bb9\u5668ID # \u5220\u9664\u6307\u5b9a\u5bb9\u5668 docker rm - f $ ( docker ps - qa ) # \u5220\u9664\u6240\u6709\u5bb9\u5668 # 5. \u8fdb\u5165\u5bb9\u5668 # attach \u9000\u51fa\u7ec8\u7aef\u4f1a\u5bfc\u81f4\u5bb9\u5668\u505c\u6b62 # exec \u4e0d\u4f1a\u5bfc\u81f4\u5bb9\u5668\u505c\u6b62 docker attach \u5bb9\u5668ID docker exec - it \u5bb9\u5668ID / bin / bash # 6. \u5bb9\u5668\u5bfc\u51fa docker export \u5bb9\u5668ID > xxx . tar # 7. \u5bb9\u5668\u5bfc\u5165 docker import xxx.tar xxx : tag","title":"Docker \u5bb9\u5668\u64cd\u4f5c"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/04-Docker-%E5%AE%B9%E5%99%A8%E6%93%8D%E4%BD%9C/#docker","text":"\u5bb9\u5668\u64cd\u4f5c\u4e3b\u8981\u5305\u62ec: \u67e5\u770b\u5bb9\u5668 \u542f\u52a8\u5bb9\u5668 \u505c\u6b62\u5bb9\u5668 \u5220\u9664\u5bb9\u5668 \u8fdb\u5165\u5bb9\u5668 \u5bb9\u5668\u5bfc\u51fa \u5bb9\u5668\u5bfc\u5165 # 1. \u67e5\u770b\u5bb9\u5668 docker ps # \u67e5\u770b\u6b63\u5728\u8fd0\u884c\u7684\u5bb9\u5668\u5b9e\u4f8b docker ps - a # \u67e5\u770b\u6b63\u5728\u8fd0\u884c\u6216\u8005\u5df2\u505c\u6b62\u7684\u5bb9\u5668\u5b9e\u4f8b # 2. \u8fd0\u884c\u5bb9\u5668 docker start \u5bb9\u5668ID # \u542f\u52a8\u5bb9\u5668 docker restart \u5bb9\u5668ID # \u91cd\u542f\u5bb9\u5668 # 3. \u505c\u6b62\u5bb9\u5668 docker stop \u5bb9\u5668ID # 4. \u5220\u9664\u5bb9\u5668 docker rm - f \u5bb9\u5668ID # \u5220\u9664\u6307\u5b9a\u5bb9\u5668 docker rm - f $ ( docker ps - qa ) # \u5220\u9664\u6240\u6709\u5bb9\u5668 # 5. \u8fdb\u5165\u5bb9\u5668 # attach \u9000\u51fa\u7ec8\u7aef\u4f1a\u5bfc\u81f4\u5bb9\u5668\u505c\u6b62 # exec \u4e0d\u4f1a\u5bfc\u81f4\u5bb9\u5668\u505c\u6b62 docker attach \u5bb9\u5668ID docker exec - it \u5bb9\u5668ID / bin / bash # 6. \u5bb9\u5668\u5bfc\u51fa docker export \u5bb9\u5668ID > xxx . tar # 7. \u5bb9\u5668\u5bfc\u5165 docker import xxx.tar xxx : tag","title":"Docker \u5bb9\u5668\u64cd\u4f5c"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/05-Docker-%E6%89%8B%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/","text":"Docker \u624b\u52a8\u6784\u5efa\u955c\u50cf \u6211\u4eec\u53ef\u4ee5\u628a Docker \u5bb9\u5668\u5f53\u505a\u4e00\u4e2a\u666e\u901a\u7684 Linux \u7cfb\u7edf\uff0c\u5728\u91cc\u9762\u5b89\u88c5\u6211\u4eec\u9700\u8981\u7684\u8f6f\u4ef6\u3002\u6211\u4eec\u63a5\u4e0b\u6765\uff0c\u8981\u5728\u5bb9\u5668\u4e2d\u90e8\u7f72\u300a\u5783\u573e\u90ae\u4ef6\u5206\u7c7b\u5668\u300b\u6a21\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u4e0b\u9762\u7684\u6b65\u9aa4\u5b8c\u6210\u3002 1. \u6574\u7406\u9879\u76ee \u6211\u4eec\u5728\u7b2c\u4e8c\u7ae0\u8282\u7f16\u5199\u7684\u670d\u52a1\u63a5\u53e3\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b: 02 - \u670d\u52a1\u63a5\u53e3 \u251c\u2500\u2500 01 - Flask - Hello - World . py \u251c\u2500\u2500 02 - Flask - \u8868\u5355\u5904\u7406 . py \u251c\u2500\u2500 03 - \u8868\u5355\u5904\u7406\u6269\u5c55 . py \u251c\u2500\u2500 04 - \u670d\u52a1\u63a5\u53e3 . py \u251c\u2500\u2500 05 - \u6a21\u578b\u8bad\u7ec3\u7279\u5f81 . pkl \u251c\u2500\u2500 06 - \u90ae\u4ef6\u5206\u7c7b\u6a21\u578b . pth \u251c\u2500\u2500 email_submit . html \u2514\u2500\u2500 other . html \u5176\u4e2d\u6709\u7528\u7684\u6587\u4ef6\u4e3a: 02 - \u670d\u52a1\u63a5\u53e3 \u251c\u2500\u2500 04 - \u670d\u52a1\u63a5\u53e3 . py \u251c\u2500\u2500 05 - \u6a21\u578b\u8bad\u7ec3\u7279\u5f81 . pkl \u251c\u2500\u2500 06 - \u90ae\u4ef6\u5206\u7c7b\u6a21\u578b . pth \u251c\u2500\u2500 email_submit . html \u6587\u4ef6\u540d\u66f4\u6539: 05-\u6a21\u578b\u8bad\u7ec3\u7279\u5f81.pkl \u66f4\u6539\u4e3a feature.pkl 06-\u90ae\u4ef6\u5206\u7c7b\u6a21\u578b.pth \u66f4\u6539\u4e3a spam-model.pth 04-\u670d\u52a1\u63a5\u53e3.py \u66f4\u6539\u4e3a app.py\uff08\u4fee\u6539 app.py \u5185\u4e0a\u8ff0\u6587\u4ef6\u7684\u547d\u540d\uff09 \u5c06\u5176\u653e\u5728 app \u76ee\u5f55\u4e0b\uff0c\u76ee\u5f55\u7ed3\u6784\u4e3a\uff1a app \u251c\u2500\u2500 app . py \u251c\u2500\u2500 features . pkl \u251c\u2500\u2500 spam - model . pth \u2514\u2500\u2500 email_submit . html \u81f3\u6b64, \u9879\u76ee\u6587\u4ef6\u6b63\u4f8b\u5b8c\u6bd5. 2. \u5236\u4f5c\u955c\u50cf # 1. \u4e0b\u8f7d\u57fa\u7840\u955c\u50cf docker pull python : 3.7.5 # 2. \u521b\u5efa\u5bb9\u5668\u65f6\uff0c\u6307\u5b9a\u5bb9\u5668\u7684\u6620\u5c04\u7aef\u53e3\u3001\u5de5\u4f5c\u76ee\u5f55 docker run - it - p 5000 : 5000 - w / root / app python : 3.7.5 / bin / bash # 3. \u5b89\u88c5 app \u4f9d\u8d56\u7684 Python \u5305 pip install pandas flask scikit - learn jieba zhconv - i https : // pypi . tuna . tsinghua . edu . cn / simple # 4. \u9000\u51fa\u5bb9\u5668 exit # 5. \u5c06 app \u62f7\u8d1d\u5230\u5bb9\u5668 /root \u76ee\u5f55\u4e0b docker cp app / \u5bb9\u5668ID : / root # 6. \u8fdb\u5165\u5bb9\u5668\uff0c\u542f\u52a8\u670d\u52a1\u6d4b\u8bd5 docker start \u5bb9\u5668ID docker exec - it \u5bb9\u5668ID / bin / bash python app . py # \u6ce8\u610f: \u5982\u679c\u542f\u52a8\u670d\u52a1\u4e4b\u540e\uff0c\u5728\u6d4f\u89c8\u5668\u80fd\u591f\u6b63\u5e38\u8bbf\u95ee\u5219\u8fdb\u884c\u4e0b\u9762\u7684\u6b65\u9aa4 # 7. \u5c06\u5bb9\u5668\u5b58\u50a8\u4e3a\u955c\u50cf docker stop \u955c\u50cfID docker export \u5bb9\u5668ID > spam . tar # 8. \u5c06 tar \u5305\u5bfc\u5165\u4e3a\u672c\u5730\u955c\u50cf # \u6b64\u65f6, \u5047\u8bbe\u6211\u4eec\u5728\u53e6\u5916\u4e00\u53f0\u670d\u52a1\u5668\u90e8\u7f72\u955c\u50cf docker import spam.tar spam : 1.0 # 9. \u542f\u52a8 docker \u5bb9\u5668\u670d\u52a1 docker run - d - p 5000 : 5000 - w / root / app spam : 1.0 python app . py # \u67e5\u770b\u955c\u50cf\u662f\u5426\u6b63\u5728\u8fd0\u884c docker ps # 10. \u6d4f\u89c8\u5668\u8f93\u5165: http://\u5bbf\u4e3b\u673aIP:5000/email_submit \u51fa\u73b0\u4e0b\u9762\u754c\u9762\uff0c\u5219\u955c\u50cf\u5de5\u4f5c\u6b63\u5e38","title":"Docker \u624b\u52a8\u6784\u5efa\u955c\u50cf"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/05-Docker-%E6%89%8B%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/#docker","text":"\u6211\u4eec\u53ef\u4ee5\u628a Docker \u5bb9\u5668\u5f53\u505a\u4e00\u4e2a\u666e\u901a\u7684 Linux \u7cfb\u7edf\uff0c\u5728\u91cc\u9762\u5b89\u88c5\u6211\u4eec\u9700\u8981\u7684\u8f6f\u4ef6\u3002\u6211\u4eec\u63a5\u4e0b\u6765\uff0c\u8981\u5728\u5bb9\u5668\u4e2d\u90e8\u7f72\u300a\u5783\u573e\u90ae\u4ef6\u5206\u7c7b\u5668\u300b\u6a21\u578b\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u4e0b\u9762\u7684\u6b65\u9aa4\u5b8c\u6210\u3002","title":"Docker \u624b\u52a8\u6784\u5efa\u955c\u50cf"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/05-Docker-%E6%89%8B%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/#1","text":"\u6211\u4eec\u5728\u7b2c\u4e8c\u7ae0\u8282\u7f16\u5199\u7684\u670d\u52a1\u63a5\u53e3\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b: 02 - \u670d\u52a1\u63a5\u53e3 \u251c\u2500\u2500 01 - Flask - Hello - World . py \u251c\u2500\u2500 02 - Flask - \u8868\u5355\u5904\u7406 . py \u251c\u2500\u2500 03 - \u8868\u5355\u5904\u7406\u6269\u5c55 . py \u251c\u2500\u2500 04 - \u670d\u52a1\u63a5\u53e3 . py \u251c\u2500\u2500 05 - \u6a21\u578b\u8bad\u7ec3\u7279\u5f81 . pkl \u251c\u2500\u2500 06 - \u90ae\u4ef6\u5206\u7c7b\u6a21\u578b . pth \u251c\u2500\u2500 email_submit . html \u2514\u2500\u2500 other . html \u5176\u4e2d\u6709\u7528\u7684\u6587\u4ef6\u4e3a: 02 - \u670d\u52a1\u63a5\u53e3 \u251c\u2500\u2500 04 - \u670d\u52a1\u63a5\u53e3 . py \u251c\u2500\u2500 05 - \u6a21\u578b\u8bad\u7ec3\u7279\u5f81 . pkl \u251c\u2500\u2500 06 - \u90ae\u4ef6\u5206\u7c7b\u6a21\u578b . pth \u251c\u2500\u2500 email_submit . html \u6587\u4ef6\u540d\u66f4\u6539: 05-\u6a21\u578b\u8bad\u7ec3\u7279\u5f81.pkl \u66f4\u6539\u4e3a feature.pkl 06-\u90ae\u4ef6\u5206\u7c7b\u6a21\u578b.pth \u66f4\u6539\u4e3a spam-model.pth 04-\u670d\u52a1\u63a5\u53e3.py \u66f4\u6539\u4e3a app.py\uff08\u4fee\u6539 app.py \u5185\u4e0a\u8ff0\u6587\u4ef6\u7684\u547d\u540d\uff09 \u5c06\u5176\u653e\u5728 app \u76ee\u5f55\u4e0b\uff0c\u76ee\u5f55\u7ed3\u6784\u4e3a\uff1a app \u251c\u2500\u2500 app . py \u251c\u2500\u2500 features . pkl \u251c\u2500\u2500 spam - model . pth \u2514\u2500\u2500 email_submit . html \u81f3\u6b64, \u9879\u76ee\u6587\u4ef6\u6b63\u4f8b\u5b8c\u6bd5.","title":"1. \u6574\u7406\u9879\u76ee"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/05-Docker-%E6%89%8B%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/#2","text":"# 1. \u4e0b\u8f7d\u57fa\u7840\u955c\u50cf docker pull python : 3.7.5 # 2. \u521b\u5efa\u5bb9\u5668\u65f6\uff0c\u6307\u5b9a\u5bb9\u5668\u7684\u6620\u5c04\u7aef\u53e3\u3001\u5de5\u4f5c\u76ee\u5f55 docker run - it - p 5000 : 5000 - w / root / app python : 3.7.5 / bin / bash # 3. \u5b89\u88c5 app \u4f9d\u8d56\u7684 Python \u5305 pip install pandas flask scikit - learn jieba zhconv - i https : // pypi . tuna . tsinghua . edu . cn / simple # 4. \u9000\u51fa\u5bb9\u5668 exit # 5. \u5c06 app \u62f7\u8d1d\u5230\u5bb9\u5668 /root \u76ee\u5f55\u4e0b docker cp app / \u5bb9\u5668ID : / root # 6. \u8fdb\u5165\u5bb9\u5668\uff0c\u542f\u52a8\u670d\u52a1\u6d4b\u8bd5 docker start \u5bb9\u5668ID docker exec - it \u5bb9\u5668ID / bin / bash python app . py # \u6ce8\u610f: \u5982\u679c\u542f\u52a8\u670d\u52a1\u4e4b\u540e\uff0c\u5728\u6d4f\u89c8\u5668\u80fd\u591f\u6b63\u5e38\u8bbf\u95ee\u5219\u8fdb\u884c\u4e0b\u9762\u7684\u6b65\u9aa4 # 7. \u5c06\u5bb9\u5668\u5b58\u50a8\u4e3a\u955c\u50cf docker stop \u955c\u50cfID docker export \u5bb9\u5668ID > spam . tar # 8. \u5c06 tar \u5305\u5bfc\u5165\u4e3a\u672c\u5730\u955c\u50cf # \u6b64\u65f6, \u5047\u8bbe\u6211\u4eec\u5728\u53e6\u5916\u4e00\u53f0\u670d\u52a1\u5668\u90e8\u7f72\u955c\u50cf docker import spam.tar spam : 1.0 # 9. \u542f\u52a8 docker \u5bb9\u5668\u670d\u52a1 docker run - d - p 5000 : 5000 - w / root / app spam : 1.0 python app . py # \u67e5\u770b\u955c\u50cf\u662f\u5426\u6b63\u5728\u8fd0\u884c docker ps # 10. \u6d4f\u89c8\u5668\u8f93\u5165: http://\u5bbf\u4e3b\u673aIP:5000/email_submit \u51fa\u73b0\u4e0b\u9762\u754c\u9762\uff0c\u5219\u955c\u50cf\u5de5\u4f5c\u6b63\u5e38","title":"2. \u5236\u4f5c\u955c\u50cf"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/06-Docker-%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/","text":"Docker \u81ea\u52a8\u6784\u5efa\u955c\u50cf \u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 Dockerfile \u6784\u5efa\u955c\u50cf\uff0cDockerfile \u5176\u5b9e\u5c31\u662f\u628a\u6211\u4eec\u524d\u9762\u7684\u4e00\u7cfb\u5217\u5b89\u88c5\u3001\u914d\u7f6e\u547d\u4ee4\u5199\u5230\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u901a\u8fc7 docker build \u547d\u4ee4\uff0c\u4e00\u952e\u5b8c\u6210\u955c\u50cf\u7684\u6784\u5efa\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4ee5 python3.7.5 \u4f5c\u4e3a\u57fa\u7840\u955c\u50cf\uff0c\u6765\u6784\u5efa\u6211\u4eec\u81ea\u5df1\u7684\u955c\u50cf\u3002 1. Dockfile \u7f16\u5199 # \u7ee7\u627f\u7684\u57fa\u7840\u955c\u50cf FROM python : 3.7.5 MAINTAINER \"wechat:chinesecpp, email:chinacpp@hotmail.com\" # \u5b89\u88c5 app \u9700\u8981\u7684 Python \u5305 RUN pip install pandas flask scikit - learn jieba zhconv - i https : // pypi . tuna . tsinghua . edu . cn / simple # \u8bbe\u7f6e\u5de5\u4f5c\u76ee\u5f55 WORKDIR / root / app # COPY \u547d\u4ee4\u4f7f\u7528\u7684\u662f\u76f8\u5bf9\u8def\u5f84 COPY app / / root / app # \u663e\u5f0f\u58f0\u660e\u5bb9\u5668\u670d\u52a1\u76d1\u542c\u7684\u7aef\u53e3 EXPOSE 5000 # \u5f53\u542f\u52a8\u5bb9\u5668\u65f6\u9ed8\u8ba4\u6267\u884c\u7684\u547d\u4ee4 CMD [ \"python\" , \"app.py\" ] \u63a5\u4e0b\u6765\uff0c\u4f7f\u7528\u4e0b\u9762\u547d\u4ee4\u6784\u5efa Docker \u955c\u50cf\uff1a docker build - t spam : 1.0 . 2. \u955c\u50cf\u4f7f\u7528 \u955c\u50cf\u6784\u5efa\u5b8c\u6210\u4e4b\u540e\uff0c\u542f\u52a8\u955c\u50cf\u521b\u5efa\u5bb9\u5668\u5b9e\u4f8b\uff1a docker run - d - p 8000 : 5000 spam : 1.0 \u6301\u4e45\u5316\u672c\u5730\u5b58\u50a8\u955c\u50cf: docker save spam : 1.0 - o spam . tar","title":"Docker \u81ea\u52a8\u6784\u5efa\u955c\u50cf"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/06-Docker-%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/#docker","text":"\u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u7528 Dockerfile \u6784\u5efa\u955c\u50cf\uff0cDockerfile \u5176\u5b9e\u5c31\u662f\u628a\u6211\u4eec\u524d\u9762\u7684\u4e00\u7cfb\u5217\u5b89\u88c5\u3001\u914d\u7f6e\u547d\u4ee4\u5199\u5230\u4e00\u4e2a\u6587\u4ef6\u4e2d\uff0c\u901a\u8fc7 docker build \u547d\u4ee4\uff0c\u4e00\u952e\u5b8c\u6210\u955c\u50cf\u7684\u6784\u5efa\u3002\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u4ee5 python3.7.5 \u4f5c\u4e3a\u57fa\u7840\u955c\u50cf\uff0c\u6765\u6784\u5efa\u6211\u4eec\u81ea\u5df1\u7684\u955c\u50cf\u3002","title":"Docker \u81ea\u52a8\u6784\u5efa\u955c\u50cf"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/06-Docker-%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/#1-dockfile","text":"# \u7ee7\u627f\u7684\u57fa\u7840\u955c\u50cf FROM python : 3.7.5 MAINTAINER \"wechat:chinesecpp, email:chinacpp@hotmail.com\" # \u5b89\u88c5 app \u9700\u8981\u7684 Python \u5305 RUN pip install pandas flask scikit - learn jieba zhconv - i https : // pypi . tuna . tsinghua . edu . cn / simple # \u8bbe\u7f6e\u5de5\u4f5c\u76ee\u5f55 WORKDIR / root / app # COPY \u547d\u4ee4\u4f7f\u7528\u7684\u662f\u76f8\u5bf9\u8def\u5f84 COPY app / / root / app # \u663e\u5f0f\u58f0\u660e\u5bb9\u5668\u670d\u52a1\u76d1\u542c\u7684\u7aef\u53e3 EXPOSE 5000 # \u5f53\u542f\u52a8\u5bb9\u5668\u65f6\u9ed8\u8ba4\u6267\u884c\u7684\u547d\u4ee4 CMD [ \"python\" , \"app.py\" ] \u63a5\u4e0b\u6765\uff0c\u4f7f\u7528\u4e0b\u9762\u547d\u4ee4\u6784\u5efa Docker \u955c\u50cf\uff1a docker build - t spam : 1.0 .","title":"1. Dockfile \u7f16\u5199"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/06-Docker-%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E9%95%9C%E5%83%8F/#2","text":"\u955c\u50cf\u6784\u5efa\u5b8c\u6210\u4e4b\u540e\uff0c\u542f\u52a8\u955c\u50cf\u521b\u5efa\u5bb9\u5668\u5b9e\u4f8b\uff1a docker run - d - p 8000 : 5000 spam : 1.0 \u6301\u4e45\u5316\u672c\u5730\u5b58\u50a8\u955c\u50cf: docker save spam : 1.0 - o spam . tar","title":"2. \u955c\u50cf\u4f7f\u7528"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/07-Docker-%E9%95%9C%E5%83%8F%E6%8E%A8%E9%80%81/","text":"Docker \u955c\u50cf\u63a8\u9001 \u5c06Docker\u955c\u50cf\u63a8\u9001\u5230Docker Hub \u63a8\u9001 Docker \u955c\u50cf\u5230 Docker Hub \u9700\u8981\u4ee5\u4e0b\u51e0\u6b65\uff1a \u521b\u5efa Docker Hub \u8d26\u6237 \uff1a\u8bbf\u95ee Docker Hub \uff0c\u7136\u540e\u6309\u7167\u63d0\u793a\u521b\u5efa\u4e00\u4e2a\u65b0\u8d26\u6237\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u6709\u4e00\u4e2a\u8d26\u6237\uff0c\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u6b65\u3002 \u5728 Docker Hub \u4e0a\u521b\u5efa\u65b0\u7684\u4ed3\u5e93 \uff1a\u767b\u5f55\u4f60\u7684 Docker Hub \u8d26\u6237\uff0c\u7136\u540e\u5728 Dashboard \u4e2d\u9009\u62e9 \"Create Repository\"\u3002\u5728\u521b\u5efa\u4ed3\u5e93\u7684\u754c\u9762\u4e2d\uff0c\u8f93\u5165\u4f60\u7684\u4ed3\u5e93\u540d\uff08\u4f8b\u5982 \"my-application\"\uff09\uff0c\u7136\u540e\u9009\u62e9 \"Create\"\u3002 \u5728\u672c\u5730\u767b\u5f55 Docker \uff1a\u5728\u4f60\u7684\u547d\u4ee4\u884c\u4e2d\u8f93\u5165 docker login \uff0c\u7136\u540e\u6309\u7167\u63d0\u793a\u8f93\u5165\u4f60\u7684 Docker Hub \u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 \u6807\u8bb0\u4f60\u7684 Docker \u955c\u50cf \uff1a\u5728\u4f60\u63a8\u9001\u955c\u50cf\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u7ed9\u4f60\u7684\u955c\u50cf\u6dfb\u52a0\u4e00\u4e2a\u6807\u7b7e\uff0c\u8fd9\u4e2a\u6807\u7b7e\u5e94\u8be5\u4e0e\u4f60\u7684 Docker Hub \u4ed3\u5e93\u7684\u5730\u5740\u76f8\u5339\u914d\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 docker tag \u547d\u4ee4\u6765\u7ed9\u4f60\u7684\u955c\u50cf\u6dfb\u52a0\u6807\u7b7e\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u7684 Docker Hub \u7528\u6237\u540d\u662f \"myusername\"\uff0c\u4f60\u7684\u4ed3\u5e93\u540d\u662f \"my-application\"\uff0c\u4f60\u7684\u955c\u50cf\u540d\u662f \"my-application\"\uff0c\u4f60\u53ef\u4ee5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u6dfb\u52a0\u6807\u7b7e\uff1a docker tag my-application myusername/my-application \u5728\u8fd9\u4e2a\u547d\u4ee4\u4e2d\uff0c my-application \u662f\u4f60\u672c\u5730\u7684\u955c\u50cf\u540d\uff0c myusername/my-application \u662f\u4f60\u7684 Docker Hub \u4ed3\u5e93\u5730\u5740\u3002 \u63a8\u9001\u4f60\u7684 Docker \u955c\u50cf \uff1a\u6700\u540e\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 docker push \u547d\u4ee4\u6765\u63a8\u9001\u4f60\u7684\u955c\u50cf\u5230 Docker Hub\u3002\u4f8b\u5982\uff1a docker push myusername/my-application \u8fd9\u4e2a\u547d\u4ee4\u4f1a\u5c06\u4f60\u7684 \"my-application\" \u955c\u50cf\u63a8\u9001\u5230\u4f60\u7684 Docker Hub \u4ed3\u5e93\u3002 \u5b8c\u6210\u8fd9\u4e9b\u6b65\u9aa4\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u5728 Docker Hub \u4e0a\u770b\u5230\u4f60\u7684 Docker \u955c\u50cf\u4e86\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728\u4efb\u4f55\u6709 Docker \u7684\u673a\u5668\u4e0a\u4f7f\u7528 docker pull \u547d\u4ee4\u6765\u4e0b\u8f7d\u548c\u8fd0\u884c\u4f60\u7684\u955c\u50cf\u3002","title":"Docker \u955c\u50cf\u63a8\u9001"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/07-Docker-%E9%95%9C%E5%83%8F%E6%8E%A8%E9%80%81/#docker","text":"","title":"Docker \u955c\u50cf\u63a8\u9001"},{"location":"03-%E5%AE%B9%E5%99%A8%E9%83%A8%E7%BD%B2/07-Docker-%E9%95%9C%E5%83%8F%E6%8E%A8%E9%80%81/#dockerdocker-hub","text":"\u63a8\u9001 Docker \u955c\u50cf\u5230 Docker Hub \u9700\u8981\u4ee5\u4e0b\u51e0\u6b65\uff1a \u521b\u5efa Docker Hub \u8d26\u6237 \uff1a\u8bbf\u95ee Docker Hub \uff0c\u7136\u540e\u6309\u7167\u63d0\u793a\u521b\u5efa\u4e00\u4e2a\u65b0\u8d26\u6237\u3002\u5982\u679c\u4f60\u5df2\u7ecf\u6709\u4e00\u4e2a\u8d26\u6237\uff0c\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u4e00\u6b65\u3002 \u5728 Docker Hub \u4e0a\u521b\u5efa\u65b0\u7684\u4ed3\u5e93 \uff1a\u767b\u5f55\u4f60\u7684 Docker Hub \u8d26\u6237\uff0c\u7136\u540e\u5728 Dashboard \u4e2d\u9009\u62e9 \"Create Repository\"\u3002\u5728\u521b\u5efa\u4ed3\u5e93\u7684\u754c\u9762\u4e2d\uff0c\u8f93\u5165\u4f60\u7684\u4ed3\u5e93\u540d\uff08\u4f8b\u5982 \"my-application\"\uff09\uff0c\u7136\u540e\u9009\u62e9 \"Create\"\u3002 \u5728\u672c\u5730\u767b\u5f55 Docker \uff1a\u5728\u4f60\u7684\u547d\u4ee4\u884c\u4e2d\u8f93\u5165 docker login \uff0c\u7136\u540e\u6309\u7167\u63d0\u793a\u8f93\u5165\u4f60\u7684 Docker Hub \u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 \u6807\u8bb0\u4f60\u7684 Docker \u955c\u50cf \uff1a\u5728\u4f60\u63a8\u9001\u955c\u50cf\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u7ed9\u4f60\u7684\u955c\u50cf\u6dfb\u52a0\u4e00\u4e2a\u6807\u7b7e\uff0c\u8fd9\u4e2a\u6807\u7b7e\u5e94\u8be5\u4e0e\u4f60\u7684 Docker Hub \u4ed3\u5e93\u7684\u5730\u5740\u76f8\u5339\u914d\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 docker tag \u547d\u4ee4\u6765\u7ed9\u4f60\u7684\u955c\u50cf\u6dfb\u52a0\u6807\u7b7e\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u7684 Docker Hub \u7528\u6237\u540d\u662f \"myusername\"\uff0c\u4f60\u7684\u4ed3\u5e93\u540d\u662f \"my-application\"\uff0c\u4f60\u7684\u955c\u50cf\u540d\u662f \"my-application\"\uff0c\u4f60\u53ef\u4ee5\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u6dfb\u52a0\u6807\u7b7e\uff1a docker tag my-application myusername/my-application \u5728\u8fd9\u4e2a\u547d\u4ee4\u4e2d\uff0c my-application \u662f\u4f60\u672c\u5730\u7684\u955c\u50cf\u540d\uff0c myusername/my-application \u662f\u4f60\u7684 Docker Hub \u4ed3\u5e93\u5730\u5740\u3002 \u63a8\u9001\u4f60\u7684 Docker \u955c\u50cf \uff1a\u6700\u540e\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528 docker push \u547d\u4ee4\u6765\u63a8\u9001\u4f60\u7684\u955c\u50cf\u5230 Docker Hub\u3002\u4f8b\u5982\uff1a docker push myusername/my-application \u8fd9\u4e2a\u547d\u4ee4\u4f1a\u5c06\u4f60\u7684 \"my-application\" \u955c\u50cf\u63a8\u9001\u5230\u4f60\u7684 Docker Hub \u4ed3\u5e93\u3002 \u5b8c\u6210\u8fd9\u4e9b\u6b65\u9aa4\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u5728 Docker Hub \u4e0a\u770b\u5230\u4f60\u7684 Docker \u955c\u50cf\u4e86\uff0c\u4f60\u4e5f\u53ef\u4ee5\u5728\u4efb\u4f55\u6709 Docker \u7684\u673a\u5668\u4e0a\u4f7f\u7528 docker pull \u547d\u4ee4\u6765\u4e0b\u8f7d\u548c\u8fd0\u884c\u4f60\u7684\u955c\u50cf\u3002","title":"\u5c06Docker\u955c\u50cf\u63a8\u9001\u5230Docker Hub"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/00-README/","text":"Gradio\u670d\u52a1\u63a5\u53e3 \u4e3b\u8981\u5185\u5bb9 \u5728\u8fd9\u4e00\u5c0f\u8282\uff0c\u6211\u4eec\u5c06\u4f1a\u4f7f\u7528Gradio\u6846\u67b6\u6765\u5b9e\u73b0\u4ece\u6d4f\u89c8\u5668\u8fdc\u7a0b\u8bbf\u95ee\u3001\u4f7f\u7528\u6211\u4eec\u7684\u6a21\u578b\u670d\u52a1\u3002 \u672c\u5c0f\u8282\u4e3b\u8981\u5185\u5bb9\uff1a Gradio \u7b80\u4ecb\uff08\u5b98\u7f51\u5730\u5740\u3001\u4e3b\u8981\u7279\u70b9\uff09 Gradio \u5b89\u88c5&\u57fa\u672c\u7528\u6cd5\uff08\u73af\u5883\u8981\u6c42\u3001\u5b89\u88c5\u547d\u4ee4\u3001\u5feb\u901f\u5165\u95e8\uff09 Gradio \u57fa\u672c\u53c2\u6570\uff08Interface\u7c7b\u3001Blocks\u7c7b\uff09 Gradio \u5e94\u7528\u5206\u4eab\uff08\u4e92\u8054\u7f51\u5206\u4eab\u3001Huggingface\u6258\u7ba1\u3001 \u5c40\u57df\u7f51\u5206\u4eab\u3001\u5bc6\u7801\u9a8c\u8bc1\uff09 Gradio \u6848\u4f8b\u5347\u7ea7\uff08\u6587\u672c\u5206\u7c7b\u2014\u5783\u573e\u90ae\u4ef6\u5206\u7c7b\u3001\u56fe\u50cf\u5206\u7c7b\u3001\u56fe\u7247\u7b5b\u9009\u5668\uff09","title":"Gradio\u670d\u52a1\u63a5\u53e3"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/00-README/#gradio","text":"","title":"Gradio\u670d\u52a1\u63a5\u53e3"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/00-README/#_1","text":"\u5728\u8fd9\u4e00\u5c0f\u8282\uff0c\u6211\u4eec\u5c06\u4f1a\u4f7f\u7528Gradio\u6846\u67b6\u6765\u5b9e\u73b0\u4ece\u6d4f\u89c8\u5668\u8fdc\u7a0b\u8bbf\u95ee\u3001\u4f7f\u7528\u6211\u4eec\u7684\u6a21\u578b\u670d\u52a1\u3002 \u672c\u5c0f\u8282\u4e3b\u8981\u5185\u5bb9\uff1a Gradio \u7b80\u4ecb\uff08\u5b98\u7f51\u5730\u5740\u3001\u4e3b\u8981\u7279\u70b9\uff09 Gradio \u5b89\u88c5&\u57fa\u672c\u7528\u6cd5\uff08\u73af\u5883\u8981\u6c42\u3001\u5b89\u88c5\u547d\u4ee4\u3001\u5feb\u901f\u5165\u95e8\uff09 Gradio \u57fa\u672c\u53c2\u6570\uff08Interface\u7c7b\u3001Blocks\u7c7b\uff09 Gradio \u5e94\u7528\u5206\u4eab\uff08\u4e92\u8054\u7f51\u5206\u4eab\u3001Huggingface\u6258\u7ba1\u3001 \u5c40\u57df\u7f51\u5206\u4eab\u3001\u5bc6\u7801\u9a8c\u8bc1\uff09 Gradio \u6848\u4f8b\u5347\u7ea7\uff08\u6587\u672c\u5206\u7c7b\u2014\u5783\u573e\u90ae\u4ef6\u5206\u7c7b\u3001\u56fe\u50cf\u5206\u7c7b\u3001\u56fe\u7247\u7b5b\u9009\u5668\uff09","title":"\u4e3b\u8981\u5185\u5bb9"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/01-Gradio%E7%AE%80%E4%BB%8B/","text":"Gradio \u7b80\u4ecb Gradio\u5b98\u7f51\u94fe\u63a5\uff1a https://gradio.app/ Gradio\u5b98\u65b9GitHub\u4ed3\u5e93\uff1a https://github.com/gradio-app/gradio Gradio\u5b98\u65b9\u6587\u6863\uff1a https://www.gradio.app/guides/quickstart \u5e38\u7528\u7684\u4e24\u6b3eAI\u53ef\u89c6\u5316\u4ea4\u4e92\u5e94\u7528\u6bd4\u8f83\uff1a \uff081\uff09Gradio \u4ee3\u7801\u7ed3\u6784\u7b80\u5355 \uff1a\u4ee3\u7801\u7ed3\u6784\u76f8\u6bd4Streamlit\u7b80\u5355\uff0c\u53ea\u9700\u7b80\u5355\u5b9a\u4e49\u8f93\u5165\u548c\u8f93\u51fa\u63a5\u53e3\u5373\u53ef\u5feb\u901f\u6784\u5efa\u7b80\u5355\u7684\u4ea4\u4e92\u9875\u9762\uff0c\u66f4\u8f7b\u677e\u90e8\u7f72\u6a21\u578b\u3002 \u5feb\u901f\u5206\u4eab \uff1aGradio\u53ef\u4ee5\u5728\u542f\u52a8\u5e94\u7528\u65f6\u8bbe\u7f6eshare=True\u53c2\u6570\u521b\u5efa\u5916\u90e8\u5206\u4eab\u94fe\u63a5\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u5fae\u4fe1\u4e2d\u5206\u4eab\u7ed9\u7528\u6237\u4f7f\u7528\u3002 \u5bb9\u6613\u8c03\u8bd5 \uff1aGradio\u53ef\u4ee5\u5728jupyter\u4e2d\u76f4\u63a5\u5c55\u793a\u9875\u9762\uff0c\u66f4\u52a0\u65b9\u4fbf\u8c03\u8bd5\u3002 \uff082\uff09Streamlit \u53ef\u6269\u5c55\u6027\u597d \uff1a\u76f8\u6bd4Gradio\u590d\u6742\uff0c\u5b8c\u5168\u719f\u7ec3\u4f7f\u7528\u9700\u8981\u4e00\u5b9a\u65f6\u95f4\u3002\u53ef\u4ee5\u4f7f\u7528Python\u7f16\u5199\u5b8c\u6574\u7684\u5305\u542b\u524d\u540e\u7aef\u7684\u4ea4\u4e92\u5f0f\u5e94\u7528\u3002 \u9002\u5e94\u573a\u666f\u4e30\u5bcc \uff1a\u9002\u5408\u573a\u666f\u76f8\u5bf9\u590d\u6742\uff0c\u60f3\u8981\u6784\u5efa\u4e30\u5bcc\u591a\u6837\u4ea4\u4e92\u9875\u9762\u7684\u5f00\u53d1\u8005\u3002","title":"Gradio \u7b80\u4ecb"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/01-Gradio%E7%AE%80%E4%BB%8B/#gradio","text":"Gradio\u5b98\u7f51\u94fe\u63a5\uff1a https://gradio.app/ Gradio\u5b98\u65b9GitHub\u4ed3\u5e93\uff1a https://github.com/gradio-app/gradio Gradio\u5b98\u65b9\u6587\u6863\uff1a https://www.gradio.app/guides/quickstart \u5e38\u7528\u7684\u4e24\u6b3eAI\u53ef\u89c6\u5316\u4ea4\u4e92\u5e94\u7528\u6bd4\u8f83\uff1a \uff081\uff09Gradio \u4ee3\u7801\u7ed3\u6784\u7b80\u5355 \uff1a\u4ee3\u7801\u7ed3\u6784\u76f8\u6bd4Streamlit\u7b80\u5355\uff0c\u53ea\u9700\u7b80\u5355\u5b9a\u4e49\u8f93\u5165\u548c\u8f93\u51fa\u63a5\u53e3\u5373\u53ef\u5feb\u901f\u6784\u5efa\u7b80\u5355\u7684\u4ea4\u4e92\u9875\u9762\uff0c\u66f4\u8f7b\u677e\u90e8\u7f72\u6a21\u578b\u3002 \u5feb\u901f\u5206\u4eab \uff1aGradio\u53ef\u4ee5\u5728\u542f\u52a8\u5e94\u7528\u65f6\u8bbe\u7f6eshare=True\u53c2\u6570\u521b\u5efa\u5916\u90e8\u5206\u4eab\u94fe\u63a5\uff0c\u53ef\u4ee5\u76f4\u63a5\u5728\u5fae\u4fe1\u4e2d\u5206\u4eab\u7ed9\u7528\u6237\u4f7f\u7528\u3002 \u5bb9\u6613\u8c03\u8bd5 \uff1aGradio\u53ef\u4ee5\u5728jupyter\u4e2d\u76f4\u63a5\u5c55\u793a\u9875\u9762\uff0c\u66f4\u52a0\u65b9\u4fbf\u8c03\u8bd5\u3002 \uff082\uff09Streamlit \u53ef\u6269\u5c55\u6027\u597d \uff1a\u76f8\u6bd4Gradio\u590d\u6742\uff0c\u5b8c\u5168\u719f\u7ec3\u4f7f\u7528\u9700\u8981\u4e00\u5b9a\u65f6\u95f4\u3002\u53ef\u4ee5\u4f7f\u7528Python\u7f16\u5199\u5b8c\u6574\u7684\u5305\u542b\u524d\u540e\u7aef\u7684\u4ea4\u4e92\u5f0f\u5e94\u7528\u3002 \u9002\u5e94\u573a\u666f\u4e30\u5bcc \uff1a\u9002\u5408\u573a\u666f\u76f8\u5bf9\u590d\u6742\uff0c\u60f3\u8981\u6784\u5efa\u4e30\u5bcc\u591a\u6837\u4ea4\u4e92\u9875\u9762\u7684\u5f00\u53d1\u8005\u3002","title":"Gradio \u7b80\u4ecb"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/02-Gradio%E5%AE%89%E8%A3%85%26%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/","text":"Gradio \u5b89\u88c5&\u57fa\u672c\u7528\u6cd5 1.\u73af\u5883\u8981\u6c42\u548c\u5b89\u88c5\u547d\u4ee4 Python\u7b2c\u4e09\u65b9\u5e93Gradio\u5feb\u901f\u4e0a\u624b\uff0c\u5f53\u524d\u7248\u672cV4.21.0 * python\u7248\u672c\u8981\u6c423.8\u53ca\u4ee5\u4e0a pip install gradio #\u4e3a\u4e86\u66f4\u5feb\u5b89\u88c5\uff0c\u53ef\u4ee5\u4f7f\u7528\u6e05\u534e\u955c\u50cf\u6e90 pip install gradio - i https : // pypi . tuna . tsinghua . edu . cn / simple \u5b89\u88c5\u5b8c\u76f4\u63a5\u5728IDE\u4e0a\u542f\u52a8\u5feb\u901f\uff0c 2.\u5feb\u901f\u5165\u95e8 # \u5bfc\u5165\u4f9d\u8d56\u5305Gradio import gradio as gr # \u8f93\u5165\u6587\u672c\u5904\u7406\u7a0b\u5e8f def greet ( name ): return \"Hello \" + name + \"!\" # \u63a5\u53e3\u521b\u5efa\u51fd\u6570 # fn\u8bbe\u7f6e\u5904\u7406\u51fd\u6570\uff0cinputs\u8bbe\u7f6e\u8f93\u5165\u63a5\u53e3\u7ec4\u4ef6\uff0coutputs\u8bbe\u7f6e\u8f93\u51fa\u63a5\u53e3\u7ec4\u4ef6 # fn,inputs,outputs\u90fd\u662f\u5fc5\u586b\u51fd\u6570 demo = gr . Interface ( fn = greet , inputs = \"text\" , outputs = \"text\" ) # \u542f\u52a8\u670d\u52a1\uff0c\u76d1\u542c\u7aef\u53e37860 demo . launch () \u8fd0\u884c\u7a0b\u5e8f\u540e\uff0c\u6253\u5f00 http://localhost:7860 \u5373\u53ef\u770b\u5230\u7f51\u9875\u6548\u679c\u3002\u5de6\u8fb9\u662f\u6587\u672c\u8f93\u5165\u6846\uff0c\u53f3\u8fb9\u662f\u7ed3\u679c\u5c55\u793a\u6846\u3002Clear\u6309\u94ae\u7528\u4e8e\u91cd\u7f6e\u7f51\u9875\u72b6\u6001\uff0cSubmit\u6309\u94ae\u7528\u4e8e\u6267\u884c\u5904\u7406\u7a0b\u5e8f\uff0cFlag\u6309\u94ae\u7528\u4e8e\u4fdd\u5b58\u7ed3\u679c\u5230\u672c\u5730\u3002 #\u6267\u884c\u7ed3\u679c Running on local URL : http : // 127.0.0.1 : 7860 To create a public link , set ` share = True ` in ` launch () ` . \u6253\u5f00\u6d4f\u89c8\u5668\u4f7f\u7528\u5373\u53ef","title":"Gradio \u5b89\u88c5&\u57fa\u672c\u7528\u6cd5"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/02-Gradio%E5%AE%89%E8%A3%85%26%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/#gradio","text":"","title":"Gradio \u5b89\u88c5&amp;\u57fa\u672c\u7528\u6cd5"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/02-Gradio%E5%AE%89%E8%A3%85%26%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/#1","text":"Python\u7b2c\u4e09\u65b9\u5e93Gradio\u5feb\u901f\u4e0a\u624b\uff0c\u5f53\u524d\u7248\u672cV4.21.0 * python\u7248\u672c\u8981\u6c423.8\u53ca\u4ee5\u4e0a pip install gradio #\u4e3a\u4e86\u66f4\u5feb\u5b89\u88c5\uff0c\u53ef\u4ee5\u4f7f\u7528\u6e05\u534e\u955c\u50cf\u6e90 pip install gradio - i https : // pypi . tuna . tsinghua . edu . cn / simple \u5b89\u88c5\u5b8c\u76f4\u63a5\u5728IDE\u4e0a\u542f\u52a8\u5feb\u901f\uff0c","title":"1.\u73af\u5883\u8981\u6c42\u548c\u5b89\u88c5\u547d\u4ee4"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/02-Gradio%E5%AE%89%E8%A3%85%26%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/#2","text":"# \u5bfc\u5165\u4f9d\u8d56\u5305Gradio import gradio as gr # \u8f93\u5165\u6587\u672c\u5904\u7406\u7a0b\u5e8f def greet ( name ): return \"Hello \" + name + \"!\" # \u63a5\u53e3\u521b\u5efa\u51fd\u6570 # fn\u8bbe\u7f6e\u5904\u7406\u51fd\u6570\uff0cinputs\u8bbe\u7f6e\u8f93\u5165\u63a5\u53e3\u7ec4\u4ef6\uff0coutputs\u8bbe\u7f6e\u8f93\u51fa\u63a5\u53e3\u7ec4\u4ef6 # fn,inputs,outputs\u90fd\u662f\u5fc5\u586b\u51fd\u6570 demo = gr . Interface ( fn = greet , inputs = \"text\" , outputs = \"text\" ) # \u542f\u52a8\u670d\u52a1\uff0c\u76d1\u542c\u7aef\u53e37860 demo . launch () \u8fd0\u884c\u7a0b\u5e8f\u540e\uff0c\u6253\u5f00 http://localhost:7860 \u5373\u53ef\u770b\u5230\u7f51\u9875\u6548\u679c\u3002\u5de6\u8fb9\u662f\u6587\u672c\u8f93\u5165\u6846\uff0c\u53f3\u8fb9\u662f\u7ed3\u679c\u5c55\u793a\u6846\u3002Clear\u6309\u94ae\u7528\u4e8e\u91cd\u7f6e\u7f51\u9875\u72b6\u6001\uff0cSubmit\u6309\u94ae\u7528\u4e8e\u6267\u884c\u5904\u7406\u7a0b\u5e8f\uff0cFlag\u6309\u94ae\u7528\u4e8e\u4fdd\u5b58\u7ed3\u679c\u5230\u672c\u5730\u3002 #\u6267\u884c\u7ed3\u679c Running on local URL : http : // 127.0.0.1 : 7860 To create a public link , set ` share = True ` in ` launch () ` . \u6253\u5f00\u6d4f\u89c8\u5668\u4f7f\u7528\u5373\u53ef","title":"2.\u5feb\u901f\u5165\u95e8"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/","text":"Gradio \u57fa\u672c\u53c2\u6570 1. Interface\u7c7b\u4ecb\u7ecd 1.1 Interface\u7c7b\u53ca\u57fa\u7840\u6a21\u5757 \uff081\uff09Interface\u7c7b Gradio \u53ef\u4ee5\u5305\u88c5\u51e0\u4e4e\u4efb\u4f55 Python \u51fd\u6570\u4e3a\u6613\u4e8e\u4f7f\u7528\u7684\u7528\u6237\u754c\u9762\u3002\u4ece\u4e0a\u9762\u4f8b\u5b50\u6211\u4eec\u770b\u5230\uff0c\u7b80\u5355\u7684\u57fa\u4e8e\u6587\u672c\u7684\u51fd\u6570\u3002\u4f46\u8fd9\u4e2a\u51fd\u6570\u8fd8\u53ef\u4ee5\u5904\u7406\u5f88\u591a\u7c7b\u578b\u3002 Interface\u7c7b\u901a\u8fc7\u4ee5\u4e0b\u4e09\u4e2a\u53c2\u6570\u8fdb\u884c\u521d\u59cb\u5316\uff1a fn\uff1a\u5305\u88c5\u7684\u51fd\u6570 inputs\uff1a\u8f93\u5165\u7ec4\u4ef6\u7c7b\u578b\uff0c\uff08\u4f8b\u5982\uff1a\u201ctext\u201d\u3001\"image\uff09 ouputs\uff1a\u8f93\u51fa\u7ec4\u4ef6\u7c7b\u578b\uff0c\uff08\u4f8b\u5982\uff1a\u201ctext\u201d\u3001\"image\uff09 \u901a\u8fc7\u8fd9\u4e09\u4e2a\u53c2\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u521b\u5efa\u4e00\u4e2a\u63a5\u53e3\u5e76\u53d1\u5e03\u4ed6\u4eec\u3002 \uff082\uff09 \u57fa\u7840\u6a21\u5757 \u6700\u5e38\u7528\u7684\u57fa\u7840\u6a21\u5757\u6784\u6210\u3002 2.1 \u5e94\u7528\u754c\u9762 gr.Interface(\u7b80\u6613\u573a\u666f) gr.Blocks(\u5b9a\u5236\u5316\u573a\u666f) 2.2 \u8f93\u5165\u8f93\u51fa gr.Image(\u56fe\u50cf) gr.Textbox(\u6587\u672c\u6846) gr.DataFrame(\u6570\u636e\u6846) gr.Dropdown(\u4e0b\u62c9\u9009\u9879) gr.Number(\u6570\u5b57) gr.Markdown(Markdown\u6587\u672c) gr.Files(\u6587\u4ef6) 2.3 \u63a7\u5236\u7ec4\u4ef6 gr.Button(\u6309\u94ae) 2.4 \u5e03\u5c40\u7ec4\u4ef6 gr.Tab(\u6807\u7b7e\u9875) gr.Row(\u884c\u5e03\u5c40) gr.Column(\u5217\u5e03\u5c40) 1.2 \u5e94\u7528\u5b9e\u4f8b \uff081\uff09\u81ea\u5b9a\u4e49\u8f93\u5165\u7ec4\u4ef6 import gradio as gr def greet ( name ): return \"Hello \" + name + \"!\" demo = gr . Interface ( fn = greet , # \u81ea\u5b9a\u4e49\u8f93\u5165\u6846 # \u5177\u4f53\u8bbe\u7f6e\u65b9\u6cd5\u67e5\u770b\u5b98\u65b9\u6587\u6863 inputs = gr . Textbox ( lines = 3 , placeholder = \"Name Here...\" , label = \"my input\" ), outputs = \"text\" , ) demo . launch () Interface.launch()\u65b9\u6cd5\u8fd4\u56de\u4e09\u4e2a\u503c app\uff0c\u4e3a Gradio \u6f14\u793a\u63d0\u4f9b\u652f\u6301\u7684 FastAPI \u5e94\u7528\u7a0b\u5e8f local_url\uff0c\u672c\u5730\u5730\u5740 share_url\uff0c\u516c\u5171\u5730\u5740\uff0c\u5f53share=True\u65f6\u751f\u6210 \uff082\uff09\u591a\u4e2a\u8f93\u5165\u548c\u8f93\u51fa \u5bf9\u4e8e\u590d\u6742\u7a0b\u5e8f\uff0c\u8f93\u5165\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u7ec4\u4ef6\u6309\u987a\u5e8f\u5bf9\u5e94\u4e8e\u51fd\u6570\u7684\u4e00\u4e2a\u53c2\u6570\u3002\u8f93\u51fa\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u7ec4\u4ef6\u6309\u987a\u5e8f\u6392\u5217\u5bf9\u5e94\u4e8e\u51fd\u6570\u8fd4\u56de\u7684\u4e00\u4e2a\u503c\u3002 import gradio as gr # \u8be5\u51fd\u6570\u67093\u4e2a\u8f93\u5165\u53c2\u6570\u548c2\u4e2a\u8f93\u51fa\u53c2\u6570 def greet ( name , is_morning , temperature ): salutation = \"Good morning\" if is_morning else \"Good evening\" greeting = f \" { salutation } { name } . It is { temperature } degrees today\" celsius = ( temperature - 32 ) * 5 / 9 return greeting , round ( celsius , 2 ) demo = gr . Interface ( fn = greet , # \u6309\u7167\u5904\u7406\u7a0b\u5e8f\u8bbe\u7f6e\u8f93\u5165\u7ec4\u4ef6 inputs = [ \"text\" , \"checkbox\" , gr . Slider ( 0 , 100 )], # \u6309\u7167\u5904\u7406\u7a0b\u5e8f\u8bbe\u7f6e\u8f93\u51fa\u7ec4\u4ef6 outputs = [ \"text\" , \"number\" ], ) demo . launch () inputs\u5217\u8868\u91cc\u7684\u6bcf\u4e2a\u5b57\u6bb5\u6309\u987a\u5e8f\u5bf9\u5e94\u51fd\u6570\u7684\u6bcf\u4e2a\u53c2\u6570\uff0coutputs\u540c\u7406\u3002 \uff083\uff09\u56fe\u50cf\u7ec4\u4ef6 Gradio\u652f\u6301\u8bb8\u591a\u7c7b\u578b\u7684\u7ec4\u4ef6\uff0c\u5982image\u3001dataframe\u3001video\u3002\u4f7f\u7528\u793a\u4f8b\u5982\u4e0b\uff1a import numpy as np import gradio as gr def sepia ( input_img ): # \u5904\u7406\u56fe\u50cf sepia_filter = np . array ([ [ 0.393 , 0.769 , 0.189 ], [ 0.349 , 0.686 , 0.168 ], [ 0.272 , 0.534 , 0.131 ] ]) sepia_img = input_img . dot ( sepia_filter . T ) sepia_img /= sepia_img . max () return sepia_img # shape\u8bbe\u7f6e\u8f93\u5165\u56fe\u50cf\u5927\u5c0f demo = gr . Interface ( sepia , gr . Image ( height = 200 , width = 200 ), \"image\" ) demo . launch () \uff084\uff09\u52a8\u6001\u754c\u9762\u63a5\u53e3\uff1a\u7b80\u5355\u8ba1\u7b97\u5668\u6a21\u677f\u5b9e\u65f6\u53d8\u5316 \u5728Interface\u6dfb\u52a0 live=True \u53c2\u6570\uff0c\u53ea\u8981\u8f93\u5165\u53d1\u751f\u53d8\u5316\uff0c\u7ed3\u679c\u9a6c\u4e0a\u53d1\u751f\u6539\u53d8\u3002 import gradio as gr def calculator ( num1 , operation , num2 ): if operation == \"add\" : return num1 + num2 elif operation == \"subtract\" : return num1 - num2 elif operation == \"multiply\" : return num1 * num2 elif operation == \"divide\" : return num1 / num2 demo = gr . Interface ( calculator , [ \"number\" , gr . Radio ([ \"add\" , \"subtract\" , \"multiply\" , \"divide\" ]), \"number\" ], \"number\" , live = True , ) demo . launch () \u7b80\u5355\u8ba1\u7b97\u5668\u5236\u4f5c import gradio as gr # \u4e00\u4e2a\u7b80\u5355\u8ba1\u7b97\u5668\uff0c\u542b\u5b9e\u4f8b\u8bf4\u660e def calculator ( num1 , operation , num2 ): if operation == \"add\" : return num1 + num2 elif operation == \"subtract\" : return num1 - num2 elif operation == \"multiply\" : return num1 * num2 elif operation == \"divide\" : if num2 == 0 : # \u8bbe\u7f6e\u62a5\u9519\u5f39\u7a97 raise gr . Error ( \"Cannot divide by zero!\" ) return num1 / num2 demo = gr . Interface ( calculator , # \u8bbe\u7f6e\u8f93\u5165 [ \"number\" , gr . Radio ([ \"add\" , \"subtract\" , \"multiply\" , \"divide\" ]), \"number\" ], # \u8bbe\u7f6e\u8f93\u51fa \"number\" , # \u8bbe\u7f6e\u8f93\u5165\u53c2\u6570\u793a\u4f8b examples = [ [ 5 , \"add\" , 3 ], [ 4 , \"divide\" , 2 ], [ - 4 , \"multiply\" , 2.5 ], [ 0 , \"subtract\" , 1.2 ], ], # \u8bbe\u7f6e\u7f51\u9875\u6807\u9898 title = \"Toy Calculator\" , # \u5de6\u4e0a\u89d2\u7684\u63cf\u8ff0\u6587\u5b57 description = \"Here's a sample toy calculator. Enjoy!\" , # \u5de6\u4e0b\u89d2\u7684\u6587\u5b57 article = \"Check out the examples\" , ) demo . launch () 2. Interface\u8fdb\u9636\u4f7f\u7528 2.1 Interface\u72b6\u6001 \uff081\uff09\u5168\u5c40\u53d8\u91cf \u5168\u5c40\u53d8\u91cf\u7684\u597d\u5904\u5c31\u662f\u5728\u8c03\u7528\u51fd\u6570\u540e\u4ecd\u7136\u80fd\u591f\u4fdd\u5b58\uff0c\u4f8b\u5982\u5728\u673a\u5668\u5b66\u4e60\u4e2d\u901a\u8fc7\u5168\u5c40\u53d8\u91cf\u4ece\u5916\u90e8\u52a0\u8f7d\u4e00\u4e2a\u5927\u578b\u6a21\u578b\uff0c\u5e76\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528\u5b83\uff0c\u4ee5\u4fbf\u6bcf\u6b21\u51fd\u6570\u8c03\u7528\u90fd\u4e0d\u9700\u8981\u91cd\u65b0\u52a0\u8f7d\u6a21\u578b\u3002\u4e0b\u9762\u5c31\u5c55\u793a\u4e86\u5168\u5c40\u53d8\u91cf\u4f7f\u7528\u7684\u597d\u5904\u3002 import gradio as gr scores = [] def track_score ( score ): scores . append ( score ) # \u8fd4\u56de\u5206\u6570top3 top_scores = sorted ( scores , reverse = True )[: 3 ] return top_scores demo = gr . Interface ( track_score , gr . Number ( label = \"Score\" ), gr . JSON ( label = \"Top Scores\" ) ) demo . launch () \uff082\uff09\u4f1a\u8bdd\u72b6\u6001 Gradio\u652f\u6301\u7684\u53e6\u4e00\u79cd\u6570\u636e\u6301\u4e45\u6027\u662f\u4f1a\u8bdd\u72b6\u6001\uff0c\u6570\u636e\u5728\u4e00\u4e2a\u9875\u9762\u4f1a\u8bdd\u4e2d\u7684\u591a\u6b21\u63d0\u4ea4\u4e2d\u6301\u4e45\u5b58\u5728\u3002\u7136\u800c\uff0c\u6570\u636e\u4e0d\u4f1a\u5728\u4f60\u6a21\u578b\u7684\u4e0d\u540c\u7528\u6237\u4e4b\u95f4\u5171\u4eab\u3002\u4f1a\u8bdd\u72b6\u6001\u7684\u5178\u578b\u4f8b\u5b50\u5c31\u662f\u804a\u5929\u673a\u5668\u4eba\uff0c\u4f60\u60f3\u8bbf\u95ee\u7528\u6237\u4e4b\u524d\u63d0\u4ea4\u7684\u4fe1\u606f\uff0c\u4f46\u4f60\u4e0d\u80fd\u5c06\u804a\u5929\u8bb0\u5f55\u5b58\u50a8\u5728\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u4e2d\uff0c\u56e0\u4e3a\u90a3\u6837\u7684\u8bdd\uff0c\u804a\u5929\u8bb0\u5f55\u4f1a\u5728\u4e0d\u540c\u7684\u7528\u6237\u4e4b\u95f4\u4e71\u6210\u4e00\u56e2\u3002\u6ce8\u610f\u8be5\u72b6\u6001\u4f1a\u5728\u6bcf\u4e2a\u9875\u9762\u5185\u7684\u63d0\u4ea4\u4e2d\u6301\u7eed\u5b58\u5728\uff0c\u4f46\u5982\u679c\u4f60\u5728\u53e6\u4e00\u4e2a\u6807\u7b7e\u9875\u4e2d\u52a0\u8f7d\u8be5\u6f14\u793a\uff08\u6216\u5237\u65b0\u9875\u9762\uff09\uff0c\u8be5\u6f14\u793a\u5c06\u4e0d\u4f1a\u5171\u4eab\u804a\u5929\u5386\u53f2\u3002 \u8981\u5728\u4f1a\u8bdd\u72b6\u6001\u4e0b\u5b58\u50a8\u6570\u636e\uff0c\u9700\u8981\u505a\u4e09\u4ef6\u4e8b\uff1a \u5728\u4f60\u7684\u51fd\u6570\u4e2d\u4f20\u5165\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff0c\u5b83\u4ee3\u8868\u754c\u9762\u7684\u72b6\u6001\u3002 \u5728\u51fd\u6570\u7684\u6700\u540e\uff0c\u5c06\u72b6\u6001\u7684\u66f4\u65b0\u503c\u4f5c\u4e3a\u4e00\u4e2a\u989d\u5916\u7684\u8fd4\u56de\u503c\u8fd4\u56de\u3002 \u5728\u6dfb\u52a0\u8f93\u5165\u548c\u8f93\u51fa\u65f6\u6dfb\u52a0state\u7ec4\u4ef6\u3002 import random import gradio as gr def chat ( message , history ): history = history or [] message = message . lower () if message . startswith ( \"how many\" ): response = random . randint ( 1 , 10 ) elif message . startswith ( \"how\" ): response = random . choice ([ \"Great\" , \"Good\" , \"Okay\" , \"Bad\" ]) elif message . startswith ( \"where\" ): response = random . choice ([ \"Here\" , \"There\" , \"Somewhere\" ]) else : response = \"I don't know\" history . append (( message , response )) return history , history # \u8bbe\u7f6e\u4e00\u4e2a\u5bf9\u8bdd\u7a97 chatbot = gr . Chatbot () demo = gr . Interface ( chat , # \u6dfb\u52a0state\u7ec4\u4ef6 [ \"text\" , \"state\" ], [ chatbot , \"state\" ], # \u8bbe\u7f6e\u6ca1\u6709\u4fdd\u5b58\u6570\u636e\u7684\u6309\u94ae allow_flagging = \"never\" , ) demo . launch () 3. \u81ea\u5b9a\u5236\u7ec4\u4ef6\uff1aBlocks\u6784\u5efa\u5e94\u7528 \u76f8\u6bd4Interface\uff0cBlocks\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f4e\u7ea7\u522b\u7684API\uff0c\u7528\u4e8e\u8bbe\u8ba1\u5177\u6709\u66f4\u7075\u6d3b\u5e03\u5c40\u548c\u6570\u636e\u6d41\u7684\u7f51\u7edc\u5e94\u7528\u3002Blocks\u5141\u8bb8\u63a7\u5236\u7ec4\u4ef6\u5728\u9875\u9762\u4e0a\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5904\u7406\u590d\u6742\u7684\u6570\u636e\u6d41\uff08\u4f8b\u5982\uff0c\u8f93\u51fa\u53ef\u4ee5\u4f5c\u4e3a\u5176\u4ed6\u51fd\u6570\u7684\u8f93\u5165\uff09\uff0c\u5e76\u6839\u636e\u7528\u6237\u4ea4\u4e92\u66f4\u65b0\u7ec4\u4ef6\u7684\u5c5e\u6027\u53ef\u89c1\u6027\u3002\u53ef\u4ee5\u5b9a\u5236\u66f4\u591a\u7ec4\u4ef6\uff0c \u66f4\u591a\u8be6\u7ec6\u5b9a\u5236\u53ef\u67e5\u770b\u6587\u6863 3.1 \u7b80\u5355\u6f14\u793a import gradio as gr def greet ( name ): return \"Hello \" + name + \"!\" with gr . Blocks () as demo : # \u8bbe\u7f6e\u8f93\u5165\u7ec4\u4ef6 name = gr . Textbox ( label = \"Name\" ) # \u8bbe\u7f6e\u8f93\u51fa\u7ec4\u4ef6 output = gr . Textbox ( label = \"Output Box\" ) # \u8bbe\u7f6e\u6309\u94ae greet_btn = gr . Button ( \"Greet\" ) # \u8bbe\u7f6e\u6309\u94ae\u70b9\u51fb\u4e8b\u4ef6 greet_btn . click ( fn = greet , inputs = name , outputs = output ) demo . launch () Blocks\u65b9\u5f0f\u9700\u8981with\u8bed\u53e5\u6dfb\u52a0\u7ec4\u4ef6\uff0c\u5982\u679c\u4e0d\u8bbe\u7f6e\u5e03\u5c40\u65b9\u5f0f\uff0c\u90a3\u4e48\u7ec4\u4ef6\u5c06\u6309\u7167\u521b\u5efa\u7684\u987a\u5e8f\u5782\u76f4\u51fa\u73b0\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u8fd0\u884c\u754c\u9762 3.2 \u591a\u6a21\u5757\u5e94\u7528 import numpy as np import gradio as gr def flip_text ( x ): return x [:: - 1 ] def flip_image ( x ): return np . fliplr ( x ) with gr . Blocks () as demo : # \u7528markdown\u8bed\u6cd5\u7f16\u8f91\u8f93\u51fa\u4e00\u6bb5\u8bdd gr . Markdown ( \"Flip text or image files using this demo.\" ) # \u8bbe\u7f6etab\u9009\u9879\u5361 with gr . Tab ( \"Flip Text\" ): # Blocks\u7279\u6709\u7ec4\u4ef6\uff0c\u8bbe\u7f6e\u6240\u6709\u5b50\u7ec4\u4ef6\u6309\u5782\u76f4\u6392\u5217 # \u5782\u76f4\u6392\u5217\u662f\u9ed8\u8ba4\u60c5\u51b5\uff0c\u4e0d\u52a0\u4e5f\u6ca1\u5173\u7cfb with gr . Column (): text_input = gr . Textbox () text_output = gr . Textbox () text_button = gr . Button ( \"Flip\" ) with gr . Tab ( \"Flip Image\" ): # Blocks\u7279\u6709\u7ec4\u4ef6\uff0c\u8bbe\u7f6e\u6240\u6709\u5b50\u7ec4\u4ef6\u6309\u6c34\u5e73\u6392\u5217 with gr . Row (): image_input = gr . Image () image_output = gr . Image () image_button = gr . Button ( \"Flip\" ) # \u8bbe\u7f6e\u6298\u53e0\u5185\u5bb9 with gr . Accordion ( \"Open for More!\" ): gr . Markdown ( \"Look at me...\" ) text_button . click ( flip_text , inputs = text_input , outputs = text_output ) image_button . click ( flip_image , inputs = image_input , outputs = image_output ) demo . launch () 3.3 Flagging\u6807\u8bb0 \u76f8\u4fe1\u6709\u5c0f\u4f19\u4f34\u5df2\u7ecf\u6ce8\u610f\u5230\uff0c\u8f93\u51fa\u6846\u4e0b\u6709\u4e2aFlag\u6309\u94ae\u3002\u5f53\u6d4b\u8bd5\u60a8\u7684\u6a21\u578b\u7684\u7528\u6237\u770b\u5230\u67d0\u4e2a\u8f93\u5165\u5bfc\u81f4\u8f93\u51fa\u9519\u8bef\u6216\u610f\u5916\u7684\u6a21\u578b\u884c\u4e3a\uff0c\u4ed6\u4eec\u53ef\u4ee5\u6807\u8bb0\u8fd9\u4e2a\u8f93\u5165\u8ba9\u5f00\u53d1\u8005\u77e5\u9053\u3002\u8fd9\u4e2a\u6587\u4ef6\u5939\u7531Interface\u7684flagging_dir\u53c2\u6570\u6307\u5b9a\uff0c\u9ed8\u8ba4\u4e3a\u2019flagged\u2019\u3002\u5c06\u8fd9\u4e9b\u4f1a\u5bfc\u81f4\u9519\u8bef\u7684\u8f93\u5165\u4fdd\u5b58\u5230\u4e00\u4e2acsv\u6587\u4ef6\u3002\u5982\u679cInterface\u5305\u542b\u6587\u4ef6\u6570\u636e\uff0c\u6587\u4ef6\u5939\u4e5f\u4f1a\u521b\u5efa\u6765\u4fdd\u5b58\u8fd9\u4e9b\u6807\u8bb0\u6570\u636e\u3002 \u6253\u5f00log.csv\u5c55\u793a\u5982\u4e0b\uff1a 3.4 \u6837\u5f0f\u3001\u961f\u5217\u3001\u751f\u6210\u5668 \u6837\u5f0f \u5728Gradio\u5b98\u65b9\u6587\u6863\uff0c\u641c\u7d22\u4e0d\u540c\u7684\u7ec4\u4ef6\u52a0.style\uff08\u5982image.style\uff09\uff0c\u53ef\u4ee5\u83b7\u53d6\u8be5\u7ec4\u4ef6\u7684\u6837\u5f0f\u53c2\u6570\u8bbe\u7f6e\u6837\u4f8b\u3002\u4f8b\u5982image\u7ec4\u4ef6\u7684\u8bbe\u7f6e\u5982\u4e0b\uff1a img = gr . Image ( \"lion.jpg\" ) . style ( height = '24' , rounded = False ) \u961f\u5217 \u5982\u679c\u51fd\u6570\u63a8\u7406\u65f6\u95f4\u8f83\u957f\uff0c\u6bd4\u5982\u76ee\u6807\u68c0\u6d4b\uff1b\u6216\u8005\u5e94\u7528\u7a0b\u5e8f\u5904\u7406\u6d41\u91cf\u8fc7\u5927\uff0c\u5219\u9700\u8981\u4f7f\u7528queue\u65b9\u6cd5\u8fdb\u884c\u6392\u961f\u3002queue\u65b9\u6cd5\u4f7f\u7528websockets\uff0c\u53ef\u4ee5\u9632\u6b62\u7f51\u7edc\u8d85\u65f6\u3002\u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b\uff1a demo = gr . Interface ( ... ) . queue () demo . launch () #\u6216 with gr . Blocks () as demo : #... demo . queue () demo . launch () \u751f\u6210\u5668 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u60f3\u663e\u793a\u4e00\u8fde\u4e32\u7684\u8f93\u51fa\uff0c\u800c\u4e0d\u662f\u5355\u4e00\u7684\u8f93\u51fa\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u80fd\u6709\u4e00\u4e2a\u56fe\u50cf\u751f\u6210\u6a21\u578b\uff0c\u5982\u679c\u4f60\u60f3\u663e\u793a\u5728\u6bcf\u4e2a\u6b65\u9aa4\u4e2d\u751f\u6210\u7684\u56fe\u50cf\uff0c\u4ece\u800c\u5f97\u5230\u6700\u7ec8\u7684\u56fe\u50cf\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5411Gradio\u63d0\u4f9b\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u5e38\u89c4\u51fd\u6570\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u751f\u6210\u5668\u7684\u4f8b\u5b50\uff0c\u6bcf\u96941\u79d2\u8fd4\u56de1\u5f20\u56fe\u7247\u3002 import gradio as gr import numpy as np import time # \u751f\u6210steps\u5f20\u56fe\u7247\uff0c\u6bcf\u96941\u79d2\u949f\u8fd4\u56de def fake_diffusion ( steps ): for _ in range ( steps ): time . sleep ( 1 ) image = np . random . randint ( 255 , size = ( 300 , 600 , 3 )) yield image demo = gr . Interface ( fake_diffusion , # \u8bbe\u7f6e\u6ed1\u7a97\uff0c\u6700\u5c0f\u503c\u4e3a1\uff0c\u6700\u5927\u503c\u4e3a10\uff0c\u521d\u59cb\u503c\u4e3a3\uff0c\u6bcf\u6b21\u6539\u52a8\u589e\u51cf1\u4f4d inputs = gr . Slider ( 1 , 10 , value = 3 , step = 1 ), outputs = \"image\" ) # \u751f\u6210\u5668\u5fc5\u987b\u8981queue\u51fd\u6570 demo . queue () demo . launch () 4. Blocks\u8fdb\u9636\u4f7f\u7528 4.1 Blocks\u4e8b\u4ef6 \uff081\uff09\u53ef\u4ea4\u4e92\u8bbe\u7f6e \u4efb\u4f55\u8f93\u5165\u7684\u7ec4\u4ef6\u5185\u5bb9\u90fd\u662f\u53ef\u7f16\u8f91\u7684\uff0c\u800c\u8f93\u51fa\u7ec4\u4ef6\u9ed8\u8ba4\u662f\u4e0d\u80fd\u7f16\u8f91\u7684\u3002\u5982\u679c\u60f3\u8981\u4f7f\u5f97\u8f93\u51fa\u7ec4\u4ef6\u5185\u5bb9\u53ef\u7f16\u8f91\uff0c\u8bbe\u7f6einteractive=True\u5373\u53ef\u3002 import gradio as gr def greet ( name ): return \"Hello \" + name + \"!\" with gr . Blocks () as demo : name = gr . Textbox ( label = \"Name\" ) # \u4e0d\u53ef\u4ea4\u4e92 # output = gr.Textbox(label=\"Output Box\") # \u53ef\u4ea4\u4e92 output = gr . Textbox ( label = \"Output\" , interactive = True ) greet_btn = gr . Button ( \"Greet\" ) greet_btn . click ( fn = greet , inputs = name , outputs = output ) demo . launch () \uff082\uff09\u4e8b\u4ef6\u8bbe\u7f6e \u6211\u4eec\u53ef\u4ee5\u4e3a\u4e0d\u540c\u7684\u7ec4\u4ef6\u8bbe\u7f6e\u4e0d\u540c\u4e8b\u4ef6\uff0c\u5982\u4e3a\u8f93\u5165\u7ec4\u4ef6\u6dfb\u52a0change\u4e8b\u4ef6\u3002\u53ef\u4ee5\u8fdb\u4e00\u6b65\u67e5\u770b\u5b98\u65b9\u6587\u6863\uff0c\u770b\u770b\u7ec4\u4ef6\u8fd8\u6709\u54ea\u4e9b\u4e8b\u4ef6\u3002 import gradio as gr def welcome ( name ): return f \"Welcome to Gradio, { name } !\" with gr . Blocks () as demo : gr . Markdown ( \"\"\" # Hello World! Start typing below to see the output. \"\"\" ) inp = gr . Textbox ( placeholder = \"What is your name?\" ) out = gr . Textbox () # \u8bbe\u7f6echange\u4e8b\u4ef6 inp . change ( fn = welcome , inputs = inp , outputs = out ) demo . launch () \uff083\uff09\u591a\u4e2a\u6570\u636e\u6d41 \u5982\u679c\u60f3\u5904\u7406\u591a\u4e2a\u6570\u636e\u6d41\uff0c\u53ea\u8981\u8bbe\u7f6e\u76f8\u5e94\u7684\u8f93\u5165\u8f93\u51fa\u7ec4\u4ef6\u5373\u53ef\u3002 import gradio as gr def increase ( num ): return num + 1 with gr . Blocks () as demo : a = gr . Number ( label = \"a\" ) b = gr . Number ( label = \"b\" ) # \u8981\u60f3b>a\uff0c\u5219\u4f7f\u5f97b = a+1 atob = gr . Button ( \"b > a\" ) atob . click ( increase , a , b ) # \u8981\u60f3a>b\uff0c\u5219\u4f7f\u5f97a = b+1 btoa = gr . Button ( \"a > b\" ) btoa . click ( increase , b , a ) demo . launch () \uff084\uff09\u591a\u8f93\u51fa\u503c\u5904\u7406 \u4e0b\u9762\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u8f93\u51fa\u591a\u4e2a\u503c\u65f6\uff0c\u4ee5\u5217\u8868\u5f62\u5f0f\u8868\u73b0\u7684\u5904\u7406\u65b9\u5f0f\u3002 import gradio as gr with gr . Blocks () as demo : food_box = gr . Number ( value = 10 , label = \"Food Count\" ) status_box = gr . Textbox () def eat ( food ): if food > 0 : return food - 1 , \"full\" else : return 0 , \"hungry\" gr . Button ( \"EAT\" ) . click ( fn = eat , inputs = food_box , # \u6839\u636e\u8fd4\u56de\u503c\u6539\u53d8\u8f93\u5165\u7ec4\u4ef6\u548c\u8f93\u51fa\u7ec4\u4ef6 outputs = [ food_box , status_box ] ) demo . launch () \uff085\uff09\u7ec4\u4ef6\u914d\u7f6e\u4fee\u6539 \u4e8b\u4ef6\u76d1\u542c\u5668\u51fd\u6570\u7684\u8fd4\u56de\u503c\u901a\u5e38\u662f\u76f8\u5e94\u7684\u8f93\u51fa\u7ec4\u4ef6\u7684\u66f4\u65b0\u503c\u3002\u6709\u65f6\u6211\u4eec\u4e5f\u60f3\u66f4\u65b0\u7ec4\u4ef6\u7684\u914d\u7f6e\uff0c\u6bd4\u5982\u8bf4\u53ef\u89c1\u6027\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd4\u56deupdate\u51fd\u6570\u66f4\u65b0\u7ec4\u4ef6\u7684\u914d\u7f6e\u3002 import gradio as gr def change_textbox ( choice ): # \u6839\u636e\u4e0d\u540c\u8f93\u5165\u5bf9\u8f93\u51fa\u63a7\u4ef6\u8fdb\u884c\u66f4\u65b0 if choice == \"short\" : return gr . update ( lines = 2 , visible = True , value = \"Short story: \" ) elif choice == \"long\" : return gr . update ( lines = 8 , visible = True , value = \"Long story...\" ) else : return gr . update ( visible = False ) with gr . Blocks () as demo : radio = gr . Radio ( [ \"short\" , \"long\" , \"none\" ], label = \"Essay Length to Write?\" ) text = gr . Textbox ( lines = 2 , interactive = True ) radio . change ( fn = change_textbox , inputs = radio , outputs = text ) demo . launch () 4.2 Blocks\u5e03\u5c40 Blocks\u5e94\u7528\u7684\u662fhtml\u4e2d\u7684flexbox\u6a21\u578b\u5e03\u5c40\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7ec4\u4ef6\u5782\u76f4\u6392\u5217\u3002 \uff081\uff09\u7ec4\u4ef6\u6c34\u5e73\u6392\u5217 \u4f7f\u7528Row\u51fd\u6570\u4f1a\u5c06\u7ec4\u4ef6\u6309\u7167\u6c34\u5e73\u6392\u5217\uff0c\u4f46\u662f\u5728Row\u51fd\u6570\u5757\u91cc\u9762\u7684\u7ec4\u4ef6\u90fd\u4f1a\u4fdd\u6301\u540c\u7b49\u9ad8\u5ea6\u3002 import gradio as gr with gr . Blocks () as demo : with gr . Row (): img1 = gr . Image () text1 = gr . Text () btn1 = gr . Button ( \"button\" ) demo . launch () \uff082\uff09\u7ec4\u4ef6\u5782\u76f4\u6392\u5217\u4e0e\u5d4c\u5957 \u7ec4\u4ef6\u901a\u5e38\u662f\u5782\u76f4\u6392\u5217\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7Row\u51fd\u6570\u548cColumn\u51fd\u6570\u751f\u6210\u4e0d\u540c\u590d\u6742\u7684\u5e03\u5c40\u3002 import gradio as gr with gr . Blocks () as demo : with gr . Row (): text1 = gr . Textbox ( label = \"t1\" ) slider2 = gr . Textbox ( label = \"s2\" ) drop3 = gr . Dropdown ([ \"a\" , \"b\" , \"c\" ], label = \"d3\" ) with gr . Row (): # scale\u4e0e\u76f8\u90bb\u5217\u76f8\u6bd4\u7684\u76f8\u5bf9\u5bbd\u5ea6\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5217A\u7684\u6bd4\u4f8b\u4e3a2\uff0c\u5217B\u7684\u6bd4\u4f8b\u4e3a1\uff0c\u5219A\u7684\u5bbd\u5ea6\u5c06\u662fB\u7684\u4e24\u500d\u3002 # min_width\u8bbe\u7f6e\u6700\u5c0f\u5bbd\u5ea6\uff0c\u9632\u6b62\u5217\u592a\u7a84 with gr . Column ( scale = 2 , min_width = 600 ): text1 = gr . Textbox ( label = \"prompt 1\" ) text2 = gr . Textbox ( label = \"prompt 2\" ) inbtw = gr . Button ( \"Between\" ) text4 = gr . Textbox ( label = \"prompt 1\" ) text5 = gr . Textbox ( label = \"prompt 2\" ) with gr . Column ( scale = 1 , min_width = 600 ): img1 = gr . Image ( \"test.jpg\" ) btn = gr . Button ( \"Go\" ) demo . launch () \uff083\uff09\u7ec4\u4ef6\u53ef\u89c6\u5316\uff1a\u8f93\u51fa\u53ef\u89c6\u5316\u4ece\u65e0\u5230\u6709 \u5982\u4e0b\u6240\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7visible\u548cupdate\u51fd\u6570\u6784\u5efa\u66f4\u4e3a\u590d\u6742\u7684\u5e94\u7528\u3002 import gradio as gr with gr . Blocks () as demo : # \u51fa\u9519\u63d0\u793a\u6846 error_box = gr . Textbox ( label = \"Error\" , visible = False ) # \u8f93\u5165\u6846 name_box = gr . Textbox ( label = \"Name\" ) age_box = gr . Number ( label = \"Age\" ) symptoms_box = gr . CheckboxGroup ([ \"Cough\" , \"Fever\" , \"Runny Nose\" ]) submit_btn = gr . Button ( \"Submit\" ) # \u8f93\u51fa\u4e0d\u53ef\u89c1 with gr . Column ( visible = False ) as output_col : diagnosis_box = gr . Textbox ( label = \"Diagnosis\" ) patient_summary_box = gr . Textbox ( label = \"Patient Summary\" ) def submit ( name , age , symptoms ): if len ( name ) == 0 : return { error_box : gr . update ( value = \"Enter name\" , visible = True )} if age < 0 or age > 200 : return { error_box : gr . update ( value = \"Enter valid age\" , visible = True )} return { output_col : gr . update ( visible = True ), diagnosis_box : \"covid\" if \"Cough\" in symptoms else \"flu\" , patient_summary_box : f \" { name } , { age } y/o\" } submit_btn . click ( submit , [ name_box , age_box , symptoms_box ], [ error_box , diagnosis_box , patient_summary_box , output_col ], ) demo . launch () \uff084\uff09\u7ec4\u4ef6\u6e32\u67d3\uff1a\u70b9\u51fb\u4f5c\u4e3a\u8f93\u5165 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u5728\u5b9e\u9645\u7684UI\u4e2d\u5448\u73b0\u7ec4\u4ef6\u4e4b\u524d\u5b9a\u4e49\u7ec4\u4ef6\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u5728\u76f8\u5e94\u7684gr.Textbox\u8f93\u5165\u4e0a\u65b9\u663e\u793a\u4f7f\u7528gr.examples\u7684\u793a\u4f8b\u90e8\u5206\u3002 \u7531\u4e8egr.Examples\u9700\u8981\u8f93\u5165\u7ec4\u4ef6\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\uff0c\u56e0\u6b64\u4f60\u9700\u8981\u5148\u5b9a\u4e49\u8f93\u5165\u7ec4\u4ef6\uff0c\u7136\u540e\u5728\u5b9a\u4e49gr.Exmples\u5bf9\u8c61\u540e\u518d\u8fdb\u884c\u6e32\u67d3\u3002 \u89e3\u51b3\u65b9\u6cd5\uff1a \u5728gr.Blocks()\u8303\u56f4\u5916\u5b9a\u4e49gr.Textbox\uff0c\u5e76\u5728UI\u4e2d\u5e0c\u671b\u653e\u7f6e\u7684\u4efb\u4f55\u4f4d\u7f6e\u4f7f\u7528\u7ec4\u4ef6\u7684.render()\u65b9\u6cd5\u3002 import gradio as gr input_textbox = gr . Textbox () with gr . Blocks () as demo : # \u63d0\u4f9b\u793a\u4f8b\u8f93\u5165\u7ed9input_textbox\uff0c\u793a\u4f8b\u8f93\u5165\u4ee5\u5d4c\u5957\u5217\u8868\u5f62\u5f0f\u8bbe\u7f6e gr . Examples ([ \"hello\" , \"bonjour\" , \"merhaba\" ], input_textbox ) # render\u51fd\u6570\u6e32\u67d3input_textbox input_textbox . render () demo . launch () 4.3 \u6837\u5f0f\u4fee\u6539 \uff081\uff09\u81ea\u5b9a\u4e49css \u8981\u83b7\u5f97\u989d\u5916\u7684\u6837\u5f0f\u529f\u80fd\uff0c\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u884c\u5185css\u5c5e\u6027\u5c06\u4efb\u4f55\u6837\u5f0f\u7ed9\u5e94\u7528\u7a0b\u5e8f\u3002\u5982\u4e0b\u6240\u793a\u3002 import gradio as gr # \u4fee\u6539blocks\u7684\u80cc\u666f\u989c\u8272 with gr . Blocks ( css = \".gradio-container {background-color: red}\" ) as demo : box1 = gr . Textbox ( value = \"Good Job\" ) box2 = gr . Textbox ( value = \"Failure\" ) demo . launch () \uff082\uff09\u5143\u7d20\u9009\u62e9 \u4f60\u53ef\u4ee5\u5411\u4efb\u4f55\u7ec4\u4ef6\u6dfb\u52a0HTML\u5143\u7d20\u3002\u901a\u8fc7elem_id\u9009\u62e9\u5bf9\u5e94\u7684css\u5143\u7d20\u3002 import gradio as gr # \u8fd9\u91cc\u7528\u7684\u662fid\u5c5e\u6027\u8bbe\u7f6e with gr . Blocks ( css = \"#warning {background-color: red}\" ) as demo : box1 = gr . Textbox ( value = \"Good Job\" , elem_id = \"warning\" ) box2 = gr . Textbox ( value = \"Failure\" ) box3 = gr . Textbox ( value = \"None\" , elem_id = \"warning\" ) demo . launch ()","title":"Gradio \u57fa\u672c\u53c2\u6570"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#gradio","text":"","title":"Gradio \u57fa\u672c\u53c2\u6570"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#1-interface","text":"","title":"1. Interface\u7c7b\u4ecb\u7ecd"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#11-interface","text":"","title":"1.1 Interface\u7c7b\u53ca\u57fa\u7840\u6a21\u5757"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#1interface","text":"Gradio \u53ef\u4ee5\u5305\u88c5\u51e0\u4e4e\u4efb\u4f55 Python \u51fd\u6570\u4e3a\u6613\u4e8e\u4f7f\u7528\u7684\u7528\u6237\u754c\u9762\u3002\u4ece\u4e0a\u9762\u4f8b\u5b50\u6211\u4eec\u770b\u5230\uff0c\u7b80\u5355\u7684\u57fa\u4e8e\u6587\u672c\u7684\u51fd\u6570\u3002\u4f46\u8fd9\u4e2a\u51fd\u6570\u8fd8\u53ef\u4ee5\u5904\u7406\u5f88\u591a\u7c7b\u578b\u3002 Interface\u7c7b\u901a\u8fc7\u4ee5\u4e0b\u4e09\u4e2a\u53c2\u6570\u8fdb\u884c\u521d\u59cb\u5316\uff1a fn\uff1a\u5305\u88c5\u7684\u51fd\u6570 inputs\uff1a\u8f93\u5165\u7ec4\u4ef6\u7c7b\u578b\uff0c\uff08\u4f8b\u5982\uff1a\u201ctext\u201d\u3001\"image\uff09 ouputs\uff1a\u8f93\u51fa\u7ec4\u4ef6\u7c7b\u578b\uff0c\uff08\u4f8b\u5982\uff1a\u201ctext\u201d\u3001\"image\uff09 \u901a\u8fc7\u8fd9\u4e09\u4e2a\u53c2\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u521b\u5efa\u4e00\u4e2a\u63a5\u53e3\u5e76\u53d1\u5e03\u4ed6\u4eec\u3002","title":"\uff081\uff09Interface\u7c7b"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#2","text":"\u6700\u5e38\u7528\u7684\u57fa\u7840\u6a21\u5757\u6784\u6210\u3002 2.1 \u5e94\u7528\u754c\u9762 gr.Interface(\u7b80\u6613\u573a\u666f) gr.Blocks(\u5b9a\u5236\u5316\u573a\u666f) 2.2 \u8f93\u5165\u8f93\u51fa gr.Image(\u56fe\u50cf) gr.Textbox(\u6587\u672c\u6846) gr.DataFrame(\u6570\u636e\u6846) gr.Dropdown(\u4e0b\u62c9\u9009\u9879) gr.Number(\u6570\u5b57) gr.Markdown(Markdown\u6587\u672c) gr.Files(\u6587\u4ef6) 2.3 \u63a7\u5236\u7ec4\u4ef6 gr.Button(\u6309\u94ae) 2.4 \u5e03\u5c40\u7ec4\u4ef6 gr.Tab(\u6807\u7b7e\u9875) gr.Row(\u884c\u5e03\u5c40) gr.Column(\u5217\u5e03\u5c40)","title":"\uff082\uff09 \u57fa\u7840\u6a21\u5757"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#12","text":"","title":"1.2 \u5e94\u7528\u5b9e\u4f8b"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#1","text":"import gradio as gr def greet ( name ): return \"Hello \" + name + \"!\" demo = gr . Interface ( fn = greet , # \u81ea\u5b9a\u4e49\u8f93\u5165\u6846 # \u5177\u4f53\u8bbe\u7f6e\u65b9\u6cd5\u67e5\u770b\u5b98\u65b9\u6587\u6863 inputs = gr . Textbox ( lines = 3 , placeholder = \"Name Here...\" , label = \"my input\" ), outputs = \"text\" , ) demo . launch () Interface.launch()\u65b9\u6cd5\u8fd4\u56de\u4e09\u4e2a\u503c app\uff0c\u4e3a Gradio \u6f14\u793a\u63d0\u4f9b\u652f\u6301\u7684 FastAPI \u5e94\u7528\u7a0b\u5e8f local_url\uff0c\u672c\u5730\u5730\u5740 share_url\uff0c\u516c\u5171\u5730\u5740\uff0c\u5f53share=True\u65f6\u751f\u6210","title":"\uff081\uff09\u81ea\u5b9a\u4e49\u8f93\u5165\u7ec4\u4ef6"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#2_1","text":"\u5bf9\u4e8e\u590d\u6742\u7a0b\u5e8f\uff0c\u8f93\u5165\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u7ec4\u4ef6\u6309\u987a\u5e8f\u5bf9\u5e94\u4e8e\u51fd\u6570\u7684\u4e00\u4e2a\u53c2\u6570\u3002\u8f93\u51fa\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u7ec4\u4ef6\u6309\u987a\u5e8f\u6392\u5217\u5bf9\u5e94\u4e8e\u51fd\u6570\u8fd4\u56de\u7684\u4e00\u4e2a\u503c\u3002 import gradio as gr # \u8be5\u51fd\u6570\u67093\u4e2a\u8f93\u5165\u53c2\u6570\u548c2\u4e2a\u8f93\u51fa\u53c2\u6570 def greet ( name , is_morning , temperature ): salutation = \"Good morning\" if is_morning else \"Good evening\" greeting = f \" { salutation } { name } . It is { temperature } degrees today\" celsius = ( temperature - 32 ) * 5 / 9 return greeting , round ( celsius , 2 ) demo = gr . Interface ( fn = greet , # \u6309\u7167\u5904\u7406\u7a0b\u5e8f\u8bbe\u7f6e\u8f93\u5165\u7ec4\u4ef6 inputs = [ \"text\" , \"checkbox\" , gr . Slider ( 0 , 100 )], # \u6309\u7167\u5904\u7406\u7a0b\u5e8f\u8bbe\u7f6e\u8f93\u51fa\u7ec4\u4ef6 outputs = [ \"text\" , \"number\" ], ) demo . launch () inputs\u5217\u8868\u91cc\u7684\u6bcf\u4e2a\u5b57\u6bb5\u6309\u987a\u5e8f\u5bf9\u5e94\u51fd\u6570\u7684\u6bcf\u4e2a\u53c2\u6570\uff0coutputs\u540c\u7406\u3002","title":"\uff082\uff09\u591a\u4e2a\u8f93\u5165\u548c\u8f93\u51fa"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#3","text":"Gradio\u652f\u6301\u8bb8\u591a\u7c7b\u578b\u7684\u7ec4\u4ef6\uff0c\u5982image\u3001dataframe\u3001video\u3002\u4f7f\u7528\u793a\u4f8b\u5982\u4e0b\uff1a import numpy as np import gradio as gr def sepia ( input_img ): # \u5904\u7406\u56fe\u50cf sepia_filter = np . array ([ [ 0.393 , 0.769 , 0.189 ], [ 0.349 , 0.686 , 0.168 ], [ 0.272 , 0.534 , 0.131 ] ]) sepia_img = input_img . dot ( sepia_filter . T ) sepia_img /= sepia_img . max () return sepia_img # shape\u8bbe\u7f6e\u8f93\u5165\u56fe\u50cf\u5927\u5c0f demo = gr . Interface ( sepia , gr . Image ( height = 200 , width = 200 ), \"image\" ) demo . launch ()","title":"\uff083\uff09\u56fe\u50cf\u7ec4\u4ef6"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#4","text":"\u5728Interface\u6dfb\u52a0 live=True \u53c2\u6570\uff0c\u53ea\u8981\u8f93\u5165\u53d1\u751f\u53d8\u5316\uff0c\u7ed3\u679c\u9a6c\u4e0a\u53d1\u751f\u6539\u53d8\u3002 import gradio as gr def calculator ( num1 , operation , num2 ): if operation == \"add\" : return num1 + num2 elif operation == \"subtract\" : return num1 - num2 elif operation == \"multiply\" : return num1 * num2 elif operation == \"divide\" : return num1 / num2 demo = gr . Interface ( calculator , [ \"number\" , gr . Radio ([ \"add\" , \"subtract\" , \"multiply\" , \"divide\" ]), \"number\" ], \"number\" , live = True , ) demo . launch () \u7b80\u5355\u8ba1\u7b97\u5668\u5236\u4f5c import gradio as gr # \u4e00\u4e2a\u7b80\u5355\u8ba1\u7b97\u5668\uff0c\u542b\u5b9e\u4f8b\u8bf4\u660e def calculator ( num1 , operation , num2 ): if operation == \"add\" : return num1 + num2 elif operation == \"subtract\" : return num1 - num2 elif operation == \"multiply\" : return num1 * num2 elif operation == \"divide\" : if num2 == 0 : # \u8bbe\u7f6e\u62a5\u9519\u5f39\u7a97 raise gr . Error ( \"Cannot divide by zero!\" ) return num1 / num2 demo = gr . Interface ( calculator , # \u8bbe\u7f6e\u8f93\u5165 [ \"number\" , gr . Radio ([ \"add\" , \"subtract\" , \"multiply\" , \"divide\" ]), \"number\" ], # \u8bbe\u7f6e\u8f93\u51fa \"number\" , # \u8bbe\u7f6e\u8f93\u5165\u53c2\u6570\u793a\u4f8b examples = [ [ 5 , \"add\" , 3 ], [ 4 , \"divide\" , 2 ], [ - 4 , \"multiply\" , 2.5 ], [ 0 , \"subtract\" , 1.2 ], ], # \u8bbe\u7f6e\u7f51\u9875\u6807\u9898 title = \"Toy Calculator\" , # \u5de6\u4e0a\u89d2\u7684\u63cf\u8ff0\u6587\u5b57 description = \"Here's a sample toy calculator. Enjoy!\" , # \u5de6\u4e0b\u89d2\u7684\u6587\u5b57 article = \"Check out the examples\" , ) demo . launch ()","title":"\uff084\uff09\u52a8\u6001\u754c\u9762\u63a5\u53e3\uff1a\u7b80\u5355\u8ba1\u7b97\u5668\u6a21\u677f\u5b9e\u65f6\u53d8\u5316"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#2-interface","text":"","title":"2. Interface\u8fdb\u9636\u4f7f\u7528"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#21-interface","text":"","title":"2.1 Interface\u72b6\u6001"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#1_1","text":"\u5168\u5c40\u53d8\u91cf\u7684\u597d\u5904\u5c31\u662f\u5728\u8c03\u7528\u51fd\u6570\u540e\u4ecd\u7136\u80fd\u591f\u4fdd\u5b58\uff0c\u4f8b\u5982\u5728\u673a\u5668\u5b66\u4e60\u4e2d\u901a\u8fc7\u5168\u5c40\u53d8\u91cf\u4ece\u5916\u90e8\u52a0\u8f7d\u4e00\u4e2a\u5927\u578b\u6a21\u578b\uff0c\u5e76\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528\u5b83\uff0c\u4ee5\u4fbf\u6bcf\u6b21\u51fd\u6570\u8c03\u7528\u90fd\u4e0d\u9700\u8981\u91cd\u65b0\u52a0\u8f7d\u6a21\u578b\u3002\u4e0b\u9762\u5c31\u5c55\u793a\u4e86\u5168\u5c40\u53d8\u91cf\u4f7f\u7528\u7684\u597d\u5904\u3002 import gradio as gr scores = [] def track_score ( score ): scores . append ( score ) # \u8fd4\u56de\u5206\u6570top3 top_scores = sorted ( scores , reverse = True )[: 3 ] return top_scores demo = gr . Interface ( track_score , gr . Number ( label = \"Score\" ), gr . JSON ( label = \"Top Scores\" ) ) demo . launch ()","title":"\uff081\uff09\u5168\u5c40\u53d8\u91cf"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#2_2","text":"Gradio\u652f\u6301\u7684\u53e6\u4e00\u79cd\u6570\u636e\u6301\u4e45\u6027\u662f\u4f1a\u8bdd\u72b6\u6001\uff0c\u6570\u636e\u5728\u4e00\u4e2a\u9875\u9762\u4f1a\u8bdd\u4e2d\u7684\u591a\u6b21\u63d0\u4ea4\u4e2d\u6301\u4e45\u5b58\u5728\u3002\u7136\u800c\uff0c\u6570\u636e\u4e0d\u4f1a\u5728\u4f60\u6a21\u578b\u7684\u4e0d\u540c\u7528\u6237\u4e4b\u95f4\u5171\u4eab\u3002\u4f1a\u8bdd\u72b6\u6001\u7684\u5178\u578b\u4f8b\u5b50\u5c31\u662f\u804a\u5929\u673a\u5668\u4eba\uff0c\u4f60\u60f3\u8bbf\u95ee\u7528\u6237\u4e4b\u524d\u63d0\u4ea4\u7684\u4fe1\u606f\uff0c\u4f46\u4f60\u4e0d\u80fd\u5c06\u804a\u5929\u8bb0\u5f55\u5b58\u50a8\u5728\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u4e2d\uff0c\u56e0\u4e3a\u90a3\u6837\u7684\u8bdd\uff0c\u804a\u5929\u8bb0\u5f55\u4f1a\u5728\u4e0d\u540c\u7684\u7528\u6237\u4e4b\u95f4\u4e71\u6210\u4e00\u56e2\u3002\u6ce8\u610f\u8be5\u72b6\u6001\u4f1a\u5728\u6bcf\u4e2a\u9875\u9762\u5185\u7684\u63d0\u4ea4\u4e2d\u6301\u7eed\u5b58\u5728\uff0c\u4f46\u5982\u679c\u4f60\u5728\u53e6\u4e00\u4e2a\u6807\u7b7e\u9875\u4e2d\u52a0\u8f7d\u8be5\u6f14\u793a\uff08\u6216\u5237\u65b0\u9875\u9762\uff09\uff0c\u8be5\u6f14\u793a\u5c06\u4e0d\u4f1a\u5171\u4eab\u804a\u5929\u5386\u53f2\u3002 \u8981\u5728\u4f1a\u8bdd\u72b6\u6001\u4e0b\u5b58\u50a8\u6570\u636e\uff0c\u9700\u8981\u505a\u4e09\u4ef6\u4e8b\uff1a \u5728\u4f60\u7684\u51fd\u6570\u4e2d\u4f20\u5165\u4e00\u4e2a\u989d\u5916\u7684\u53c2\u6570\uff0c\u5b83\u4ee3\u8868\u754c\u9762\u7684\u72b6\u6001\u3002 \u5728\u51fd\u6570\u7684\u6700\u540e\uff0c\u5c06\u72b6\u6001\u7684\u66f4\u65b0\u503c\u4f5c\u4e3a\u4e00\u4e2a\u989d\u5916\u7684\u8fd4\u56de\u503c\u8fd4\u56de\u3002 \u5728\u6dfb\u52a0\u8f93\u5165\u548c\u8f93\u51fa\u65f6\u6dfb\u52a0state\u7ec4\u4ef6\u3002 import random import gradio as gr def chat ( message , history ): history = history or [] message = message . lower () if message . startswith ( \"how many\" ): response = random . randint ( 1 , 10 ) elif message . startswith ( \"how\" ): response = random . choice ([ \"Great\" , \"Good\" , \"Okay\" , \"Bad\" ]) elif message . startswith ( \"where\" ): response = random . choice ([ \"Here\" , \"There\" , \"Somewhere\" ]) else : response = \"I don't know\" history . append (( message , response )) return history , history # \u8bbe\u7f6e\u4e00\u4e2a\u5bf9\u8bdd\u7a97 chatbot = gr . Chatbot () demo = gr . Interface ( chat , # \u6dfb\u52a0state\u7ec4\u4ef6 [ \"text\" , \"state\" ], [ chatbot , \"state\" ], # \u8bbe\u7f6e\u6ca1\u6709\u4fdd\u5b58\u6570\u636e\u7684\u6309\u94ae allow_flagging = \"never\" , ) demo . launch ()","title":"\uff082\uff09\u4f1a\u8bdd\u72b6\u6001"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#3-blocks","text":"\u76f8\u6bd4Interface\uff0cBlocks\u63d0\u4f9b\u4e86\u4e00\u4e2a\u4f4e\u7ea7\u522b\u7684API\uff0c\u7528\u4e8e\u8bbe\u8ba1\u5177\u6709\u66f4\u7075\u6d3b\u5e03\u5c40\u548c\u6570\u636e\u6d41\u7684\u7f51\u7edc\u5e94\u7528\u3002Blocks\u5141\u8bb8\u63a7\u5236\u7ec4\u4ef6\u5728\u9875\u9762\u4e0a\u51fa\u73b0\u7684\u4f4d\u7f6e\uff0c\u5904\u7406\u590d\u6742\u7684\u6570\u636e\u6d41\uff08\u4f8b\u5982\uff0c\u8f93\u51fa\u53ef\u4ee5\u4f5c\u4e3a\u5176\u4ed6\u51fd\u6570\u7684\u8f93\u5165\uff09\uff0c\u5e76\u6839\u636e\u7528\u6237\u4ea4\u4e92\u66f4\u65b0\u7ec4\u4ef6\u7684\u5c5e\u6027\u53ef\u89c1\u6027\u3002\u53ef\u4ee5\u5b9a\u5236\u66f4\u591a\u7ec4\u4ef6\uff0c \u66f4\u591a\u8be6\u7ec6\u5b9a\u5236\u53ef\u67e5\u770b\u6587\u6863","title":"3. \u81ea\u5b9a\u5236\u7ec4\u4ef6\uff1aBlocks\u6784\u5efa\u5e94\u7528"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#31","text":"import gradio as gr def greet ( name ): return \"Hello \" + name + \"!\" with gr . Blocks () as demo : # \u8bbe\u7f6e\u8f93\u5165\u7ec4\u4ef6 name = gr . Textbox ( label = \"Name\" ) # \u8bbe\u7f6e\u8f93\u51fa\u7ec4\u4ef6 output = gr . Textbox ( label = \"Output Box\" ) # \u8bbe\u7f6e\u6309\u94ae greet_btn = gr . Button ( \"Greet\" ) # \u8bbe\u7f6e\u6309\u94ae\u70b9\u51fb\u4e8b\u4ef6 greet_btn . click ( fn = greet , inputs = name , outputs = output ) demo . launch () Blocks\u65b9\u5f0f\u9700\u8981with\u8bed\u53e5\u6dfb\u52a0\u7ec4\u4ef6\uff0c\u5982\u679c\u4e0d\u8bbe\u7f6e\u5e03\u5c40\u65b9\u5f0f\uff0c\u90a3\u4e48\u7ec4\u4ef6\u5c06\u6309\u7167\u521b\u5efa\u7684\u987a\u5e8f\u5782\u76f4\u51fa\u73b0\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u8fd0\u884c\u754c\u9762","title":"3.1 \u7b80\u5355\u6f14\u793a"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#32","text":"import numpy as np import gradio as gr def flip_text ( x ): return x [:: - 1 ] def flip_image ( x ): return np . fliplr ( x ) with gr . Blocks () as demo : # \u7528markdown\u8bed\u6cd5\u7f16\u8f91\u8f93\u51fa\u4e00\u6bb5\u8bdd gr . Markdown ( \"Flip text or image files using this demo.\" ) # \u8bbe\u7f6etab\u9009\u9879\u5361 with gr . Tab ( \"Flip Text\" ): # Blocks\u7279\u6709\u7ec4\u4ef6\uff0c\u8bbe\u7f6e\u6240\u6709\u5b50\u7ec4\u4ef6\u6309\u5782\u76f4\u6392\u5217 # \u5782\u76f4\u6392\u5217\u662f\u9ed8\u8ba4\u60c5\u51b5\uff0c\u4e0d\u52a0\u4e5f\u6ca1\u5173\u7cfb with gr . Column (): text_input = gr . Textbox () text_output = gr . Textbox () text_button = gr . Button ( \"Flip\" ) with gr . Tab ( \"Flip Image\" ): # Blocks\u7279\u6709\u7ec4\u4ef6\uff0c\u8bbe\u7f6e\u6240\u6709\u5b50\u7ec4\u4ef6\u6309\u6c34\u5e73\u6392\u5217 with gr . Row (): image_input = gr . Image () image_output = gr . Image () image_button = gr . Button ( \"Flip\" ) # \u8bbe\u7f6e\u6298\u53e0\u5185\u5bb9 with gr . Accordion ( \"Open for More!\" ): gr . Markdown ( \"Look at me...\" ) text_button . click ( flip_text , inputs = text_input , outputs = text_output ) image_button . click ( flip_image , inputs = image_input , outputs = image_output ) demo . launch ()","title":"3.2 \u591a\u6a21\u5757\u5e94\u7528"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#33-flagging","text":"\u76f8\u4fe1\u6709\u5c0f\u4f19\u4f34\u5df2\u7ecf\u6ce8\u610f\u5230\uff0c\u8f93\u51fa\u6846\u4e0b\u6709\u4e2aFlag\u6309\u94ae\u3002\u5f53\u6d4b\u8bd5\u60a8\u7684\u6a21\u578b\u7684\u7528\u6237\u770b\u5230\u67d0\u4e2a\u8f93\u5165\u5bfc\u81f4\u8f93\u51fa\u9519\u8bef\u6216\u610f\u5916\u7684\u6a21\u578b\u884c\u4e3a\uff0c\u4ed6\u4eec\u53ef\u4ee5\u6807\u8bb0\u8fd9\u4e2a\u8f93\u5165\u8ba9\u5f00\u53d1\u8005\u77e5\u9053\u3002\u8fd9\u4e2a\u6587\u4ef6\u5939\u7531Interface\u7684flagging_dir\u53c2\u6570\u6307\u5b9a\uff0c\u9ed8\u8ba4\u4e3a\u2019flagged\u2019\u3002\u5c06\u8fd9\u4e9b\u4f1a\u5bfc\u81f4\u9519\u8bef\u7684\u8f93\u5165\u4fdd\u5b58\u5230\u4e00\u4e2acsv\u6587\u4ef6\u3002\u5982\u679cInterface\u5305\u542b\u6587\u4ef6\u6570\u636e\uff0c\u6587\u4ef6\u5939\u4e5f\u4f1a\u521b\u5efa\u6765\u4fdd\u5b58\u8fd9\u4e9b\u6807\u8bb0\u6570\u636e\u3002 \u6253\u5f00log.csv\u5c55\u793a\u5982\u4e0b\uff1a","title":"3.3 Flagging\u6807\u8bb0"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#34","text":"\u6837\u5f0f \u5728Gradio\u5b98\u65b9\u6587\u6863\uff0c\u641c\u7d22\u4e0d\u540c\u7684\u7ec4\u4ef6\u52a0.style\uff08\u5982image.style\uff09\uff0c\u53ef\u4ee5\u83b7\u53d6\u8be5\u7ec4\u4ef6\u7684\u6837\u5f0f\u53c2\u6570\u8bbe\u7f6e\u6837\u4f8b\u3002\u4f8b\u5982image\u7ec4\u4ef6\u7684\u8bbe\u7f6e\u5982\u4e0b\uff1a img = gr . Image ( \"lion.jpg\" ) . style ( height = '24' , rounded = False ) \u961f\u5217 \u5982\u679c\u51fd\u6570\u63a8\u7406\u65f6\u95f4\u8f83\u957f\uff0c\u6bd4\u5982\u76ee\u6807\u68c0\u6d4b\uff1b\u6216\u8005\u5e94\u7528\u7a0b\u5e8f\u5904\u7406\u6d41\u91cf\u8fc7\u5927\uff0c\u5219\u9700\u8981\u4f7f\u7528queue\u65b9\u6cd5\u8fdb\u884c\u6392\u961f\u3002queue\u65b9\u6cd5\u4f7f\u7528websockets\uff0c\u53ef\u4ee5\u9632\u6b62\u7f51\u7edc\u8d85\u65f6\u3002\u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b\uff1a demo = gr . Interface ( ... ) . queue () demo . launch () #\u6216 with gr . Blocks () as demo : #... demo . queue () demo . launch () \u751f\u6210\u5668 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u60f3\u663e\u793a\u4e00\u8fde\u4e32\u7684\u8f93\u51fa\uff0c\u800c\u4e0d\u662f\u5355\u4e00\u7684\u8f93\u51fa\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u80fd\u6709\u4e00\u4e2a\u56fe\u50cf\u751f\u6210\u6a21\u578b\uff0c\u5982\u679c\u4f60\u60f3\u663e\u793a\u5728\u6bcf\u4e2a\u6b65\u9aa4\u4e2d\u751f\u6210\u7684\u56fe\u50cf\uff0c\u4ece\u800c\u5f97\u5230\u6700\u7ec8\u7684\u56fe\u50cf\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u4ee5\u5411Gradio\u63d0\u4f9b\u4e00\u4e2a\u751f\u6210\u5668\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u5e38\u89c4\u51fd\u6570\u3002\u4e0b\u9762\u662f\u4e00\u4e2a\u751f\u6210\u5668\u7684\u4f8b\u5b50\uff0c\u6bcf\u96941\u79d2\u8fd4\u56de1\u5f20\u56fe\u7247\u3002 import gradio as gr import numpy as np import time # \u751f\u6210steps\u5f20\u56fe\u7247\uff0c\u6bcf\u96941\u79d2\u949f\u8fd4\u56de def fake_diffusion ( steps ): for _ in range ( steps ): time . sleep ( 1 ) image = np . random . randint ( 255 , size = ( 300 , 600 , 3 )) yield image demo = gr . Interface ( fake_diffusion , # \u8bbe\u7f6e\u6ed1\u7a97\uff0c\u6700\u5c0f\u503c\u4e3a1\uff0c\u6700\u5927\u503c\u4e3a10\uff0c\u521d\u59cb\u503c\u4e3a3\uff0c\u6bcf\u6b21\u6539\u52a8\u589e\u51cf1\u4f4d inputs = gr . Slider ( 1 , 10 , value = 3 , step = 1 ), outputs = \"image\" ) # \u751f\u6210\u5668\u5fc5\u987b\u8981queue\u51fd\u6570 demo . queue () demo . launch ()","title":"3.4 \u6837\u5f0f\u3001\u961f\u5217\u3001\u751f\u6210\u5668"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#4-blocks","text":"","title":"4. Blocks\u8fdb\u9636\u4f7f\u7528"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#41-blocks","text":"","title":"4.1 Blocks\u4e8b\u4ef6"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#1_2","text":"\u4efb\u4f55\u8f93\u5165\u7684\u7ec4\u4ef6\u5185\u5bb9\u90fd\u662f\u53ef\u7f16\u8f91\u7684\uff0c\u800c\u8f93\u51fa\u7ec4\u4ef6\u9ed8\u8ba4\u662f\u4e0d\u80fd\u7f16\u8f91\u7684\u3002\u5982\u679c\u60f3\u8981\u4f7f\u5f97\u8f93\u51fa\u7ec4\u4ef6\u5185\u5bb9\u53ef\u7f16\u8f91\uff0c\u8bbe\u7f6einteractive=True\u5373\u53ef\u3002 import gradio as gr def greet ( name ): return \"Hello \" + name + \"!\" with gr . Blocks () as demo : name = gr . Textbox ( label = \"Name\" ) # \u4e0d\u53ef\u4ea4\u4e92 # output = gr.Textbox(label=\"Output Box\") # \u53ef\u4ea4\u4e92 output = gr . Textbox ( label = \"Output\" , interactive = True ) greet_btn = gr . Button ( \"Greet\" ) greet_btn . click ( fn = greet , inputs = name , outputs = output ) demo . launch ()","title":"\uff081\uff09\u53ef\u4ea4\u4e92\u8bbe\u7f6e"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#2_3","text":"\u6211\u4eec\u53ef\u4ee5\u4e3a\u4e0d\u540c\u7684\u7ec4\u4ef6\u8bbe\u7f6e\u4e0d\u540c\u4e8b\u4ef6\uff0c\u5982\u4e3a\u8f93\u5165\u7ec4\u4ef6\u6dfb\u52a0change\u4e8b\u4ef6\u3002\u53ef\u4ee5\u8fdb\u4e00\u6b65\u67e5\u770b\u5b98\u65b9\u6587\u6863\uff0c\u770b\u770b\u7ec4\u4ef6\u8fd8\u6709\u54ea\u4e9b\u4e8b\u4ef6\u3002 import gradio as gr def welcome ( name ): return f \"Welcome to Gradio, { name } !\" with gr . Blocks () as demo : gr . Markdown ( \"\"\" # Hello World! Start typing below to see the output. \"\"\" ) inp = gr . Textbox ( placeholder = \"What is your name?\" ) out = gr . Textbox () # \u8bbe\u7f6echange\u4e8b\u4ef6 inp . change ( fn = welcome , inputs = inp , outputs = out ) demo . launch ()","title":"\uff082\uff09\u4e8b\u4ef6\u8bbe\u7f6e"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#3_1","text":"\u5982\u679c\u60f3\u5904\u7406\u591a\u4e2a\u6570\u636e\u6d41\uff0c\u53ea\u8981\u8bbe\u7f6e\u76f8\u5e94\u7684\u8f93\u5165\u8f93\u51fa\u7ec4\u4ef6\u5373\u53ef\u3002 import gradio as gr def increase ( num ): return num + 1 with gr . Blocks () as demo : a = gr . Number ( label = \"a\" ) b = gr . Number ( label = \"b\" ) # \u8981\u60f3b>a\uff0c\u5219\u4f7f\u5f97b = a+1 atob = gr . Button ( \"b > a\" ) atob . click ( increase , a , b ) # \u8981\u60f3a>b\uff0c\u5219\u4f7f\u5f97a = b+1 btoa = gr . Button ( \"a > b\" ) btoa . click ( increase , b , a ) demo . launch ()","title":"\uff083\uff09\u591a\u4e2a\u6570\u636e\u6d41"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#4_1","text":"\u4e0b\u9762\u7684\u4f8b\u5b50\u5c55\u793a\u4e86\u8f93\u51fa\u591a\u4e2a\u503c\u65f6\uff0c\u4ee5\u5217\u8868\u5f62\u5f0f\u8868\u73b0\u7684\u5904\u7406\u65b9\u5f0f\u3002 import gradio as gr with gr . Blocks () as demo : food_box = gr . Number ( value = 10 , label = \"Food Count\" ) status_box = gr . Textbox () def eat ( food ): if food > 0 : return food - 1 , \"full\" else : return 0 , \"hungry\" gr . Button ( \"EAT\" ) . click ( fn = eat , inputs = food_box , # \u6839\u636e\u8fd4\u56de\u503c\u6539\u53d8\u8f93\u5165\u7ec4\u4ef6\u548c\u8f93\u51fa\u7ec4\u4ef6 outputs = [ food_box , status_box ] ) demo . launch ()","title":"\uff084\uff09\u591a\u8f93\u51fa\u503c\u5904\u7406"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#5","text":"\u4e8b\u4ef6\u76d1\u542c\u5668\u51fd\u6570\u7684\u8fd4\u56de\u503c\u901a\u5e38\u662f\u76f8\u5e94\u7684\u8f93\u51fa\u7ec4\u4ef6\u7684\u66f4\u65b0\u503c\u3002\u6709\u65f6\u6211\u4eec\u4e5f\u60f3\u66f4\u65b0\u7ec4\u4ef6\u7684\u914d\u7f6e\uff0c\u6bd4\u5982\u8bf4\u53ef\u89c1\u6027\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8fd4\u56deupdate\u51fd\u6570\u66f4\u65b0\u7ec4\u4ef6\u7684\u914d\u7f6e\u3002 import gradio as gr def change_textbox ( choice ): # \u6839\u636e\u4e0d\u540c\u8f93\u5165\u5bf9\u8f93\u51fa\u63a7\u4ef6\u8fdb\u884c\u66f4\u65b0 if choice == \"short\" : return gr . update ( lines = 2 , visible = True , value = \"Short story: \" ) elif choice == \"long\" : return gr . update ( lines = 8 , visible = True , value = \"Long story...\" ) else : return gr . update ( visible = False ) with gr . Blocks () as demo : radio = gr . Radio ( [ \"short\" , \"long\" , \"none\" ], label = \"Essay Length to Write?\" ) text = gr . Textbox ( lines = 2 , interactive = True ) radio . change ( fn = change_textbox , inputs = radio , outputs = text ) demo . launch ()","title":"\uff085\uff09\u7ec4\u4ef6\u914d\u7f6e\u4fee\u6539"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#42-blocks","text":"Blocks\u5e94\u7528\u7684\u662fhtml\u4e2d\u7684flexbox\u6a21\u578b\u5e03\u5c40\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u7ec4\u4ef6\u5782\u76f4\u6392\u5217\u3002","title":"4.2 Blocks\u5e03\u5c40"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#1_3","text":"\u4f7f\u7528Row\u51fd\u6570\u4f1a\u5c06\u7ec4\u4ef6\u6309\u7167\u6c34\u5e73\u6392\u5217\uff0c\u4f46\u662f\u5728Row\u51fd\u6570\u5757\u91cc\u9762\u7684\u7ec4\u4ef6\u90fd\u4f1a\u4fdd\u6301\u540c\u7b49\u9ad8\u5ea6\u3002 import gradio as gr with gr . Blocks () as demo : with gr . Row (): img1 = gr . Image () text1 = gr . Text () btn1 = gr . Button ( \"button\" ) demo . launch ()","title":"\uff081\uff09\u7ec4\u4ef6\u6c34\u5e73\u6392\u5217"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#2_4","text":"\u7ec4\u4ef6\u901a\u5e38\u662f\u5782\u76f4\u6392\u5217\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7Row\u51fd\u6570\u548cColumn\u51fd\u6570\u751f\u6210\u4e0d\u540c\u590d\u6742\u7684\u5e03\u5c40\u3002 import gradio as gr with gr . Blocks () as demo : with gr . Row (): text1 = gr . Textbox ( label = \"t1\" ) slider2 = gr . Textbox ( label = \"s2\" ) drop3 = gr . Dropdown ([ \"a\" , \"b\" , \"c\" ], label = \"d3\" ) with gr . Row (): # scale\u4e0e\u76f8\u90bb\u5217\u76f8\u6bd4\u7684\u76f8\u5bf9\u5bbd\u5ea6\u3002\u4f8b\u5982\uff0c\u5982\u679c\u5217A\u7684\u6bd4\u4f8b\u4e3a2\uff0c\u5217B\u7684\u6bd4\u4f8b\u4e3a1\uff0c\u5219A\u7684\u5bbd\u5ea6\u5c06\u662fB\u7684\u4e24\u500d\u3002 # min_width\u8bbe\u7f6e\u6700\u5c0f\u5bbd\u5ea6\uff0c\u9632\u6b62\u5217\u592a\u7a84 with gr . Column ( scale = 2 , min_width = 600 ): text1 = gr . Textbox ( label = \"prompt 1\" ) text2 = gr . Textbox ( label = \"prompt 2\" ) inbtw = gr . Button ( \"Between\" ) text4 = gr . Textbox ( label = \"prompt 1\" ) text5 = gr . Textbox ( label = \"prompt 2\" ) with gr . Column ( scale = 1 , min_width = 600 ): img1 = gr . Image ( \"test.jpg\" ) btn = gr . Button ( \"Go\" ) demo . launch ()","title":"\uff082\uff09\u7ec4\u4ef6\u5782\u76f4\u6392\u5217\u4e0e\u5d4c\u5957"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#3_2","text":"\u5982\u4e0b\u6240\u793a\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7visible\u548cupdate\u51fd\u6570\u6784\u5efa\u66f4\u4e3a\u590d\u6742\u7684\u5e94\u7528\u3002 import gradio as gr with gr . Blocks () as demo : # \u51fa\u9519\u63d0\u793a\u6846 error_box = gr . Textbox ( label = \"Error\" , visible = False ) # \u8f93\u5165\u6846 name_box = gr . Textbox ( label = \"Name\" ) age_box = gr . Number ( label = \"Age\" ) symptoms_box = gr . CheckboxGroup ([ \"Cough\" , \"Fever\" , \"Runny Nose\" ]) submit_btn = gr . Button ( \"Submit\" ) # \u8f93\u51fa\u4e0d\u53ef\u89c1 with gr . Column ( visible = False ) as output_col : diagnosis_box = gr . Textbox ( label = \"Diagnosis\" ) patient_summary_box = gr . Textbox ( label = \"Patient Summary\" ) def submit ( name , age , symptoms ): if len ( name ) == 0 : return { error_box : gr . update ( value = \"Enter name\" , visible = True )} if age < 0 or age > 200 : return { error_box : gr . update ( value = \"Enter valid age\" , visible = True )} return { output_col : gr . update ( visible = True ), diagnosis_box : \"covid\" if \"Cough\" in symptoms else \"flu\" , patient_summary_box : f \" { name } , { age } y/o\" } submit_btn . click ( submit , [ name_box , age_box , symptoms_box ], [ error_box , diagnosis_box , patient_summary_box , output_col ], ) demo . launch ()","title":"\uff083\uff09\u7ec4\u4ef6\u53ef\u89c6\u5316\uff1a\u8f93\u51fa\u53ef\u89c6\u5316\u4ece\u65e0\u5230\u6709"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#4_2","text":"\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u5728\u5b9e\u9645\u7684UI\u4e2d\u5448\u73b0\u7ec4\u4ef6\u4e4b\u524d\u5b9a\u4e49\u7ec4\u4ef6\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u80fd\u5e0c\u671b\u5728\u76f8\u5e94\u7684gr.Textbox\u8f93\u5165\u4e0a\u65b9\u663e\u793a\u4f7f\u7528gr.examples\u7684\u793a\u4f8b\u90e8\u5206\u3002 \u7531\u4e8egr.Examples\u9700\u8981\u8f93\u5165\u7ec4\u4ef6\u5bf9\u8c61\u4f5c\u4e3a\u53c2\u6570\uff0c\u56e0\u6b64\u4f60\u9700\u8981\u5148\u5b9a\u4e49\u8f93\u5165\u7ec4\u4ef6\uff0c\u7136\u540e\u5728\u5b9a\u4e49gr.Exmples\u5bf9\u8c61\u540e\u518d\u8fdb\u884c\u6e32\u67d3\u3002 \u89e3\u51b3\u65b9\u6cd5\uff1a \u5728gr.Blocks()\u8303\u56f4\u5916\u5b9a\u4e49gr.Textbox\uff0c\u5e76\u5728UI\u4e2d\u5e0c\u671b\u653e\u7f6e\u7684\u4efb\u4f55\u4f4d\u7f6e\u4f7f\u7528\u7ec4\u4ef6\u7684.render()\u65b9\u6cd5\u3002 import gradio as gr input_textbox = gr . Textbox () with gr . Blocks () as demo : # \u63d0\u4f9b\u793a\u4f8b\u8f93\u5165\u7ed9input_textbox\uff0c\u793a\u4f8b\u8f93\u5165\u4ee5\u5d4c\u5957\u5217\u8868\u5f62\u5f0f\u8bbe\u7f6e gr . Examples ([ \"hello\" , \"bonjour\" , \"merhaba\" ], input_textbox ) # render\u51fd\u6570\u6e32\u67d3input_textbox input_textbox . render () demo . launch ()","title":"\uff084\uff09\u7ec4\u4ef6\u6e32\u67d3\uff1a\u70b9\u51fb\u4f5c\u4e3a\u8f93\u5165"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#43","text":"","title":"4.3 \u6837\u5f0f\u4fee\u6539"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#1css","text":"\u8981\u83b7\u5f97\u989d\u5916\u7684\u6837\u5f0f\u529f\u80fd\uff0c\u4f60\u53ef\u4ee5\u8bbe\u7f6e\u884c\u5185css\u5c5e\u6027\u5c06\u4efb\u4f55\u6837\u5f0f\u7ed9\u5e94\u7528\u7a0b\u5e8f\u3002\u5982\u4e0b\u6240\u793a\u3002 import gradio as gr # \u4fee\u6539blocks\u7684\u80cc\u666f\u989c\u8272 with gr . Blocks ( css = \".gradio-container {background-color: red}\" ) as demo : box1 = gr . Textbox ( value = \"Good Job\" ) box2 = gr . Textbox ( value = \"Failure\" ) demo . launch ()","title":"\uff081\uff09\u81ea\u5b9a\u4e49css"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/03-Gradio%E5%9F%BA%E6%9C%AC%E5%8F%82%E6%95%B0/#2_5","text":"\u4f60\u53ef\u4ee5\u5411\u4efb\u4f55\u7ec4\u4ef6\u6dfb\u52a0HTML\u5143\u7d20\u3002\u901a\u8fc7elem_id\u9009\u62e9\u5bf9\u5e94\u7684css\u5143\u7d20\u3002 import gradio as gr # \u8fd9\u91cc\u7528\u7684\u662fid\u5c5e\u6027\u8bbe\u7f6e with gr . Blocks ( css = \"#warning {background-color: red}\" ) as demo : box1 = gr . Textbox ( value = \"Good Job\" , elem_id = \"warning\" ) box2 = gr . Textbox ( value = \"Failure\" ) box3 = gr . Textbox ( value = \"None\" , elem_id = \"warning\" ) demo . launch ()","title":"\uff082\uff09\u5143\u7d20\u9009\u62e9"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/04-Gradio%E5%BA%94%E7%94%A8%E5%88%86%E4%BA%AB/","text":"Gradio \u5e94\u7528\u5206\u4eab 1. \u4e92\u8054\u7f51\u5206\u4eab \u5982\u679c\u8fd0\u884c\u73af\u5883\u80fd\u591f\u8fde\u63a5\u4e92\u8054\u7f51\uff0c\u5728launch\u51fd\u6570\u4e2d\u8bbe\u7f6eshare\u53c2\u6570\u4e3aTrue\uff0c\u90a3\u4e48\u8fd0\u884c\u7a0b\u5e8f\u540e\u3002Gradio\u7684\u670d\u52a1\u5668\u4f1a\u63d0\u4f9bXXXXX.gradio.app\u5730\u5740\u3002\u901a\u8fc7\u5176\u4ed6\u8bbe\u5907\uff0c\u6bd4\u5982\u624b\u673a\u6216\u8005\u7b14\u8bb0\u672c\u7535\u8111\uff0c\u90fd\u53ef\u4ee5\u8bbf\u95ee\u8be5\u5e94\u7528\u3002\u8fd9\u79cd\u65b9\u5f0f\u4e0b\u8be5\u94fe\u63a5\u53ea\u662f\u672c\u5730\u670d\u52a1\u5668\u7684\u4ee3\u7406\uff0c\u4e0d\u4f1a\u5b58\u50a8\u901a\u8fc7\u672c\u5730\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u7684\u4efb\u4f55\u6570\u636e\u3002\u8fd9\u4e2a\u94fe\u63a5\u5728\u6709\u6548\u671f\u5185\u662f\u514d\u8d39\u7684\uff0c\u597d\u5904\u5c31\u662f\u4e0d\u9700\u8981\u81ea\u5df1\u642d\u5efa\u670d\u52a1\u5668\uff0c\u574f\u5904\u5c31\u662f\u592a\u6162\u4e86\uff0c\u6bd5\u7adf\u6570\u636e\u7ecf\u8fc7\u522b\u4eba\u7684\u670d\u52a1\u5668\u3002 demo . launch ( share = True ) 2. Huggingface\u6258\u7ba1 \u4e3a\u4e86\u4fbf\u4e8e\u5411\u5408\u4f5c\u4f19\u4f34\u6c38\u4e45\u5c55\u793a\u6211\u4eec\u7684\u6a21\u578bApp,\u53ef\u4ee5\u5c06gradio\u7684\u6a21\u578b\u90e8\u7f72\u5230 HuggingFace\u7684 Space\u6258\u7ba1\u7a7a\u95f4\u4e2d\uff0c\u5b8c\u5168\u514d\u8d39\u7684\u54e6\u3002 \u65b9\u6cd5\u5982\u4e0b\uff1a 1\uff0c\u6ce8\u518chuggingface\u8d26\u53f7\uff1a https://huggingface.co/join 2\uff0c\u5728space\u7a7a\u95f4\u4e2d\u521b\u5efa\u9879\u76ee\uff1a https://huggingface.co/spaces 3\uff0c\u521b\u5efa\u597d\u7684\u9879\u76ee\u6709\u4e00\u4e2aReadme\u6587\u6863\uff0c\u53ef\u4ee5\u6839\u636e\u8bf4\u660e\u64cd\u4f5c\uff0c\u4e5f\u53ef\u4ee5\u624b\u5de5\u7f16\u8f91app.py\u548crequirements.txt\u6587\u4ef6\u3002 3. \u5c40\u57df\u7f51\u5206\u4eab \u901a\u8fc7\u8bbe\u7f6eserver_name=\u20180.0.0.0\u2019\uff08\u8868\u793a\u4f7f\u7528\u672c\u673aip\uff09,server_port\uff08\u53ef\u4e0d\u6539\uff0c\u9ed8\u8ba4\u503c\u662f7860\uff09\u3002\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7\u672c\u673aip:\u7aef\u53e3\u53f7\u5728\u5c40\u57df\u7f51\u5185\u5206\u4eab\u5e94\u7528\u3002 # show_error\u4e3aTrue\u8868\u793a\u5728\u63a7\u5236\u53f0\u663e\u793a\u9519\u8bef\u4fe1\u606f\u3002 demo . launch ( server_name = '0.0.0.0' , server_port = 8080 , show_error = True ) \u8fd9\u91cchost\u5730\u5740\u53ef\u4ee5\u81ea\u884c\u5728\u7535\u8111\u67e5\u8be2\uff0c C:\\Windows\\System32\\drivers\\etc\\hosts \u4fee\u6539\u4e00\u4e0b\u5373\u53ef 127.0.0.1\u518d\u5236\u5b9a\u7aef\u53e3\u53f7 4. \u5bc6\u7801\u9a8c\u8bc1 \u5728\u9996\u6b21\u6253\u5f00\u7f51\u9875\u524d\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u8d26\u6237\u5bc6\u7801\u3002\u6bd4\u5982auth\u53c2\u6570\u4e3a\uff08\u8d26\u6237\uff0c\u5bc6\u7801\uff09\u7684\u5143\u7ec4\u6570\u636e\u3002\u8fd9\u79cd\u6a21\u5f0f\u4e0b\u4e0d\u80fd\u591f\u4f7f\u7528queue\u51fd\u6570\u3002 demo . launch ( auth = ( \"admin\" , \"pass1234\" )) \u5982\u679c\u60f3\u8bbe\u7f6e\u66f4\u4e3a\u590d\u6742\u7684\u8d26\u6237\u5bc6\u7801\u548c\u5bc6\u7801\u63d0\u793a\uff0c\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u8bbe\u7f6e\u6821\u9a8c\u89c4\u5219\u3002 #\u8d26\u6237\u548c\u5bc6\u7801\u76f8\u540c\u5c31\u53ef\u4ee5\u901a\u8fc7 def same_auth ( username , password ): return username == password demo . launch ( auth = same_auth , auth_message = \"username and password must be the same\" )","title":"Gradio \u5e94\u7528\u5206\u4eab"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/04-Gradio%E5%BA%94%E7%94%A8%E5%88%86%E4%BA%AB/#gradio","text":"","title":"Gradio \u5e94\u7528\u5206\u4eab"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/04-Gradio%E5%BA%94%E7%94%A8%E5%88%86%E4%BA%AB/#1","text":"\u5982\u679c\u8fd0\u884c\u73af\u5883\u80fd\u591f\u8fde\u63a5\u4e92\u8054\u7f51\uff0c\u5728launch\u51fd\u6570\u4e2d\u8bbe\u7f6eshare\u53c2\u6570\u4e3aTrue\uff0c\u90a3\u4e48\u8fd0\u884c\u7a0b\u5e8f\u540e\u3002Gradio\u7684\u670d\u52a1\u5668\u4f1a\u63d0\u4f9bXXXXX.gradio.app\u5730\u5740\u3002\u901a\u8fc7\u5176\u4ed6\u8bbe\u5907\uff0c\u6bd4\u5982\u624b\u673a\u6216\u8005\u7b14\u8bb0\u672c\u7535\u8111\uff0c\u90fd\u53ef\u4ee5\u8bbf\u95ee\u8be5\u5e94\u7528\u3002\u8fd9\u79cd\u65b9\u5f0f\u4e0b\u8be5\u94fe\u63a5\u53ea\u662f\u672c\u5730\u670d\u52a1\u5668\u7684\u4ee3\u7406\uff0c\u4e0d\u4f1a\u5b58\u50a8\u901a\u8fc7\u672c\u5730\u5e94\u7528\u7a0b\u5e8f\u53d1\u9001\u7684\u4efb\u4f55\u6570\u636e\u3002\u8fd9\u4e2a\u94fe\u63a5\u5728\u6709\u6548\u671f\u5185\u662f\u514d\u8d39\u7684\uff0c\u597d\u5904\u5c31\u662f\u4e0d\u9700\u8981\u81ea\u5df1\u642d\u5efa\u670d\u52a1\u5668\uff0c\u574f\u5904\u5c31\u662f\u592a\u6162\u4e86\uff0c\u6bd5\u7adf\u6570\u636e\u7ecf\u8fc7\u522b\u4eba\u7684\u670d\u52a1\u5668\u3002 demo . launch ( share = True )","title":"1. \u4e92\u8054\u7f51\u5206\u4eab"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/04-Gradio%E5%BA%94%E7%94%A8%E5%88%86%E4%BA%AB/#2-huggingface","text":"\u4e3a\u4e86\u4fbf\u4e8e\u5411\u5408\u4f5c\u4f19\u4f34\u6c38\u4e45\u5c55\u793a\u6211\u4eec\u7684\u6a21\u578bApp,\u53ef\u4ee5\u5c06gradio\u7684\u6a21\u578b\u90e8\u7f72\u5230 HuggingFace\u7684 Space\u6258\u7ba1\u7a7a\u95f4\u4e2d\uff0c\u5b8c\u5168\u514d\u8d39\u7684\u54e6\u3002 \u65b9\u6cd5\u5982\u4e0b\uff1a 1\uff0c\u6ce8\u518chuggingface\u8d26\u53f7\uff1a https://huggingface.co/join 2\uff0c\u5728space\u7a7a\u95f4\u4e2d\u521b\u5efa\u9879\u76ee\uff1a https://huggingface.co/spaces 3\uff0c\u521b\u5efa\u597d\u7684\u9879\u76ee\u6709\u4e00\u4e2aReadme\u6587\u6863\uff0c\u53ef\u4ee5\u6839\u636e\u8bf4\u660e\u64cd\u4f5c\uff0c\u4e5f\u53ef\u4ee5\u624b\u5de5\u7f16\u8f91app.py\u548crequirements.txt\u6587\u4ef6\u3002","title":"2. Huggingface\u6258\u7ba1"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/04-Gradio%E5%BA%94%E7%94%A8%E5%88%86%E4%BA%AB/#3","text":"\u901a\u8fc7\u8bbe\u7f6eserver_name=\u20180.0.0.0\u2019\uff08\u8868\u793a\u4f7f\u7528\u672c\u673aip\uff09,server_port\uff08\u53ef\u4e0d\u6539\uff0c\u9ed8\u8ba4\u503c\u662f7860\uff09\u3002\u90a3\u4e48\u53ef\u4ee5\u901a\u8fc7\u672c\u673aip:\u7aef\u53e3\u53f7\u5728\u5c40\u57df\u7f51\u5185\u5206\u4eab\u5e94\u7528\u3002 # show_error\u4e3aTrue\u8868\u793a\u5728\u63a7\u5236\u53f0\u663e\u793a\u9519\u8bef\u4fe1\u606f\u3002 demo . launch ( server_name = '0.0.0.0' , server_port = 8080 , show_error = True ) \u8fd9\u91cchost\u5730\u5740\u53ef\u4ee5\u81ea\u884c\u5728\u7535\u8111\u67e5\u8be2\uff0c C:\\Windows\\System32\\drivers\\etc\\hosts \u4fee\u6539\u4e00\u4e0b\u5373\u53ef 127.0.0.1\u518d\u5236\u5b9a\u7aef\u53e3\u53f7","title":"3. \u5c40\u57df\u7f51\u5206\u4eab"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/04-Gradio%E5%BA%94%E7%94%A8%E5%88%86%E4%BA%AB/#4","text":"\u5728\u9996\u6b21\u6253\u5f00\u7f51\u9875\u524d\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u8d26\u6237\u5bc6\u7801\u3002\u6bd4\u5982auth\u53c2\u6570\u4e3a\uff08\u8d26\u6237\uff0c\u5bc6\u7801\uff09\u7684\u5143\u7ec4\u6570\u636e\u3002\u8fd9\u79cd\u6a21\u5f0f\u4e0b\u4e0d\u80fd\u591f\u4f7f\u7528queue\u51fd\u6570\u3002 demo . launch ( auth = ( \"admin\" , \"pass1234\" )) \u5982\u679c\u60f3\u8bbe\u7f6e\u66f4\u4e3a\u590d\u6742\u7684\u8d26\u6237\u5bc6\u7801\u548c\u5bc6\u7801\u63d0\u793a\uff0c\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u8bbe\u7f6e\u6821\u9a8c\u89c4\u5219\u3002 #\u8d26\u6237\u548c\u5bc6\u7801\u76f8\u540c\u5c31\u53ef\u4ee5\u901a\u8fc7 def same_auth ( username , password ): return username == password demo . launch ( auth = same_auth , auth_message = \"username and password must be the same\" )","title":"4. \u5bc6\u7801\u9a8c\u8bc1"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/05-Gradio%E6%A1%88%E4%BE%8B%E5%8D%87%E7%BA%A7/","text":"Gradio \u6848\u4f8b\u5347\u7ea7 1. \u6587\u672c\u5206\u7c7b\u2014\u5783\u573e\u90ae\u4ef6\u5206\u7c7b import gradio as gr from sklearn.feature_extraction.text import CountVectorizer import re import zhconv import jieba.posseg as psg import pickle import joblib def clean_data ( email ): # 1.\u53bb\u9664\u975e\u4e2d\u6587\u5b57\u7b26 email = re . sub ( r '[^\\u4e00-\\u9fa5]' , '' , email ) # 2.\u7e41\u4f53\u8f6c\u7b80\u4f53 email = zhconv . convert ( email , 'zh-cn' ) # 3.\u90ae\u4ef6\u8bcd\u6027\u7b5b\u9009 email_pos = psg . cut ( email ) allow_pos = [ 'n' , 'nr' , 'ns' , 'nt' , 'v' , 'a' ] email = [] for word , pos in email_pos : if pos in allow_pos : email . append ( word ) # 4.\u8f6c\u6362\u6210 str \u7c7b\u578b email = ' ' . join ( email ) return email def email_handle ( text ): # 1.\u5bf9\u6570\u636e\u8fdb\u884c\u6e05\u7406 content = clean_data ( text ) # 2.\u6570\u636e\u7279\u5f81\u63d0\u53d6 vocab = pickle . load ( open ( '03-\u6a21\u578b\u8bad\u7ec3\u7279\u5f81.pkl' , 'rb' )) transfer = CountVectorizer ( vocabulary = vocab ) content = transfer . transform ([ content ]) # 3.\u6a21\u578b\u52a0\u8f7d model = joblib . load ( '04-\u90ae\u4ef6\u5206\u7c7b\u6a21\u578b.pth' ) output = model . predict ( content ) prediction = output [ 0 ] prediction = '\u5783\u573e\u90ae\u4ef6' if prediction == 'spam' else '\u6b63\u5e38\u90ae\u4ef6' return prediction demo = gr . Interface ( fn = email_handle , inputs = \"text\" , outputs = \"label\" ) gr . close_all () demo . launch () 2. \u56fe\u50cf\u5206\u7c7b from torchvision import transforms import gradio as gr import torch import torchvision.models as models model = torch . hub . load ( 'pytorch/vision:v0.6.0' , 'resnet18' , pretrained = True ) . eval () # \u6253\u5f00\u6587\u672c\u6587\u4ef6 file_path = 'labels.txt' # \u5c06\u6587\u4ef6\u8def\u5f84\u66ff\u6362\u4e3a\u4f60\u5b9e\u9645\u7684\u6587\u672c\u6587\u4ef6\u8def\u5f84 with open ( file_path , 'r' ) as file : # \u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9 labels = file . readlines () # \u53bb\u6389\u6bcf\u4e2alabel\u7684\u6362\u884c\u7b26 labels = [ label . rstrip () for label in labels ] # \u9884\u6d4b\u51fd\u6570 def predict ( inp ): inp = transforms . ToTensor ()( inp ) . unsqueeze ( 0 ) with torch . no_grad (): prediction = torch . nn . functional . softmax ( model ( inp )[ 0 ], dim = 0 ) confidences = { labels [ i ]: float ( prediction [ i ]) for i in range ( 1000 )} return confidences # fn\u8868\u793a\u89e6\u53d1\u51fd\u6570\uff0c\u5f53\u6211\u4eec\u70b9\u51fb\u63d0\u4ea4\u6309\u94ae\u65f6\uff0c\u89e6\u53d1predict\u51fd\u6570\u8fdb\u884c\u63a8\u7406 # inputs\u8868\u793a\u56fe\u50cf\u4f1a\u88ab\u8f6c\u6362\u4e3aPIL.Image\u683c\u5f0f # outputs\u5c06\u4ee5label\u7684\u5f62\u5f0f\u5c55\u793a\u51fa\u6765 # examples\u53ef\u4ee5\u5c06\u56fe\u7247\u4f5c\u4e3a\u793a\u4f8b\u5c55\u793a\u51fa\u6765\uff0c\u4f9b\u7528\u6237\u4f7f\u7528 gr . Interface ( fn = predict , inputs = gr . Image ( type = \"pil\" ), outputs = gr . Label ( num_top_classes = 3 ), examples = [ \"demo/cat.jpg\" , \"demo/tiger.jpeg\" ]) . launch () 3. \u56fe\u7247\u7b5b\u9009\u5668 \u5c3d\u7ba1gradio\u7684\u8bbe\u8ba1\u521d\u8877\u662f\u4e3a\u4e86\u5feb\u901f\u521b\u5efa\u673a\u5668\u5b66\u4e60\u7528\u6237\u4ea4\u4e92\u9875\u9762\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u901a\u8fc7\u7ec4\u5408gradio\u7684\u5404\u79cd\u7ec4\u4ef6\uff0c\u7528\u6237\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u5b9e\u73b0\u975e\u5e38\u5b9e\u7528\u7684\u5404\u79cd\u5e94\u7528\u5c0f\u5de5\u5177\u3002 \u4f8b\u5982: \u6570\u636e\u5206\u6790\u5c55\u793adashboard, \u6570\u636e\u6807\u6ce8\u5de5\u5177, \u5236\u4f5c\u4e00\u4e2a\u5c0f\u6e38\u620f\u754c\u9762\u7b49\u7b49\u3002 \u672c\u8303\u4f8b\u6211\u4eec\u5c06\u5e94\u7528 gradio\u6765\u6784\u5efa\u4e00\u4e2a\u56fe\u7247\u7b5b\u9009\u5668\uff0c\u4ece\u767e\u5ea6\u722c\u53d6\u7684\u4e00\u5806\u732b\u54aa\u8868\u60c5\u5305\u4e2d\u5237\u9009\u4e00\u4e9b\u6211\u4eec\u559c\u6b22\u7684\u51fa\u6765\u3002 #!pip install -U torchkeras import torchkeras from torchkeras.data import download_baidu_pictures # download_baidu_pictures('\u732b\u54aa\u8868\u60c5\u5305', 100) import gradio as gr from PIL import Image import time , os from pathlib import Path base_dir = '\u732b\u54aa\u8868\u60c5\u5305' selected_dir = 'selected' files = [ str ( x ) for x in Path ( base_dir ) . rglob ( '*.jp*g' ) if 'checkpoint' not in str ( x )] def show_img ( path ): return Image . open ( path ) def fn_next ( done , todo ): # \u6784\u5efa\u6392\u5e8f\u5173\u952e\u5b57 # \u6839\u636e\u5df2\u67e5\u770b\u548c\u672a\u67e5\u770b\u7684\u6570\u91cf\u8fdb\u884c\u6392\u5e8f sort_key = lambda file : ( int ( os . path . splitext ( file )[ 0 ]) - done , - todo ) # \u5bf9\u6570\u636e\u96c6\u4e2d\u7684\u56fe\u50cf\u8fdb\u884c\u6392\u5e8f sorted_images = sorted ( os . listdir ( base_dir ), key = sort_key ) img_sort = sorted_images [ done + 1 ] path = os . path . join ( base_dir , img_sort ) done += 1 todo -= 1 img = show_img ( path ) return done , todo , path , img , msg def save_selected ( img_path ): img = Image . open ( img_path ) img = img . convert ( \"RGB\" ) img . save ( os . path . join ( selected_dir , img_path )) msg = \"Image saved successfully!\" return msg def get_default_msg (): msg = \"\u56fe\u50cf\u672a\u7b5b\u9009\u72b6\u6001\uff01\" return msg with gr . Blocks () as demo : with gr . Row (): total = gr . Number ( len ( files ), label = '\u603b\u6570\u91cf' ) with gr . Row (): done = gr . Number ( 0 , label = '\u5df2\u5b8c\u6210' ) todo = gr . Number ( len ( files ), label = '\u5f85\u5b8c\u6210' ) bn_next = gr . Button ( \"\u4e0b\u4e00\u5f20\" ) path = gr . Text ( files [ 0 ], lines = 1 , label = '\u5f53\u524d\u56fe\u7247\u8def\u5f84' ) feedback_button = gr . Button ( \"\u9009\u62e9\u56fe\u7247\" , variant = \"primary\" ) msg = gr . TextArea ( value = get_default_msg (), lines = 3 , max_lines = 5 ) img = gr . Image ( value = show_img ( files [ 0 ]), type = 'pil' ) bn_next . click ( fn_next , inputs = [ done , todo ], outputs = [ done , todo , path , img , msg ]) feedback_button . click ( save_selected , inputs = path , outputs = msg ) demo . launch ()","title":"Gradio \u6848\u4f8b\u5347\u7ea7"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/05-Gradio%E6%A1%88%E4%BE%8B%E5%8D%87%E7%BA%A7/#gradio","text":"","title":"Gradio \u6848\u4f8b\u5347\u7ea7"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/05-Gradio%E6%A1%88%E4%BE%8B%E5%8D%87%E7%BA%A7/#1","text":"import gradio as gr from sklearn.feature_extraction.text import CountVectorizer import re import zhconv import jieba.posseg as psg import pickle import joblib def clean_data ( email ): # 1.\u53bb\u9664\u975e\u4e2d\u6587\u5b57\u7b26 email = re . sub ( r '[^\\u4e00-\\u9fa5]' , '' , email ) # 2.\u7e41\u4f53\u8f6c\u7b80\u4f53 email = zhconv . convert ( email , 'zh-cn' ) # 3.\u90ae\u4ef6\u8bcd\u6027\u7b5b\u9009 email_pos = psg . cut ( email ) allow_pos = [ 'n' , 'nr' , 'ns' , 'nt' , 'v' , 'a' ] email = [] for word , pos in email_pos : if pos in allow_pos : email . append ( word ) # 4.\u8f6c\u6362\u6210 str \u7c7b\u578b email = ' ' . join ( email ) return email def email_handle ( text ): # 1.\u5bf9\u6570\u636e\u8fdb\u884c\u6e05\u7406 content = clean_data ( text ) # 2.\u6570\u636e\u7279\u5f81\u63d0\u53d6 vocab = pickle . load ( open ( '03-\u6a21\u578b\u8bad\u7ec3\u7279\u5f81.pkl' , 'rb' )) transfer = CountVectorizer ( vocabulary = vocab ) content = transfer . transform ([ content ]) # 3.\u6a21\u578b\u52a0\u8f7d model = joblib . load ( '04-\u90ae\u4ef6\u5206\u7c7b\u6a21\u578b.pth' ) output = model . predict ( content ) prediction = output [ 0 ] prediction = '\u5783\u573e\u90ae\u4ef6' if prediction == 'spam' else '\u6b63\u5e38\u90ae\u4ef6' return prediction demo = gr . Interface ( fn = email_handle , inputs = \"text\" , outputs = \"label\" ) gr . close_all () demo . launch ()","title":"1. \u6587\u672c\u5206\u7c7b\u2014\u5783\u573e\u90ae\u4ef6\u5206\u7c7b"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/05-Gradio%E6%A1%88%E4%BE%8B%E5%8D%87%E7%BA%A7/#2","text":"from torchvision import transforms import gradio as gr import torch import torchvision.models as models model = torch . hub . load ( 'pytorch/vision:v0.6.0' , 'resnet18' , pretrained = True ) . eval () # \u6253\u5f00\u6587\u672c\u6587\u4ef6 file_path = 'labels.txt' # \u5c06\u6587\u4ef6\u8def\u5f84\u66ff\u6362\u4e3a\u4f60\u5b9e\u9645\u7684\u6587\u672c\u6587\u4ef6\u8def\u5f84 with open ( file_path , 'r' ) as file : # \u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9 labels = file . readlines () # \u53bb\u6389\u6bcf\u4e2alabel\u7684\u6362\u884c\u7b26 labels = [ label . rstrip () for label in labels ] # \u9884\u6d4b\u51fd\u6570 def predict ( inp ): inp = transforms . ToTensor ()( inp ) . unsqueeze ( 0 ) with torch . no_grad (): prediction = torch . nn . functional . softmax ( model ( inp )[ 0 ], dim = 0 ) confidences = { labels [ i ]: float ( prediction [ i ]) for i in range ( 1000 )} return confidences # fn\u8868\u793a\u89e6\u53d1\u51fd\u6570\uff0c\u5f53\u6211\u4eec\u70b9\u51fb\u63d0\u4ea4\u6309\u94ae\u65f6\uff0c\u89e6\u53d1predict\u51fd\u6570\u8fdb\u884c\u63a8\u7406 # inputs\u8868\u793a\u56fe\u50cf\u4f1a\u88ab\u8f6c\u6362\u4e3aPIL.Image\u683c\u5f0f # outputs\u5c06\u4ee5label\u7684\u5f62\u5f0f\u5c55\u793a\u51fa\u6765 # examples\u53ef\u4ee5\u5c06\u56fe\u7247\u4f5c\u4e3a\u793a\u4f8b\u5c55\u793a\u51fa\u6765\uff0c\u4f9b\u7528\u6237\u4f7f\u7528 gr . Interface ( fn = predict , inputs = gr . Image ( type = \"pil\" ), outputs = gr . Label ( num_top_classes = 3 ), examples = [ \"demo/cat.jpg\" , \"demo/tiger.jpeg\" ]) . launch ()","title":"2. \u56fe\u50cf\u5206\u7c7b"},{"location":"04-Gradio%E6%9C%8D%E5%8A%A1%E6%8E%A5%E5%8F%A3/05-Gradio%E6%A1%88%E4%BE%8B%E5%8D%87%E7%BA%A7/#3","text":"\u5c3d\u7ba1gradio\u7684\u8bbe\u8ba1\u521d\u8877\u662f\u4e3a\u4e86\u5feb\u901f\u521b\u5efa\u673a\u5668\u5b66\u4e60\u7528\u6237\u4ea4\u4e92\u9875\u9762\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c\u901a\u8fc7\u7ec4\u5408gradio\u7684\u5404\u79cd\u7ec4\u4ef6\uff0c\u7528\u6237\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u5b9e\u73b0\u975e\u5e38\u5b9e\u7528\u7684\u5404\u79cd\u5e94\u7528\u5c0f\u5de5\u5177\u3002 \u4f8b\u5982: \u6570\u636e\u5206\u6790\u5c55\u793adashboard, \u6570\u636e\u6807\u6ce8\u5de5\u5177, \u5236\u4f5c\u4e00\u4e2a\u5c0f\u6e38\u620f\u754c\u9762\u7b49\u7b49\u3002 \u672c\u8303\u4f8b\u6211\u4eec\u5c06\u5e94\u7528 gradio\u6765\u6784\u5efa\u4e00\u4e2a\u56fe\u7247\u7b5b\u9009\u5668\uff0c\u4ece\u767e\u5ea6\u722c\u53d6\u7684\u4e00\u5806\u732b\u54aa\u8868\u60c5\u5305\u4e2d\u5237\u9009\u4e00\u4e9b\u6211\u4eec\u559c\u6b22\u7684\u51fa\u6765\u3002 #!pip install -U torchkeras import torchkeras from torchkeras.data import download_baidu_pictures # download_baidu_pictures('\u732b\u54aa\u8868\u60c5\u5305', 100) import gradio as gr from PIL import Image import time , os from pathlib import Path base_dir = '\u732b\u54aa\u8868\u60c5\u5305' selected_dir = 'selected' files = [ str ( x ) for x in Path ( base_dir ) . rglob ( '*.jp*g' ) if 'checkpoint' not in str ( x )] def show_img ( path ): return Image . open ( path ) def fn_next ( done , todo ): # \u6784\u5efa\u6392\u5e8f\u5173\u952e\u5b57 # \u6839\u636e\u5df2\u67e5\u770b\u548c\u672a\u67e5\u770b\u7684\u6570\u91cf\u8fdb\u884c\u6392\u5e8f sort_key = lambda file : ( int ( os . path . splitext ( file )[ 0 ]) - done , - todo ) # \u5bf9\u6570\u636e\u96c6\u4e2d\u7684\u56fe\u50cf\u8fdb\u884c\u6392\u5e8f sorted_images = sorted ( os . listdir ( base_dir ), key = sort_key ) img_sort = sorted_images [ done + 1 ] path = os . path . join ( base_dir , img_sort ) done += 1 todo -= 1 img = show_img ( path ) return done , todo , path , img , msg def save_selected ( img_path ): img = Image . open ( img_path ) img = img . convert ( \"RGB\" ) img . save ( os . path . join ( selected_dir , img_path )) msg = \"Image saved successfully!\" return msg def get_default_msg (): msg = \"\u56fe\u50cf\u672a\u7b5b\u9009\u72b6\u6001\uff01\" return msg with gr . Blocks () as demo : with gr . Row (): total = gr . Number ( len ( files ), label = '\u603b\u6570\u91cf' ) with gr . Row (): done = gr . Number ( 0 , label = '\u5df2\u5b8c\u6210' ) todo = gr . Number ( len ( files ), label = '\u5f85\u5b8c\u6210' ) bn_next = gr . Button ( \"\u4e0b\u4e00\u5f20\" ) path = gr . Text ( files [ 0 ], lines = 1 , label = '\u5f53\u524d\u56fe\u7247\u8def\u5f84' ) feedback_button = gr . Button ( \"\u9009\u62e9\u56fe\u7247\" , variant = \"primary\" ) msg = gr . TextArea ( value = get_default_msg (), lines = 3 , max_lines = 5 ) img = gr . Image ( value = show_img ( files [ 0 ]), type = 'pil' ) bn_next . click ( fn_next , inputs = [ done , todo ], outputs = [ done , todo , path , img , msg ]) feedback_button . click ( save_selected , inputs = path , outputs = msg ) demo . launch ()","title":"3. \u56fe\u7247\u7b5b\u9009\u5668"},{"location":"05-ModelScope%E6%90%AD%E5%BB%BAAgent/01-ModelScope%E6%90%AD%E5%BB%BAAgent/","text":"ModelScope\u642d\u5efaAgent \u81ea\u4eceOpenAI\u53d1\u5e03\u4e86GPT4\uff0c\u6253\u9020Agent\u751f\u6001\u4ee5\u6765\uff0c\u5404\u79cd\u667a\u80fd\u4f53\u6d8c\u73b0\u51fa\u6765\uff0c\u4f46\u662f\u5728\u56fd\u5185\u8fd8\u662f\u5f88\u591a\u4eba\u65e0\u6cd5\u4f53\u9a8c\u8fd9\u4e00\u80fd\u529b\u3002 \u73b0\u5728\u9b54\u642d\u793e\u533a\u57fa\u4e8e\u901a\u4e49\u5927\u6a21\u578b\uff0c\u7ed9\u5927\u5bb6\u63d0\u4f9b\u4e86\u53e6\u4e00\u79cd\u642d\u5efaAgent\u7684\u6e20\u9053\u3002 1.\u6253\u5f00 \u9b54\u642d\u793e\u533a\uff0c\u767b\u5f55/\u6ce8\u518c\u8d26\u53f7 \u9b54\u642d\u793e\u533a\u5b98\u7f51\uff1a https://www.modelscope.cn/home 2.\u521b\u5efa\u901a\u4e49\u5343\u95eeAPI 2.1 \u5f00\u901a DashScope\u7075\u79ef\u6a21\u578b\u670d\u52a1 \u963f\u91cc\u4e91\u5e73\u53f0 \u767b\u5f55\u963f\u91cc\u4e91\u8d26\u53f7\uff0c\u6253\u5f00 DashScope\u7ba1\u7406\u63a7\u5236\u53f0\uff0c\u5f00\u901a DashScope\u7075\u79ef\u6a21\u578b\u670d\u52a1 2.2 \u521b\u5efa API-KEY \u56de\u5230\u63a7\u5236\u53f0\uff0c\u521b\u5efa API-KEY\uff0c\u5e76\u8bb0\u5f97\u590d\u5236\u4fdd\u5b58\uff01\uff01\uff01\uff01 3.\u4f7f\u7528 \u9b54\u642dAgent\u521b\u5efa\u5668 \u5feb\u901f\u521b\u5efaAgent \u6253\u5f00\u9b54\u642d\u793e\u533a\u7684 AgentFabric \u5de6\u4fa7\u7684\u3010create\u3011\uff0c\u662f\u4e00\u4e2a\u804a\u5929\u754c\u9762\uff0c\u901a\u8fc7\u8bed\u8a00\u63cf\u8ff0\u5c31\u80fd\u96f6\u4ee3\u7801\u521b\u5efa\u4e00\u4e2aAgent\uff0c\u53f3\u4fa7\u662f\u5373\u65f6\u4f53\u9a8c\u754c\u9762 3.1 \u5728\u5de6\u4fa7\u804a\u5929\u6846\u4e2d\u53d1\u9001\u4f60\u60f3\u8981\u7684\u529f\u80fd \u8fd9\u91cc\u6211\u7ed9\u51fa\u4e00\u4e2a \u8bbe\u8ba1\u89e3\u538b\u795e\u5668Agent \u7684example \u4e00\u4e2a\u4e13\u4e3a\u7528\u6237\u8bbe\u8ba1\u7684\u89e3\u538b\u52a9\u624b\uff0c\u901a\u8fc7\u6a21\u4eff\u90ed\u5fb7\u7eb2\u7684\u7ecf\u5178\u53e3\u5934\u7985\u6765\u7f13\u89e3\u7528\u6237\u538b\u529b\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u5b83\u5728\u56de\u590d\u7684\u540c\u65f6\uff0c\u591a\u4e862\u884c\u5b57\uff0c\u5206\u522b\u662f \u2705Config Updated! \u2705Logo Updated! \u8fd9\u662f\u5728\u8c03\u6574Agent\u7684\u914d\u7f6e\uff0c\u4ee5\u53calogo\uff0c\u53ef\u4ee5\u5728\u53f3\u8fb9\u67e5\u770b\u5230\u5177\u4f53\u7684\u4fee\u6539\u3002 \u6b64\u5916\u5b83\u8fd8\u4f1a\u53cd\u95ee\u4e00\u4e9b\u95ee\u9898\uff0c\u6bd4\u5982\u76f8\u58f0\u548c\u53e3\u5934\u8bed\u7b49\u3002 \u53ef\u4ee5\u901a\u8fc7\u56de\u590d\u6765\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u914d\u7f6e\u81ea\u52a8\u8c03\u6574\uff0c\u4f46\u4e5f\u53ef\u4ee5\u4e0d\u4e88\u7406\u4f1a\uff0c\u53f3\u8fb9\u53ef\u4ee5\u5b9e\u65f6\u4f53\u9a8c\u8c03\u6574\u540e\u7684\u6548\u679c\u3002 3.2 \u68c0\u67e5\u914d\u7f6e&\u63d0\u4f9bTool \u70b9\u8fdb\u5de6\u4e0a\u89d2\u7684\u3010Configure\u3011\u53ef\u4ee5\u67e5\u770b Agent \u7684\u914d\u7f6e\uff0c\u5176\u4e2d\u7684\u5b57\u6bb5\u5747\u53ef\u4efb\u610f\u4fee\u6539\u505aPrompt Enginerring \u4e0b\u65b9\u7684\u3010Capabilities\u3011\u662f\u8fd9\u4e2aAgent\u53ef\u8c03\u7528\u7684Tool\uff0c\u76ee\u524d\u53ef\u7528\u7684\u5185\u7f6eTools\u6709\u9650\uff0c\u53ef\u6309\u9700\u52fe\u9009 3.3 \u4f53\u9a8cAgent\uff0c\u505aPrompt Engineering \u53f3\u8fb9\u7684\u804a\u5929\u6846\u91cc\u968f\u65f6\u53ef\u4ee5\u4f53\u9a8c Agent\uff0c\u53ef\u81ea\u7531\u6839\u636e\u5b9e\u65bd\u6548\u679c\u8fdb\u884cPrompt\u4fee\u6539\uff0c\u4f46\u4fee\u6539\u540e\u8bb0\u5f97\u70b9\u51fb\u3010Update Configuration\u3011\u66f4\u65b0\u914d\u7f6e\uff0c\u5426\u5219\u6548\u679c\u4e0d\u4f1a\u6709\u53d8\u5316 \u8fd8\u53ef\u4ee5 \u70b9\u5f00\u25b6\uff0c\u67e5\u770b\u8c03\u7528\u8be6\u60c5 3.4 \u53d1\u5e03 \u5c5e\u4e8e\u81ea\u5df1\u7684Agent \u521b\u5efaAgent\u5e76\u5b9e\u9a8c\u6548\u679c\u6ee1\u610f\u540e\uff0c\u70b9\u51fb\u3010\u6784\u5efa\u3011\uff0c\u6784\u5efa\u5b8c\u6210\u540e\u70b9\u51fb\u3010\u53d1\u5e03\u3011 \u4fee\u6539\u521b\u7a7a\u95f4\u4fe1\u606f\uff0c\u586b\u5165\u901a\u4e49\u5343\u95ee\u7684 API-KEY\uff0c\u7136\u540e\u3010\u590d\u5236\u521b\u7a7a\u95f4\u3011 \u6253\u5f00\u76f8\u5e94\u7684\u521b\u7a7a\u95f4\uff0c\u8fdb\u5165\u3010\u8bbe\u7f6e\u3011\u3001\u3010\u4e0a\u7ebf\u7a7a\u95f4\u5c55\u793a\u3011 \u7b49\u5f85\u53d1\u5e03\u6210\u529f\uff0c\u53ef\u4ee5\u628a\u94fe\u63a5\u53d1\u7ed9\u5176\u4ed6\u4eba\uff0c\u5c31\u80fd\u8ba9\u5927\u5bb6\u4eab\u53d7\u4f60\u521b\u5efa\u7684Agent\u4e86\u3002","title":"ModelScope\u642d\u5efaAgent"},{"location":"05-ModelScope%E6%90%AD%E5%BB%BAAgent/01-ModelScope%E6%90%AD%E5%BB%BAAgent/#modelscopeagent","text":"\u81ea\u4eceOpenAI\u53d1\u5e03\u4e86GPT4\uff0c\u6253\u9020Agent\u751f\u6001\u4ee5\u6765\uff0c\u5404\u79cd\u667a\u80fd\u4f53\u6d8c\u73b0\u51fa\u6765\uff0c\u4f46\u662f\u5728\u56fd\u5185\u8fd8\u662f\u5f88\u591a\u4eba\u65e0\u6cd5\u4f53\u9a8c\u8fd9\u4e00\u80fd\u529b\u3002 \u73b0\u5728\u9b54\u642d\u793e\u533a\u57fa\u4e8e\u901a\u4e49\u5927\u6a21\u578b\uff0c\u7ed9\u5927\u5bb6\u63d0\u4f9b\u4e86\u53e6\u4e00\u79cd\u642d\u5efaAgent\u7684\u6e20\u9053\u3002","title":"ModelScope\u642d\u5efaAgent"},{"location":"05-ModelScope%E6%90%AD%E5%BB%BAAgent/01-ModelScope%E6%90%AD%E5%BB%BAAgent/#1","text":"\u9b54\u642d\u793e\u533a\u5b98\u7f51\uff1a https://www.modelscope.cn/home","title":"1.\u6253\u5f00 \u9b54\u642d\u793e\u533a\uff0c\u767b\u5f55/\u6ce8\u518c\u8d26\u53f7"},{"location":"05-ModelScope%E6%90%AD%E5%BB%BAAgent/01-ModelScope%E6%90%AD%E5%BB%BAAgent/#2api","text":"","title":"2.\u521b\u5efa\u901a\u4e49\u5343\u95eeAPI"},{"location":"05-ModelScope%E6%90%AD%E5%BB%BAAgent/01-ModelScope%E6%90%AD%E5%BB%BAAgent/#21-dashscope","text":"\u963f\u91cc\u4e91\u5e73\u53f0 \u767b\u5f55\u963f\u91cc\u4e91\u8d26\u53f7\uff0c\u6253\u5f00 DashScope\u7ba1\u7406\u63a7\u5236\u53f0\uff0c\u5f00\u901a DashScope\u7075\u79ef\u6a21\u578b\u670d\u52a1","title":"2.1 \u5f00\u901a DashScope\u7075\u79ef\u6a21\u578b\u670d\u52a1"},{"location":"05-ModelScope%E6%90%AD%E5%BB%BAAgent/01-ModelScope%E6%90%AD%E5%BB%BAAgent/#22-api-key","text":"\u56de\u5230\u63a7\u5236\u53f0\uff0c\u521b\u5efa API-KEY\uff0c\u5e76\u8bb0\u5f97\u590d\u5236\u4fdd\u5b58\uff01\uff01\uff01\uff01","title":"2.2 \u521b\u5efa API-KEY"},{"location":"05-ModelScope%E6%90%AD%E5%BB%BAAgent/01-ModelScope%E6%90%AD%E5%BB%BAAgent/#3-agent-agent","text":"\u6253\u5f00\u9b54\u642d\u793e\u533a\u7684 AgentFabric \u5de6\u4fa7\u7684\u3010create\u3011\uff0c\u662f\u4e00\u4e2a\u804a\u5929\u754c\u9762\uff0c\u901a\u8fc7\u8bed\u8a00\u63cf\u8ff0\u5c31\u80fd\u96f6\u4ee3\u7801\u521b\u5efa\u4e00\u4e2aAgent\uff0c\u53f3\u4fa7\u662f\u5373\u65f6\u4f53\u9a8c\u754c\u9762","title":"3.\u4f7f\u7528 \u9b54\u642dAgent\u521b\u5efa\u5668 \u5feb\u901f\u521b\u5efaAgent"},{"location":"05-ModelScope%E6%90%AD%E5%BB%BAAgent/01-ModelScope%E6%90%AD%E5%BB%BAAgent/#31","text":"\u8fd9\u91cc\u6211\u7ed9\u51fa\u4e00\u4e2a \u8bbe\u8ba1\u89e3\u538b\u795e\u5668Agent \u7684example \u4e00\u4e2a\u4e13\u4e3a\u7528\u6237\u8bbe\u8ba1\u7684\u89e3\u538b\u52a9\u624b\uff0c\u901a\u8fc7\u6a21\u4eff\u90ed\u5fb7\u7eb2\u7684\u7ecf\u5178\u53e3\u5934\u7985\u6765\u7f13\u89e3\u7528\u6237\u538b\u529b\u3002 \u53ef\u4ee5\u770b\u5230\uff0c\u5b83\u5728\u56de\u590d\u7684\u540c\u65f6\uff0c\u591a\u4e862\u884c\u5b57\uff0c\u5206\u522b\u662f \u2705Config Updated! \u2705Logo Updated! \u8fd9\u662f\u5728\u8c03\u6574Agent\u7684\u914d\u7f6e\uff0c\u4ee5\u53calogo\uff0c\u53ef\u4ee5\u5728\u53f3\u8fb9\u67e5\u770b\u5230\u5177\u4f53\u7684\u4fee\u6539\u3002 \u6b64\u5916\u5b83\u8fd8\u4f1a\u53cd\u95ee\u4e00\u4e9b\u95ee\u9898\uff0c\u6bd4\u5982\u76f8\u58f0\u548c\u53e3\u5934\u8bed\u7b49\u3002 \u53ef\u4ee5\u901a\u8fc7\u56de\u590d\u6765\u8fdb\u884c\u8fdb\u4e00\u6b65\u7684\u914d\u7f6e\u81ea\u52a8\u8c03\u6574\uff0c\u4f46\u4e5f\u53ef\u4ee5\u4e0d\u4e88\u7406\u4f1a\uff0c\u53f3\u8fb9\u53ef\u4ee5\u5b9e\u65f6\u4f53\u9a8c\u8c03\u6574\u540e\u7684\u6548\u679c\u3002","title":"3.1 \u5728\u5de6\u4fa7\u804a\u5929\u6846\u4e2d\u53d1\u9001\u4f60\u60f3\u8981\u7684\u529f\u80fd"},{"location":"05-ModelScope%E6%90%AD%E5%BB%BAAgent/01-ModelScope%E6%90%AD%E5%BB%BAAgent/#32-tool","text":"\u70b9\u8fdb\u5de6\u4e0a\u89d2\u7684\u3010Configure\u3011\u53ef\u4ee5\u67e5\u770b Agent \u7684\u914d\u7f6e\uff0c\u5176\u4e2d\u7684\u5b57\u6bb5\u5747\u53ef\u4efb\u610f\u4fee\u6539\u505aPrompt Enginerring \u4e0b\u65b9\u7684\u3010Capabilities\u3011\u662f\u8fd9\u4e2aAgent\u53ef\u8c03\u7528\u7684Tool\uff0c\u76ee\u524d\u53ef\u7528\u7684\u5185\u7f6eTools\u6709\u9650\uff0c\u53ef\u6309\u9700\u52fe\u9009","title":"3.2 \u68c0\u67e5\u914d\u7f6e&amp;\u63d0\u4f9bTool"},{"location":"05-ModelScope%E6%90%AD%E5%BB%BAAgent/01-ModelScope%E6%90%AD%E5%BB%BAAgent/#33-agentprompt-engineering","text":"\u53f3\u8fb9\u7684\u804a\u5929\u6846\u91cc\u968f\u65f6\u53ef\u4ee5\u4f53\u9a8c Agent\uff0c\u53ef\u81ea\u7531\u6839\u636e\u5b9e\u65bd\u6548\u679c\u8fdb\u884cPrompt\u4fee\u6539\uff0c\u4f46\u4fee\u6539\u540e\u8bb0\u5f97\u70b9\u51fb\u3010Update Configuration\u3011\u66f4\u65b0\u914d\u7f6e\uff0c\u5426\u5219\u6548\u679c\u4e0d\u4f1a\u6709\u53d8\u5316 \u8fd8\u53ef\u4ee5 \u70b9\u5f00\u25b6\uff0c\u67e5\u770b\u8c03\u7528\u8be6\u60c5","title":"3.3 \u4f53\u9a8cAgent\uff0c\u505aPrompt Engineering"},{"location":"05-ModelScope%E6%90%AD%E5%BB%BAAgent/01-ModelScope%E6%90%AD%E5%BB%BAAgent/#34-agent","text":"\u521b\u5efaAgent\u5e76\u5b9e\u9a8c\u6548\u679c\u6ee1\u610f\u540e\uff0c\u70b9\u51fb\u3010\u6784\u5efa\u3011\uff0c\u6784\u5efa\u5b8c\u6210\u540e\u70b9\u51fb\u3010\u53d1\u5e03\u3011 \u4fee\u6539\u521b\u7a7a\u95f4\u4fe1\u606f\uff0c\u586b\u5165\u901a\u4e49\u5343\u95ee\u7684 API-KEY\uff0c\u7136\u540e\u3010\u590d\u5236\u521b\u7a7a\u95f4\u3011 \u6253\u5f00\u76f8\u5e94\u7684\u521b\u7a7a\u95f4\uff0c\u8fdb\u5165\u3010\u8bbe\u7f6e\u3011\u3001\u3010\u4e0a\u7ebf\u7a7a\u95f4\u5c55\u793a\u3011 \u7b49\u5f85\u53d1\u5e03\u6210\u529f\uff0c\u53ef\u4ee5\u628a\u94fe\u63a5\u53d1\u7ed9\u5176\u4ed6\u4eba\uff0c\u5c31\u80fd\u8ba9\u5927\u5bb6\u4eab\u53d7\u4f60\u521b\u5efa\u7684Agent\u4e86\u3002","title":"3.4 \u53d1\u5e03 \u5c5e\u4e8e\u81ea\u5df1\u7684Agent"}]}